id: html5_vdi_client_breakout
name: "HTML5 VDI Client-Side Exploitation"
category: post_exploitation
description: "Specialized methodology for exploiting HTML5/web-based VDI clients and browser-based remote desktop access"
estimated_duration: "2-3h"
risk_level: high
stealth_level: moderate

# Asset property-based triggers
asset_triggers:
  - id: html5_vdi_detected
    asset_type: service
    conditions:
      - property: "service_name"
        operator: "in"
        values: ["http", "https"]
      - property: "web_technologies"
        operator: "contains"
        value: "vdi"
    trigger_name: "HTML5 VDI Client Testing"
    description: "Trigger when HTML5 VDI client is detected"
    priority: 8

  - id: citrix_html5_detected
    asset_type: service
    conditions:
      - property: "web_technologies"
        operator: "contains"
        value: "citrix"
      - property: "service_name"
        operator: "in"
        values: ["http", "https"]
    trigger_name: "Citrix HTML5 Client Testing"
    description: "Trigger Citrix HTML5 specific testing"
    priority: 7

# Methodology phases
phases:
  # Phase 1: HTML5 Client Reconnaissance
  - id: html5_client_recon
    name: "HTML5 VDI Client Reconnaissance"
    description: "Identify and analyze HTML5 VDI client implementation"
    order: 1
    steps:
      - id: client_technology_identification
        name: "Client Technology Identification"
        type: manual
        description: "Identify HTML5 VDI client technology and version"
        order: 1
        instructions: |
          1. Open browser developer tools (F12)
          2. Analyze network traffic during VDI session establishment
          3. Check JavaScript sources and libraries loaded
          4. Identify WebSocket connections and protocols
          5. Look for client version information in source or headers
          6. Check for client-specific API endpoints

          Common HTML5 VDI clients:
          - Citrix HTML5 Receiver/Workspace
          - VMware Horizon HTML Access
          - Microsoft RDWeb HTML5
          - Apache Guacamole
          - Parallels RAS HTML5

      - id: websocket_analysis
        name: "WebSocket Traffic Analysis"
        type: manual
        description: "Analyze WebSocket communication"
        order: 2
        instructions: |
          1. Monitor WebSocket traffic in browser dev tools
          2. Look for message formats and protocols
          3. Identify authentication tokens and session data
          4. Check for unencrypted data transmission
          5. Look for client-server command protocols
          6. Test message manipulation capabilities

      - id: api_endpoint_discovery
        name: "API Endpoint Discovery"
        type: manual
        description: "Discover hidden API endpoints"
        order: 3
        instructions: |
          1. Review JavaScript source code for API calls
          2. Check for commented-out or debug endpoints
          3. Look for admin or configuration APIs
          4. Test for directory traversal in API paths
          5. Check for CORS misconfigurations
          6. Test for authentication bypass on API endpoints

  # Phase 2: Client-Side Web Vulnerabilities
  - id: web_client_vulnerabilities
    name: "HTML5 Client Web Vulnerabilities"
    description: "Test for standard web vulnerabilities in VDI client"
    order: 2
    steps:
      - id: xss_testing
        name: "Cross-Site Scripting Testing"
        type: manual
        description: "Test for XSS vulnerabilities in VDI web interface"
        order: 1
        instructions: |
          Test XSS in various input fields:

          1. Login form fields
          2. Session configuration parameters
          3. File upload functionality
          4. Error message parameters
          5. URL parameters and fragments

          XSS Payloads to test:
          - <script>alert('XSS')</script>
          - <img src=x onerror=alert('XSS')>
          - javascript:alert('XSS')
          - "><script>alert('XSS')</script>
          - '+alert('XSS')+'

          If XSS found, test for:
          - Session token theft
          - VDI session hijacking
          - Credential harvesting
          - Client-side code injection

      - id: csrf_testing
        name: "Cross-Site Request Forgery Testing"
        type: manual
        description: "Test for CSRF vulnerabilities"
        order: 2
        instructions: |
          1. Identify state-changing operations (login, config changes)
          2. Check for CSRF tokens in requests
          3. Test token validation and randomness
          4. Create CSRF proof-of-concepts for:
             - Unauthorized session launch
             - Configuration changes
             - File transfers
             - Session termination

      - id: authentication_bypass
        name: "Authentication Bypass Testing"
        type: manual
        description: "Test for authentication weaknesses"
        order: 3
        instructions: |
          1. Test for SQL injection in login forms
          2. Check for default credentials
          3. Test password reset functionality
          4. Look for session fixation vulnerabilities
          5. Test for authentication timing attacks
          6. Check for JWT token vulnerabilities if used
          7. Test for SSO bypass techniques

  # Phase 3: File Transfer and Data Exfiltration
  - id: html5_file_transfer
    name: "HTML5 File Transfer Exploitation"
    description: "Exploit HTML5 file transfer capabilities"
    order: 3
    steps:
      - id: drag_drop_exploitation
        name: "Drag and Drop File Transfer"
        type: manual
        description: "Test drag and drop file transfer capabilities"
        order: 1
        instructions: |
          1. Test dragging files from local system into VDI session
          2. Test dragging files from VDI to local system
          3. Check file type restrictions and bypasses
          4. Test large file transfers
          5. Check for path traversal in uploaded files
          6. Test malicious file uploads (scripts, executables)
          7. Verify file content validation

      - id: upload_download_api
        name: "Upload/Download API Exploitation"
        type: manual
        description: "Exploit file upload/download APIs"
        order: 2
        instructions: |
          1. Identify file transfer API endpoints
          2. Test for directory traversal in file paths
          3. Check for arbitrary file download
          4. Test file upload restrictions and bypasses
          5. Check for file overwrite capabilities
          6. Test for server-side file execution
          7. Look for temporary file access

      - id: clipboard_hijacking
        name: "Clipboard Hijacking via JavaScript"
        type: manual
        description: "Exploit clipboard access through browser APIs"
        order: 3
        instructions: |
          1. Test clipboard read permissions
          2. Test clipboard write capabilities
          3. Create JavaScript to monitor clipboard
          4. Test large data transfer via clipboard
          5. Check for binary data transfer
          6. Test cross-domain clipboard access

  # Phase 4: Session Hijacking and Manipulation
  - id: session_manipulation
    name: "VDI Session Hijacking and Manipulation"
    description: "Manipulate and hijack VDI sessions"
    order: 4
    steps:
      - id: websocket_hijacking
        name: "WebSocket Session Hijacking"
        type: manual
        description: "Hijack WebSocket sessions"
        order: 1
        instructions: |
          1. Capture WebSocket handshake and authentication
          2. Test for session token replay attacks
          3. Try to establish duplicate sessions
          4. Test for session fixation
          5. Check for WebSocket origin validation
          6. Test message injection into existing sessions

      - id: session_token_manipulation
        name: "Session Token Manipulation"
        type: manual
        description: "Manipulate session tokens and cookies"
        order: 2
        instructions: |
          1. Analyze session token structure
          2. Test for weak session token generation
          3. Check for session token in URL parameters
          4. Test session timeout handling
          5. Look for session tokens in local storage
          6. Test for privilege escalation via token modification

      - id: multi_session_abuse
        name: "Multi-Session Abuse"
        type: manual
        description: "Exploit multiple concurrent sessions"
        order: 3
        instructions: |
          1. Test opening multiple VDI sessions
          2. Check for session isolation
          3. Test cross-session data access
          4. Look for shared resources between sessions
          5. Test for session collision attacks

  # Phase 5: Browser Security Feature Bypass
  - id: browser_security_bypass
    name: "Browser Security Feature Bypass"
    description: "Bypass browser security features"
    order: 5
    steps:
      - id: same_origin_bypass
        name: "Same Origin Policy Bypass"
        type: manual
        description: "Attempt to bypass same origin policy"
        order: 1
        instructions: |
          1. Test CORS configuration
          2. Look for JSONP endpoints
          3. Test postMessage vulnerabilities
          4. Check for domain relaxation issues
          5. Test subdomain takeover possibilities
          6. Look for wildcard CORS origins

      - id: csp_bypass
        name: "Content Security Policy Bypass"
        type: manual
        description: "Bypass CSP restrictions"
        order: 2
        instructions: |
          1. Analyze CSP headers and meta tags
          2. Look for unsafe-inline or unsafe-eval
          3. Test for CSP bypass via JSONP
          4. Check for whitelisted CDN abuse
          5. Test for base-uri bypass
          6. Look for CSP report-uri abuse

      - id: iframe_sandbox_escape
        name: "iFrame Sandbox Escape"
        type: manual
        description: "Escape iframe sandbox restrictions"
        order: 3
        instructions: |
          1. Check if VDI runs in sandboxed iframe
          2. Test sandbox attribute bypasses
          3. Look for sandbox escape via postMessage
          4. Test for document.domain manipulation
          5. Check for sandbox inheritance issues

  # Phase 6: Client-Side Code Injection
  - id: client_code_injection
    name: "Client-Side Code Injection"
    description: "Inject and execute code in client browser"
    order: 6
    steps:
      - id: javascript_injection
        name: "JavaScript Code Injection"
        type: manual
        description: "Inject JavaScript into VDI client"
        order: 1
        instructions: |
          1. Use browser console to inject code
          2. Test for DOM-based XSS
          3. Inject code via WebSocket messages
          4. Use browser extensions for code injection
          5. Test for eval() and Function() exploitation
          6. Inject code via file upload polyglots

      - id: websocket_message_injection
        name: "WebSocket Message Injection"
        type: manual
        description: "Inject malicious WebSocket messages"
        order: 2
        instructions: |
          1. Intercept and modify WebSocket messages
          2. Inject keyboard/mouse events
          3. Test for command injection via messages
          4. Modify clipboard data in transit
          5. Inject file transfer commands
          6. Test for protocol confusion attacks

      - id: browser_extension_abuse
        name: "Browser Extension Abuse"
        type: manual
        description: "Abuse browser extensions for VDI manipulation"
        order: 3
        instructions: |
          1. Create malicious browser extension
          2. Test extension permissions and APIs
          3. Use extension to monitor VDI traffic
          4. Inject code via extension content scripts
          5. Abuse extension storage APIs
          6. Test for extension privilege escalation

  # Phase 7: Advanced HTML5 Exploitation
  - id: advanced_html5_exploitation
    name: "Advanced HTML5 Feature Exploitation"
    description: "Exploit advanced HTML5 features"
    order: 7
    steps:
      - id: web_workers_exploitation
        name: "Web Workers Exploitation"
        type: manual
        description: "Exploit Web Workers for background processing"
        order: 1
        instructions: |
          1. Create persistent Web Workers
          2. Use Workers for background data exfiltration
          3. Test SharedArrayBuffer exploitation
          4. Use Workers to bypass rate limiting
          5. Test for Worker-based cryptojacking
          6. Use Workers for persistent XSS

      - id: service_worker_abuse
        name: "Service Worker Abuse"
        type: manual
        description: "Abuse Service Workers for persistence"
        order: 2
        instructions: |
          1. Register malicious Service Worker
          2. Intercept and modify network requests
          3. Create offline persistence mechanism
          4. Abuse push notifications
          5. Test for Service Worker privilege escalation
          6. Use for man-in-the-middle attacks

      - id: webrtc_exploitation
        name: "WebRTC Exploitation"
        type: manual
        description: "Exploit WebRTC for network access"
        order: 3
        instructions: |
          1. Test for WebRTC IP leakage
          2. Use WebRTC for peer-to-peer communication
          3. Test for STUN/TURN server abuse
          4. Check for WebRTC permission bypasses
          5. Use for real-time data exfiltration
          6. Test for WebRTC-based CSRF

# Chain triggers
chain_triggers:
  - conditions:
      - outcome: "html5_client_compromised"
        value: true
    trigger: vdi_session_exploitation
    priority: 9
    description: "Exploit VDI session after client compromise"

  - conditions:
      - outcome: "session_hijacked"
        value: true
    trigger: privilege_escalation
    priority: 8
    description: "Attempt privilege escalation after session hijack"

# Outcome schema
outcome_schema:
  html5_client_compromised:
    type: boolean
    description: "Whether HTML5 VDI client was compromised"
    critical: true

  xss_vulnerabilities_found:
    type: array
    items: string
    description: "XSS vulnerabilities discovered"

  file_transfer_possible:
    type: boolean
    description: "Whether file transfer was possible via HTML5 client"

  session_hijacked:
    type: boolean
    description: "Whether VDI session was successfully hijacked"

  client_side_persistence:
    type: boolean
    description: "Whether client-side persistence was established"

  data_exfiltration_channels:
    type: array
    items: string
    description: "Available data exfiltration channels"

  websocket_vulnerabilities:
    type: array
    items: string
    description: "WebSocket vulnerabilities found"

# Detection signatures
detection_signatures:
  - name: "HTML5 Client XSS Attempt"
    pattern: "JavaScript injection in VDI client parameters"
    log_source: "web_application_firewall"
    severity: "high"

  - name: "WebSocket Message Manipulation"
    pattern: "Unusual WebSocket message patterns"
    log_source: "network_monitoring"
    severity: "medium"

  - name: "File Transfer Abuse"
    pattern: "Unusual file upload/download patterns"
    log_source: "application_logs"
    severity: "medium"

  - name: "Session Hijacking Attempt"
    pattern: "Multiple sessions from same user"
    log_source: "authentication_logs"
    severity: "high"

# Cleanup procedures
cleanup_procedures:
  - description: "Remove client-side artifacts"
    commands:
      - platform: browser
        command: |
          1. Clear browser cache and cookies
          2. Remove any installed extensions
          3. Clear local storage and session storage
          4. Unregister Service Workers
          5. Clear Web Workers

# Suppression options
suppression:
  available_scopes:
    - scope: "client_type"
      description: "Skip specific HTML5 client testing"
      conditions: ["Client not in scope", "Limited browser access"]
    - scope: "vulnerability_type"
      description: "Skip specific vulnerability types"
      conditions: ["XSS testing restricted", "File transfer out of scope"]