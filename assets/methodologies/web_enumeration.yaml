id: "web_enumeration"
name: "Web Application Enumeration"
version: "1.0.0"
category: "enumeration"
description: "Comprehensive enumeration of web applications and services"
rationale: "Web applications often contain the most accessible attack vectors"

risk_level: "medium"
stealth_level: "active"
estimated_duration: "45m"

triggers:
  - type: "service_detected"
    conditions:
      service: "http"
      port: [80, 443, 8080, 8443]
    priority: 80
    description: "Web service detected on common ports"
    deduplication:
      strategy: "signature_based"
      signature_fields: ["host_ip", "port"]
      cooldown_period: "12h"
      max_executions: 2

steps:
  - id: "directory_enumeration"
    name: "Directory and File Enumeration"
    description: "Discover hidden directories and files"
    type: "command"
    order: 1
    command: "gobuster dir -u http://{host_ip}:{port} -w /usr/share/wordlists/common.txt"
    command_variants:
      - condition: "port == 443"
        command: "gobuster dir -u https://{host_ip}:{port} -w /usr/share/wordlists/common.txt -k"
        description: "HTTPS variant with SSL verification disabled"
    expected_outputs:
      - type: "directory_listing"
        parser: "gobuster_directory"
        success_indicators: ["Status: 200", "Status: 301"]
        failure_indicators: ["Status: 404", "Status: 403"]
    asset_discovery:
      search_patterns:
        - pattern: "/(\\S+)\\s+\\(Status: 200\\)"
          asset_type: "url"
          confidence: 0.9
          metadata:
            status_code: 200
            discovery_method: "directory_enumeration"

  - id: "technology_detection"
    name: "Web Technology Stack Detection"
    description: "Identify web technologies, frameworks, and versions"
    type: "command"
    order: 2
    command: "whatweb -v http://{host_ip}:{port}"
    command_variants:
      - condition: "port == 443"
        command: "whatweb -v https://{host_ip}:{port}"
        description: "HTTPS technology detection"
    expected_outputs:
      - type: "technology_stack"
        parser: "whatweb"
        success_indicators: ["Title", "Server"]
        failure_indicators: ["ERROR", "Connection refused"]
    asset_discovery:
      search_patterns:
        - pattern: "\\[(\\w+)\\s+([^\\]]+)\\]"
          asset_type: "vulnerability"
          confidence: 0.7
          metadata:
            technology_type: "web_framework"

  - id: "robots_txt_check"
    name: "Robots.txt Analysis"
    description: "Check robots.txt for interesting paths"
    type: "command"
    order: 3
    command: "curl -s http://{host_ip}:{port}/robots.txt"
    command_variants:
      - condition: "port == 443"
        command: "curl -s -k https://{host_ip}:{port}/robots.txt"
        description: "HTTPS robots.txt check"
    expected_outputs:
      - type: "robots_analysis"
        parser: "robots_txt"
        success_indicators: ["Disallow:", "Allow:"]
        failure_indicators: ["404 Not Found"]
    asset_discovery:
      search_patterns:
        - pattern: "Disallow:\\s*(/\\S+)"
          asset_type: "url"
          confidence: 0.6
          metadata:
            source: "robots_txt"
            access_restriction: "disallowed"

  - id: "nikto_scan"
    name: "Web Vulnerability Scanning"
    description: "Automated web vulnerability assessment"
    type: "command"
    order: 4
    command: "nikto -h http://{host_ip}:{port}"
    command_variants:
      - condition: "port == 443"
        command: "nikto -h https://{host_ip}:{port} -ssl"
        description: "HTTPS Nikto scan"
    timeout: "600s"
    expected_outputs:
      - type: "vulnerability_scan"
        parser: "nikto"
        success_indicators: ["+ Target IP", "+ Target Port"]
        failure_indicators: ["ERROR", "Cannot resolve hostname"]
    asset_discovery:
      search_patterns:
        - pattern: "\\+ OSVDB-([0-9]+): (.+)"
          asset_type: "vulnerability"
          confidence: 0.8
          metadata:
            scanner: "nikto"
            osvdb_id: "$1"

asset_discovery:
  expected_assets:
    - type: "url"
      confidence: 0.8
      conditions:
        - accessible: true
    - type: "vulnerability"
      confidence: 0.7
      conditions:
        - severity: ["low", "medium", "high"]

  linking_rules:
    - step_id: "directory_enumeration"
      asset_types: ["url"]
      link_method: "path_analysis"
      confidence_threshold: 0.7

suppression_options:
  available_scopes:
    - scope: "this_host"
      description: "Skip for this specific host"
      conditions: ["host_ip"]
    - scope: "this_service"
      description: "Skip for this service on all hosts"
      conditions: ["service", "port"]
  
  auto_suppress:
    on_completion: "this_service"
    on_failure: null
    on_no_assets: "this_host"
    custom_rules:
      - condition: "execution_time > 300s"
        suppression_scope: "this_host"
        reason: "Execution too slow for this host"

next_methodologies:
  - conditions:
      discovered_vulnerabilities.count: "> 0"
    methodology: "web_exploitation"
    trigger_data:
      vulnerabilities: "{discovered_vulnerabilities}"
      target_urls: ["{discovered_urls}"]
  - conditions:
      discovered_urls.count: "> 10"
    methodology: "content_discovery"
    trigger_data:
      base_urls: ["{discovered_urls}"]

documentation:
  overview: |
    This methodology performs comprehensive enumeration of web applications,
    including directory discovery, technology stack identification, and
    automated vulnerability scanning.
  
  prerequisites:
    - "Web service accessible on target host"
    - "Tools: gobuster, whatweb, curl, nikto"
    - "Common wordlists available"
  
  expected_findings:
    - "Hidden directories and files"
    - "Web technology stack information"
    - "Robots.txt disclosed paths"
    - "Common web vulnerabilities"

compatibility:
  min_engine_version: "2.0.0"
  required_tools: ["gobuster", "whatweb", "curl", "nikto"]
  required_parsers: ["gobuster_directory", "whatweb", "robots_txt", "nikto"]