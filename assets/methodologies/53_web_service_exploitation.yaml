id: web_service_exploitation
name: Web Service Enumeration and Exploitation
category: Web Application Testing
priority: high
description: Comprehensive web service enumeration including directory/file discovery, technology fingerprinting, and vulnerability assessment
detailed_description: |
  Perform comprehensive web service enumeration and exploitation including technology stack
  identification, directory/file discovery, vulnerability scanning, and common web application
  attacks. Adapts based on discovered technologies and authentication requirements.

# Asset property-based triggers
asset_triggers:
  - asset_type: service
    conditions:
      all:
        - property: service_name
          operator: in_list
          values: ["http", "https", "http-proxy", "http-alt"]
        - property: port
          operator: in_list
          values: [80, 443, 8080, 8443, 8000, 8008, 8888, 9000, 9090]
        - property: state
          operator: equals
          value: "open"
        - property: web_enumerated
          operator: not_equals
          value: true
    priority: 90
    deduplication_key: "{asset.id}:web_enum"
    batch_capable: true
    batch_criteria: host_id

  - asset_type: host
    conditions:
      all:
        - property: web_services
          operator: greater_than
          value: 0
        - property: web_technologies_identified
          operator: not_equals
          value: true
    priority: 85
    deduplication_key: "{asset.id}:web_tech_enum:{web_services.count}"

  - asset_type: service
    conditions:
      all:
        - property: service_name
          operator: in_list
          values: ["http", "https"]
        - property: requires_auth
          operator: equals
          value: true
        - property: valid_credentials
          operator: exists
        - property: authenticated_enum_completed
          operator: not_equals
          value: true
    priority: 95
    deduplication_key: "{asset.id}:web_auth_enum:{credentials.hash}"

# Variable extraction
variables:
  target_host:
    source: host_id
    transform: "getHostProperty(host_id, 'ip_address')"

  target_port:
    source: port
    default: 80

  target_url:
    source: port
    transform: |
      port == 443 || port == 8443 ?
        `https://${target_host}:${port}` :
        `http://${target_host}:${port}`

  ssl_enabled:
    source: ssl
    default: false

  web_services:
    source: parent_asset
    transform: "parent_asset.properties.web_services"
    default: []

  available_credentials:
    source: valid_credentials
    default: []

  output_dir:
    value: "/tmp/web_enum_{asset.id}_{timestamp}"

  wordlist_dir:
    value: "/usr/share/wordlists"

# Batch command for multiple web services
batch_command: |
  #!/bin/bash
  OUTPUT_DIR="{output_dir}"
  WORDLIST_DIR="{wordlist_dir}"

  mkdir -p "$OUTPUT_DIR"

  echo "[*] Starting web service enumeration at $(date)" | tee "$OUTPUT_DIR/web_enum.log"

  # Create target list
  cat > "$OUTPUT_DIR/targets.txt" << 'EOF'
  {web_services}
  EOF

  # Phase 1: Technology Identification and Basic Enumeration
  echo "[+] Phase 1: Technology Identification" | tee -a "$OUTPUT_DIR/web_enum.log"

  while read -r target; do
    host=$(echo "$target" | cut -d: -f1)
    port=$(echo "$target" | cut -d: -f2)

    if [ "$port" = "443" ] || [ "$port" = "8443" ]; then
      url="https://$host:$port"
    else
      url="http://$host:$port"
    fi

    echo "  [*] Enumerating: $url" | tee -a "$OUTPUT_DIR/web_enum.log"

    # Basic HTTP enumeration
    echo "    [+] HTTP headers and technology detection..." | tee -a "$OUTPUT_DIR/web_enum.log"
    curl -I -L -k -m 10 "$url" > "$OUTPUT_DIR/headers_${host}_${port}.txt" 2>&1

    # Whatweb technology identification
    whatweb -v -a 3 "$url" > "$OUTPUT_DIR/whatweb_${host}_${port}.txt" 2>&1

    # Wappalyzer-style detection
    curl -s -L -k -m 10 "$url" | grep -iE "(x-powered-by|server|generator|framework)" > "$OUTPUT_DIR/tech_headers_${host}_${port}.txt" 2>&1

    # Nikto scan
    echo "    [+] Nikto vulnerability scan..." | tee -a "$OUTPUT_DIR/web_enum.log"
    nikto -h "$url" -Format txt -output "$OUTPUT_DIR/nikto_${host}_${port}.txt" 2>&1

    # Directory/file enumeration
    echo "    [+] Directory enumeration..." | tee -a "$OUTPUT_DIR/web_enum.log"

    # Gobuster directory scan
    if [ -f "$WORDLIST_DIR/dirbuster/directory-list-2.3-medium.txt" ]; then
      gobuster dir -u "$url" -w "$WORDLIST_DIR/dirbuster/directory-list-2.3-medium.txt" \
        -x php,html,txt,js,css,xml,json,bak,old,zip,tar.gz \
        -o "$OUTPUT_DIR/gobuster_${host}_${port}.txt" \
        -k -t 50 2>&1
    fi

    # Dirb scan with common wordlist
    dirb "$url" "$WORDLIST_DIR/dirb/common.txt" \
      -o "$OUTPUT_DIR/dirb_${host}_${port}.txt" \
      -S -r 2>&1

    # Robots.txt and common files
    echo "    [+] Common file enumeration..." | tee -a "$OUTPUT_DIR/web_enum.log"
    for file in robots.txt sitemap.xml crossdomain.xml clientaccesspolicy.xml .htaccess web.config; do
      curl -s -k -m 5 "$url/$file" > "$OUTPUT_DIR/${file}_${host}_${port}.txt" 2>&1
    done

    # SSL/TLS enumeration for HTTPS
    if [[ "$url" == https* ]]; then
      echo "    [+] SSL/TLS enumeration..." | tee -a "$OUTPUT_DIR/web_enum.log"
      sslscan --xml="$OUTPUT_DIR/sslscan_${host}_${port}.xml" "$host:$port" 2>&1
      testssl.sh --jsonfile "$OUTPUT_DIR/testssl_${host}_${port}.json" "$host:$port" 2>&1
    fi

  done < "$OUTPUT_DIR/targets.txt"

  # Phase 2: Content Management System Detection
  echo "[+] Phase 2: CMS and Framework Detection" | tee -a "$OUTPUT_DIR/web_enum.log"

  while read -r target; do
    host=$(echo "$target" | cut -d: -f1)
    port=$(echo "$target" | cut -d: -f2)

    if [ "$port" = "443" ] || [ "$port" = "8443" ]; then
      url="https://$host:$port"
    else
      url="http://$host:$port"
    fi

    echo "  [*] CMS detection for: $url" | tee -a "$OUTPUT_DIR/web_enum.log"

    # WordPress detection
    wpscan --url "$url" --enumerate p,t,u --format json \
      --output "$OUTPUT_DIR/wpscan_${host}_${port}.json" 2>&1

    # Drupal detection
    droopescan scan drupal -u "$url" \
      --output "$OUTPUT_DIR/droopescan_${host}_${port}.txt" 2>&1

    # Joomla detection
    joomscan -u "$url" \
      --output-file "$OUTPUT_DIR/joomscan_${host}_${port}.txt" 2>&1

    # CMSeeK detection
    cmseek -u "$url" --batch \
      --output "$OUTPUT_DIR/cmseek_${host}_${port}" 2>&1

  done < "$OUTPUT_DIR/targets.txt"

  # Phase 3: Application-specific enumeration
  echo "[+] Phase 3: Application-specific Enumeration" | tee -a "$OUTPUT_DIR/web_enum.log"

  while read -r target; do
    host=$(echo "$target" | cut -d: -f1)
    port=$(echo "$target" | cut -d: -f2)

    if [ "$port" = "443" ] || [ "$port" = "8443" ]; then
      url="https://$host:$port"
    else
      url="http://$host:$port"
    fi

    # Check for common applications
    echo "  [*] Application detection for: $url" | tee -a "$OUTPUT_DIR/web_enum.log"

    # Jenkins
    if curl -s -k "$url/login" | grep -q "Jenkins"; then
      echo "    [!] Jenkins detected" | tee -a "$OUTPUT_DIR/web_enum.log"
      curl -s -k "$url/api/json" > "$OUTPUT_DIR/jenkins_api_${host}_${port}.json" 2>&1
    fi

    # Tomcat
    if curl -s -k "$url/manager/html" | grep -q "Tomcat"; then
      echo "    [!] Tomcat Manager detected" | tee -a "$OUTPUT_DIR/web_enum.log"
      # Try default creds
      curl -s -k -u "tomcat:tomcat" "$url/manager/html" > "$OUTPUT_DIR/tomcat_default_${host}_${port}.html" 2>&1
    fi

    # phpMyAdmin
    if curl -s -k "$url/phpmyadmin/" | grep -q "phpMyAdmin"; then
      echo "    [!] phpMyAdmin detected" | tee -a "$OUTPUT_DIR/web_enum.log"
      curl -s -k "$url/phpmyadmin/README" > "$OUTPUT_DIR/phpmyadmin_version_${host}_${port}.txt" 2>&1
    fi

    # Admin panels
    for admin_path in admin administrator wp-admin admin.php admin/ administrator/ cpanel/ plesk/ webmin/; do
      status=$(curl -s -k -o /dev/null -w "%{http_code}" "$url/$admin_path")
      if [ "$status" = "200" ] || [ "$status" = "302" ] || [ "$status" = "401" ]; then
        echo "    [+] Admin panel found: $url/$admin_path (HTTP $status)" | tee -a "$OUTPUT_DIR/web_enum.log"
      fi
    done

  done < "$OUTPUT_DIR/targets.txt"

  # Phase 4: Vulnerability Assessment
  echo "[+] Phase 4: Vulnerability Assessment" | tee -a "$OUTPUT_DIR/web_enum.log"

  while read -r target; do
    host=$(echo "$target" | cut -d: -f1)
    port=$(echo "$target" | cut -d: -f2)

    if [ "$port" = "443" ] || [ "$port" = "8443" ]; then
      url="https://$host:$port"
    else
      url="http://$host:$port"
    fi

    echo "  [*] Vulnerability assessment for: $url" | tee -a "$OUTPUT_DIR/web_enum.log"

    # OWASP ZAP baseline scan
    zap-baseline.py -t "$url" -J "$OUTPUT_DIR/zap_${host}_${port}.json" 2>&1

    # SQLmap on discovered forms/parameters
    if [ -f "$OUTPUT_DIR/gobuster_${host}_${port}.txt" ]; then
      grep -E "\.(php|asp|aspx|jsp)" "$OUTPUT_DIR/gobuster_${host}_${port}.txt" | head -5 | while read -r endpoint; do
        endpoint_url="$url$(echo "$endpoint" | awk '{print $1}')"
        echo "    [+] Testing $endpoint_url for SQL injection..." | tee -a "$OUTPUT_DIR/web_enum.log"
        sqlmap -u "$endpoint_url" --batch --level=1 --risk=1 \
          --output-dir="$OUTPUT_DIR/sqlmap_${host}_${port}" 2>&1
      done
    fi

    # XSS testing on forms
    echo "    [+] XSS testing..." | tee -a "$OUTPUT_DIR/web_enum.log"
    curl -s -k "$url" | grep -E "(input|textarea|form)" > "$OUTPUT_DIR/forms_${host}_${port}.html" 2>&1

    # Path traversal testing
    for payload in "../../../etc/passwd" "..\\..\\..\\windows\\win.ini" "../../../proc/version"; do
      status=$(curl -s -k -o /dev/null -w "%{http_code}" "$url/$payload")
      if [ "$status" = "200" ]; then
        echo "    [!] Potential path traversal: $url/$payload" | tee -a "$OUTPUT_DIR/web_enum.log"
        curl -s -k "$url/$payload" > "$OUTPUT_DIR/path_traversal_${host}_${port}.txt" 2>&1
      fi
    done

  done < "$OUTPUT_DIR/targets.txt"

  # Authenticated enumeration if credentials available
  if [ -n "{available_credentials}" ]; then
    echo "[+] Phase 5: Authenticated Enumeration" | tee -a "$OUTPUT_DIR/web_enum.log"

    IFS=',' read -ra CREDS <<< "{available_credentials}"
    for cred in "${CREDS[@]}"; do
      username=$(echo "$cred" | cut -d':' -f1)
      password=$(echo "$cred" | cut -d':' -f2)

      echo "  [*] Testing credentials: $username" | tee -a "$OUTPUT_DIR/web_enum.log"

      while read -r target; do
        host=$(echo "$target" | cut -d: -f1)
        port=$(echo "$target" | cut -d: -f2)

        if [ "$port" = "443" ] || [ "$port" = "8443" ]; then
          url="https://$host:$port"
        else
          url="http://$host:$port"
        fi

        # Try HTTP Basic Auth
        auth_status=$(curl -s -k -u "$username:$password" -o /dev/null -w "%{http_code}" "$url")
        if [ "$auth_status" = "200" ]; then
          echo "    [+] HTTP Basic Auth successful: $username@$url" | tee -a "$OUTPUT_DIR/web_enum.log"
          curl -s -k -u "$username:$password" "$url" > "$OUTPUT_DIR/auth_content_${host}_${port}_${username}.html" 2>&1
        fi

        # Try common login endpoints
        for login_endpoint in "login" "admin/login" "wp-login.php" "administrator/index.php"; do
          login_url="$url/$login_endpoint"
          login_status=$(curl -s -k -o /dev/null -w "%{http_code}" "$login_url")

          if [ "$login_status" = "200" ]; then
            echo "    [+] Testing login form: $login_url" | tee -a "$OUTPUT_DIR/web_enum.log"

            # Try to login
            curl -s -k -X POST -d "username=$username&password=$password" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              "$login_url" > "$OUTPUT_DIR/login_attempt_${host}_${port}_${username}.html" 2>&1
          fi
        done

      done < "$OUTPUT_DIR/targets.txt"
    done
  fi

  echo "[*] Web enumeration completed at $(date)" | tee -a "$OUTPUT_DIR/web_enum.log"

  # Generate summary
  echo "[+] Generating web enumeration summary..." | tee -a "$OUTPUT_DIR/web_enum.log"
  cat > "$OUTPUT_DIR/SUMMARY.txt" << 'SUMMARY_EOF'
=== WEB SERVICE ENUMERATION SUMMARY ===

DISCOVERED TECHNOLOGIES:
$(find "$OUTPUT_DIR" -name "whatweb_*.txt" -exec grep -H "Status:" {} \; | grep "200 OK" | wc -l) web services responding

CMS DETECTED:
$(grep -l "WordPress" "$OUTPUT_DIR"/whatweb_*.txt | wc -l || echo "0") WordPress sites
$(grep -l "Drupal" "$OUTPUT_DIR"/whatweb_*.txt | wc -l || echo "0") Drupal sites
$(grep -l "Joomla" "$OUTPUT_DIR"/whatweb_*.txt | wc -l || echo "0") Joomla sites

ADMIN PANELS FOUND:
$(grep -c "Admin panel found" "$OUTPUT_DIR/web_enum.log" || echo "0") admin interfaces discovered

VULNERABILITIES:
$(grep -c "VULNERABLE" "$OUTPUT_DIR"/nikto_*.txt || echo "0") Nikto vulnerabilities
$(find "$OUTPUT_DIR" -name "*sqlmap*" -type d | wc -l || echo "0") SQL injection endpoints tested

INTERESTING FILES:
$(find "$OUTPUT_DIR" -name "robots.txt_*" -exec grep -l "Disallow:" {} \; | wc -l || echo "0") robots.txt files with entries
$(find "$OUTPUT_DIR" -name "gobuster_*" -exec grep -c "Status: 200" {} \; | paste -sd+ | bc || echo "0") total directories/files found

RECOMMENDATION:
$(if [ $(grep -c "VULNERABLE" "$OUTPUT_DIR"/nikto_*.txt || echo "0") -gt 0 ]; then echo "CRITICAL: Vulnerabilities found - immediate assessment required"; else echo "Review discovered directories and technologies for potential security issues"; fi)
SUMMARY_EOF

  echo "[*] Results saved to: $OUTPUT_DIR" | tee -a "$OUTPUT_DIR/web_enum.log"

# Individual command for single web service
individual_command: |
  #!/bin/bash
  HOST="{target_host}"
  PORT="{target_port}"
  URL="{target_url}"
  OUTPUT_DIR="{output_dir}"

  mkdir -p "$OUTPUT_DIR"

  echo "[*] Web enumeration of $URL at $(date)" | tee "$OUTPUT_DIR/web_single.log"

  # Basic enumeration
  echo "[+] Basic web enumeration..."
  curl -I -L -k -m 10 "$URL" > "$OUTPUT_DIR/headers.txt" 2>&1
  whatweb -v -a 3 "$URL" > "$OUTPUT_DIR/whatweb.txt" 2>&1

  # Directory enumeration
  echo "[+] Directory enumeration..."
  gobuster dir -u "$URL" -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
    -x php,html,txt -o "$OUTPUT_DIR/gobuster.txt" -k -t 20 2>&1

  # Vulnerability scan
  echo "[+] Vulnerability assessment..."
  nikto -h "$URL" -Format txt -output "$OUTPUT_DIR/nikto.txt" 2>&1

  # Authenticated enumeration if credentials available
  if [ -n "{available_credentials}" ]; then
    echo "[+] Authenticated enumeration..."
    cred="{available_credentials}"
    username=$(echo "$cred" | cut -d':' -f1)
    password=$(echo "$cred" | cut -d':' -f2)

    curl -s -k -u "$username:$password" "$URL" > "$OUTPUT_DIR/auth_content.html" 2>&1
  fi

# Expected property updates
property_updates:
  on_success:
    - property: web_enumerated
      operation: set
      value: true

    - property: web_technologies
      operation: set
      value: "{discovered_technologies}"

    - property: web_directories
      operation: set
      value: "{discovered_directories}"

    - property: web_vulnerabilities
      operation: set
      value: "{discovered_vulnerabilities}"

    - property: cms_detected
      operation: set
      value: "{detected_cms}"

    - property: admin_panels_found
      operation: set
      value: "{admin_panels}"

    - property: ssl_configuration
      operation: set
      value: "{ssl_config}"
      condition: ssl_enabled

    - property: authentication_methods
      operation: set
      value: "{auth_methods}"

# Expected discoveries
expected_discoveries:
  - asset_type: vulnerability
    conditions:
      - severity: ["critical", "high", "medium"]
    properties:
      cve: "{cve_id}"
      name: "{vulnerability_name}"
      severity: "{severity}"
      affected_service: "web"
      url: "{vulnerable_url}"
      description: "{vulnerability_description}"

  - asset_type: credential
    conditions:
      - discovered_via: "web_auth"
    properties:
      username: "{username}"
      password: "{password}"
      service: "web"
      url: "{login_url}"
      source: "web_enumeration"

  - asset_type: file
    conditions:
      - category: ["sensitive", "config", "backup"]
    properties:
      path: "{file_path}"
      url: "{file_url}"
      type: "{file_type}"
      sensitive: "{contains_sensitive_data}"

# Chain triggers
chain_triggers:
  on_success:
    - condition:
        property: cms_detected
        operator: contains
        value: "WordPress"
      trigger: wordpress_enumeration

    - condition:
        property: web_vulnerabilities
        operator: contains
        match:
          type: "sql_injection"
      trigger: sql_injection_exploitation

    - condition:
        property: admin_panels_found
        operator: greater_than
        value: 0
      trigger: admin_interface_testing

    - condition:
        property: ssl_configuration
        operator: contains
        match:
          weak_ciphers: true
      trigger: ssl_vulnerability_assessment

    - condition:
        property: authentication_methods
        operator: contains
        value: "basic_auth"
      trigger: http_auth_bruteforce

# Outcome analysis
outcome_analysis:
  success_indicators:
    - Web service responding
    - Directories/files discovered
    - Technology stack identified
    - Vulnerabilities found

  failure_indicators:
    - Service not responding
    - No content discovered
    - All requests filtered
    - SSL/TLS errors

# Cleanup
cleanup:
  - priority: low
    action: Remove temporary files
    command: rm -rf {output_dir}

  - priority: low
    action: Clear browser cache
    command: |
      # Clear any cached web content
      rm -rf ~/.cache/gobuster/
      rm -rf ~/.sqlmap/