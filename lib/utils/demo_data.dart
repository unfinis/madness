import 'package:flutter/material.dart';
import '../models/screenshot.dart';
import '../models/editor_layer.dart';

class DemoData {
  static Screenshot createDemoScreenshot(String projectId) {
    return Screenshot(
      id: 'demo-screenshot-001',
      projectId: projectId,
      name: 'Login Page Vulnerability',
      description: 'SQL injection vulnerability found in login form',
      caption: 'SQL injection error message displayed',
      instructions: 'Enter \' or 1=1-- in the login field to trigger the error',
      originalPath: 'assets/screenshots/demo1.png',
      editedPath: null,
      thumbnailPath: null,
      width: 1920,
      height: 1080,
      fileSize: 234567,
      fileFormat: 'PNG',
      captureDate: DateTime.now().subtract(const Duration(hours: 2)),
      createdDate: DateTime.now().subtract(const Duration(hours: 2)),
      modifiedDate: DateTime.now().subtract(const Duration(minutes: 30)),
      category: 'web',
      tags: {'web', 'sql-injection', 'critical'},
      hasRedactions: false,
      isProcessed: true,
      metadata: {
        'browser': 'Chrome',
        'resolution': '1920x1080',
        'url': 'https://example.com/login',
      },
      layers: [
        VectorLayer(
          id: 'demo-highlight-001',
          name: 'SQL Injection Point',
          visible: true,
          locked: false,
          opacity: 0.7,
          blendModeType: BlendModeType.multiply,
          bounds: const Rect.fromLTWH(450, 320, 200, 60),
          createdDate: DateTime.now().subtract(const Duration(minutes: 25)),
          modifiedDate: DateTime.now().subtract(const Duration(minutes: 25)),
          elements: [
            RectangleElement(
              points: [
                const Offset(450, 320),
                const Offset(650, 380),
              ],
            ),
          ],
          strokeWidth: 3.0,
          strokeColor: const Color(0xFFDC2626),
          fillColor: const Color(0x33DC2626),
        ),
        TextLayer(
          id: 'demo-text-001',
          name: 'Critical Finding',
          visible: true,
          locked: false,
          opacity: 1.0,
          blendModeType: BlendModeType.normal,
          bounds: const Rect.fromLTWH(460, 290, 300, 30),
          createdDate: DateTime.now().subtract(const Duration(minutes: 20)),
          modifiedDate: DateTime.now().subtract(const Duration(minutes: 20)),
          text: 'SQL Injection vulnerability detected',
          textStyle: const TextStyle(
            fontSize: 16.0,
            fontFamily: 'Arial',
            fontWeight: FontWeight.bold,
            color: Color(0xFFDC2626),
            backgroundColor: Color(0xFFFEE2E2),
          ),
          textAlign: TextAlign.left,
        ),
      ],
    );
  }

  static List<Screenshot> createDemoScreenshots(String projectId) {
    return [
      createDemoScreenshot(projectId),
      Screenshot(
        id: 'demo-screenshot-002',
        projectId: projectId,
        name: 'Network Traffic Analysis',
        description: 'Captured network requests showing sensitive data exposure',
        caption: 'Wireshark capture showing HTTP traffic',
        instructions: 'Filter with "http and ip.src == 192.168.1.100"',
        originalPath: 'assets/screenshots/demo2.png',
        editedPath: '/path/to/network/screenshot-edited.png',
        thumbnailPath: null,
        width: 1600,
        height: 900,
        fileSize: 187432,
        fileFormat: 'PNG',
        captureDate: DateTime.now().subtract(const Duration(hours: 1)),
        createdDate: DateTime.now().subtract(const Duration(hours: 1)),
        modifiedDate: DateTime.now().subtract(const Duration(minutes: 10)),
        category: 'network',
        tags: {'network', 'data-exposure', 'medium'},
        hasRedactions: true,
        isProcessed: true,
        metadata: {
          'tool': 'Wireshark',
          'protocol': 'HTTP',
          'packets': 1234,
        },
        layers: [
          RedactionLayer(
            id: 'demo-redact-001',
            name: 'Sensitive Data Redaction',
            visible: true,
            locked: false,
            opacity: 1.0,
            blendModeType: BlendModeType.normal,
            bounds: const Rect.fromLTWH(200, 400, 300, 50),
            createdDate: DateTime.now().subtract(const Duration(minutes: 15)),
            modifiedDate: DateTime.now().subtract(const Duration(minutes: 10)),
            redactionType: RedactionType.blackout,
            redactionColor: Colors.black,
            blurRadius: 0.0,
            pixelSize: 0,
          ),
        ],
      ),
      Screenshot(
        id: 'demo-screenshot-003',
        projectId: projectId,
        name: 'Raw API Response',
        description: 'Unprocessed screenshot of API response',
        caption: 'JSON response from users endpoint',
        instructions: 'curl -X GET https://api.example.com/users',
        originalPath: '/path/to/api/screenshot.png',
        editedPath: null,
        thumbnailPath: null,
        width: 1366,
        height: 768,
        fileSize: 145678,
        fileFormat: 'PNG',
        captureDate: DateTime.now().subtract(const Duration(minutes: 30)),
        createdDate: DateTime.now().subtract(const Duration(minutes: 30)),
        modifiedDate: DateTime.now().subtract(const Duration(minutes: 30)),
        category: 'system',
        tags: {'api', 'raw'},
        hasRedactions: false,
        isProcessed: false,
        metadata: {
          'endpoint': '/api/users',
          'method': 'GET',
          'status': 200,
        },
        layers: [],
      ),
    ];
  }
}