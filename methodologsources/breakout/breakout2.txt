Skip to content
Chat history
You said:
Doing a pentest.. doing vdi and rdp breakout tests..  can you give a list of things which I Should try and test/report on?
ChatGPT said:

Absolutely ‚Äî when performing a VDI (Virtual Desktop Infrastructure) and Remote Desktop Protocol (RDP) breakout penetration test, your goal is to evaluate how well-isolated the virtual desktop session is, and whether you can escape the sandboxed environment or pivot into the internal network.

Here‚Äôs a comprehensive checklist of breakout vectors and areas to test/report on:
üñ•Ô∏è Environment Isolation Checks

    Clipboard redirection

        Test copy/paste of text, files, or images between host and guest.

    Drive/device redirection

        See if local drives, USB, printers, or smart cards are redirected into the VDI.

    Shared folders / mapped network drives

        Check for host-side mapped shares or drives visible from the guest.

    Drag-and-drop support

        Attempt drag & drop files between local and remote.

    Printing redirection

        Look for local printer passthrough revealing local file paths.

‚öôÔ∏è Breakout / Escape Techniques

    Shell access from restricted environments

        Launch cmd.exe, PowerShell, or Windows Explorer from allowed apps (e.g. Open File‚Ä¶ dialog ‚Üí right-click ‚Üí ‚ÄúOpen in Explorer‚Äù).

    File open/save dialog abuse

        Use common dialogs to:

            Browse local drives or network shares

            Launch binaries

            Upload/download data

    URL/protocol handler abuse

        Try file://, \\127.0.0.1\c$, or \\tsclient\ URIs

    Escape via allowed applications

        If web browser is available:

            Try local file://C:/ access

            Test download/execution of arbitrary files

        If Microsoft Office apps are available:

            Use macros or OLE objects to run commands

    Published app misconfigurations

        Try accessing other installed software not supposed to be exposed

üîí Security Boundary Enforcement

    Privilege escalation inside the VDI

        Check for local admin or excessive permissions

    Lateral movement potential

        Test if the VDI can access other internal network hosts (ping, SMB, RDP, WMI, etc.)

    Domain trust issues

        Look for cached credentials, saved passwords, accessible service accounts

    Network segregation

        Verify the VDI network is isolated from production/management networks

üíæ Data Leakage Vectors

    Access to local host data

        Clipboard, shared drives, cached credentials

    Access to cloud or network storage

        Mapped drives, OneDrive, SharePoint access if unintended

    Credential harvesting

        Use tools like Mimikatz (with permission) to see if creds are stored/accessible

    GPO or login script leaks

        Review SYSVOL and domain scripts for secrets

üìù Logging & Monitoring

    Audit logging

        Are breakout attempts logged and alerted on?

    Session recording

        Is user activity recorded (e.g. keystrokes, video capture)?

    Endpoint detection & response (Microsoft Defender for Endpoint, etc.)

        Do security tools detect and block suspicious activity?

‚ö° Optional Advanced Tests

    Breakout from sandboxed browser apps (HTML5 VDI)

    Hypervisor escape (only with explicit approval!)

        Requires advanced exploit techniques and is usually out-of-scope unless specifically allowed.

üìã Reporting Recommendations

In your report, include for each test:

    What was tested

    Method used

    Result (success/failure)

    Impact if successful

    Mitigation recommendations (e.g. disable drive redirection, harden GPOs, restrict apps)

If you want, I can also give you a ready-made VDI/RDP Breakout Testing Checklist spreadsheet (with test name, description, result, notes columns) to use during the engagement.

Would you like me to generate that spreadsheet for you?
You said:
Can you come up with additional checks.please go really deep...
ChatGPT said:

Sure, to go really deep on VDI and RDP breakout testing, could you please clarify:

    What kind of environment are you testing? (e.g., Citrix, VMware Horizon, Microsoft RDS, Azure Virtual Desktop)

    Are you limited to user-level access or do you have approval to attempt privilege escalation and lateral movement?

    Are you also testing web-based/HTML5 clients or native RDP/ICA clients?

    Are there specific tools or scripting languages allowed (e.g., PowerShell, WMI, batch scripts)?

    Any in-scope areas beyond the breakout test itself, like credential harvesting, persistence, or post-exploitation?

This will help me generate a deeper and more targeted list of advanced checks and exploitation paths.
You said:
All those environments. Basic ad domain is in scope but I am generally good there. Though if you think breakout specific than I would be interested. All clients..  
ChatGPT said:

Got it. I‚Äôll compile a deep, comprehensive list of VDI and RDP breakout tests across Citrix, VMware Horizon, Microsoft RDS, and Azure Virtual Desktop ‚Äî covering native and web clients. I‚Äôll focus on lesser-known techniques, misconfiguration checks, AD breakout vectors, and creative methods beyond the basics. I‚Äôll let you know once it‚Äôs ready.

Advanced VDI and RDP Breakout Test Checklist
VDI/RDP Penetration Testing Breakout Checklist

Below is a comprehensive checklist of advanced breakout tests and checks for Virtual Desktop Infrastructure (VDI) and Remote Desktop Protocol (RDP) environments. The list is organized by category, covering Citrix, VMware Horizon, Microsoft Remote Desktop Services (RDS), and Azure Virtual Desktop ‚Äì for both native clients and HTML5/web-based clients. Each item represents a potential attack technique or configuration weakness to test. Experienced penetration testers can use this to ensure even deep or lesser-known vectors are examined.
Input/Output Channel Abuse

    Clipboard Redirection: Verify if clipboard sharing is enabled. Attempt to copy-paste text and images between the VDI session and the client. If allowed, test exfiltration by copying large data or binary payloads (e.g. base64-encoded files) via the clipboard
    pentestpartners.com
    . Reconstruct the data on the remote side to simulate file transfer via clipboard
    pentestpartners.com
    .

    Drive Mappings: Check if client drives are mapped into the VDI (e.g. ‚ÄúC on ClientPC‚Äù via RDP). If so, try accessing these drives from the VDI to read or write files on the client machine. This can reveal sensitive data or allow planting of malicious files on the client. If drive mapping is disabled by policy, attempt to bypass by using UNC paths (e.g. \\tsclient\C in RDP or network paths)
    infosecwriteups.com
    .

    USB Device Redirection: Determine if USB pass-through is permitted. Test connecting USB storage devices or HID (Human Interface Device) devices through the client. For storage devices, see if the VDI can read/write to them. For HID devices, try keystroke injection attacks (e.g. using a Rubber Ducky script) to simulate input
    pentestpartners.com
    . Also consider virtual devices: for example, emulate a serial port or printer device to pass through data
    pentestpartners.com
    .

    Audio Input/Output Channels: If microphone redirection is enabled, assess if audio can be recorded or exfiltrated from the client side. Conversely, test if you can play ultrasonic or encoded audio from the VDI to transmit data out (a covert channel). This is a niche vector, but it‚Äôs worth noting for completeness. Similarly, if webcam/video redirection is available, check if images or video can be captured from the client side through the virtual session.

    Smart Cards and Other Devices: If smart card redirection is in use (common for authentication), ensure that the session cannot misuse the connected smart card (e.g. to sign or decrypt data without user consent). Also, test any other redirected I/O channels such as clipboard formats (e.g. dragging files via clipboard, OLE copy-paste) or special devices (like Twain scanners or location/GPS data) if those are available in the VDI setup.

Protocol Handler & File Association Exploits

    Malicious URI Schemes: Within the VDI session, attempt to invoke various URI protocol handlers to escape the restricted environment. For example, clicking or launching a mailto: link might open the local email client (Outlook) if installed, potentially outside of restrictions. Try schemes like ftp://, telnet://, callto:, ms-settings:, etc., to see if an external application is called. Uncommon or unassociated protocols are especially useful ‚Äì e.g., using a fake protocol like irc:// in a browser‚Äôs address bar can prompt an ‚ÄúOpen with‚Äù dialog, letting you choose an application to handle it
    swisskyrepo.github.io
    . This can be leveraged to launch programs that would otherwise be disallowed (for instance, opening Firefox via a custom URI as shown in the irc example)
    swisskyrepo.github.io
    .

    shell: URIs: Test Windows shell protocol handlers. For example, shell:windows or shell:System in an Explorer or browser address bar may open Windows Explorer showing system directories
    swisskyrepo.github.io
    . Other useful shell URIs include shell:Common Programs, shell:Personal (Documents), shell:SendTo, etc., which might break out to the full shell or allow access to forbidden locations
    swisskyrepo.github.io
    .

    File Extension Associations: Attempt to place or download files with various extensions to see how the environment handles them. For instance, if you can get a .html or .url file into the session (via download or file transfer), double-clicking it might launch a web browser on the VDI. A .rdp or .ica file might trigger the native client. Similarly, a .docx file would open Word ‚Äì where you could then use macros (see Application Escape). Test ‚Äúsafe‚Äù file types as trojans for execution: e.g., rename an executable to .txt and see if you can still execute it by renaming it back via command prompt or an open dialog. Also, see if scripts (.vbs, .js, .hta) can run ‚Äì sometimes .hta (HTML Application) files are particularly powerful if not blocked, as they execute with mshta.exe outside the browser sandbox.

    Abuse Default Handlers via Browser: If a browser is available in the VDI, use it to download files of various types and choose ‚ÄúOpen‚Äù instead of Save. Many browsers will hand off the file to whatever the OS association is. For example, downloading a .txt might automatically open Notepad (allowed), downloading a .pdf opens a PDF reader, or an MSI installer might invoke the Windows Installer. This can bypass whitelisting ‚Äì e.g., Internet Explorer was known for allowing ‚ÄúRun‚Äù on downloads which could execute installer packages or scripts directly
    netspi.com
    . Verify if such behavior is possible and if the OS properly prompts or blocks it.

    RDP/ICA Customizations: If you have access to the launch files (RDP or ICA configuration files), try modifying them for advantage. In Citrix .ica files, for instance, there‚Äôs an InitialProgram setting ‚Äì changing this to cmd.exe or explorer.exe might give a shell instead of the published app (if server-side hardening is weak)
    pentestpartners.com
    . Similarly, test if RDP file settings (like drive redirections, window paths, pre-run commands) can be tweaked and re-used to your benefit when reconnecting to the host. These client-side config tweaks shouldn‚Äôt override server policy in a well-configured environment, but misconfigurations do happen.

Application Escape (Allowed Apps & Sandboxed Environments)

    Open/Save Dialog Breakout: The classic breakout method ‚Äì use any allowed application‚Äôs File Open/Save dialog to access the underlying system. In Notepad‚Äôs ‚ÄúFile > Open‚Äù or ‚ÄúSave As‚Äù dialog, try browsing to C:\Windows\System32 and launching cmd.exe (you can type C:\Windows\System32\cmd.exe into the filename field and hit Enter)
    infosecwriteups.com
    . Many dialogs also have a mini-Explorer interface; for example, right-clicking a file in the dialog and selecting ‚ÄúOpen‚Äù or ‚ÄúOpen in new window‚Äù can spawn a full Windows Explorer
    infosecwriteups.com
    . Test these in all available apps (e.g. Word, Excel, browsers, PDF readers).

    Right-Click Context Tricks: In file dialogs or limited explorer views, use context menus. For instance, create a new file via right-click (text file) and then rename it to .bat or .cmd, then Edit and Open it
    infosecwriteups.com
    . Or create a shortcut (right-click > New > Shortcut) pointing to %WINDIR%\system32 ‚Äì then right-click that shortcut and view Properties > Open File Location, which can drop you into System32 or other locations
    infosecwriteups.com
    . These techniques often yield a normal Explorer window or command prompt.

    Whitelisted Application Abuse: Identify which applications are permitted in the environment (the ‚Äúwhitelist‚Äù). Common ones might be Office apps, browsers, Adobe Reader, or line-of-business apps. Leverage their functionality to escape:

        Office Macros: If Word/Excel are available, enable the Developer mode or VBA editor. Create a macro that launches a shell (e.g., using Shell("cmd.exe") in VBA) or downloads and executes a payload. Even if direct cmd.exe is blocked, you might use powershell within VBA (via CreateObject("Wscript.Shell")). In a real-world case, testers used Excel with a macro to inject shellcode into the Excel process (since Excel is whitelisted)
        tarlogic.com
        . This provided a reverse shell despite restrictions.

        Office DDE/OLE: Apart from VBA, test Dynamic Data Exchange in Office or linking an object (like embedding a link to a CMD shortcut in a Word doc).

        Allowed Utilities: Sometimes admin tools are overlooked by restrictions. Try running built-in Windows utilities that might be present: Task Manager (Ctrl+Shift+Esc), Microsoft Management Console (mmc.exe), Registry Editor (regedit), Task Scheduler (taskschd.msc), etc. Many of these can be started via the dialogs or via Ctrl+R (Run) if that works. For example, taskmgr.exe might be callable and then from Task Manager you can File > Run new task for any program
        swisskyrepo.github.io
        . Poke around for any pre-installed tools; PTP provides a list of useful binaries like control.exe, eventvwr.exe, msinfo32.exe, etc., which might be accessible
        pentestpartners.com
        pentestpartners.com
        .

        Default Browser/Email Client: If a mail client (Outlook) is available, see if you can attach or save files freely, or use Outlook Forms/macros for code execution. If a browser is present, see Browser Escapes below.

    Printing Dialog Abuse: Even if direct disk access is blocked, the Print dialog can sometimes act as an alternate file browser. Choosing ‚ÄúPrint to file‚Äù (XPS or PDF printer) will open a dialog to choose output location
    pentestpartners.com
    . This dialog might allow browsing the file system as well, similar to Save As. It‚Äôs another path to reach a filesystem view or to create files in arbitrary locations (which you can later try to execute).

    Help and Accessibility Features: Use help menus or accessibility tools to break out. Pressing F1 in some applications opens the Windows Help, which often has a ‚ÄúJump to URL‚Äù or similar functionality ‚Äì potentially allowing launching of Internet Explorer or opening a web page (which then can access local resources)
    infosecwriteups.com
    . Likewise, accessibility shortcuts: e.g., hitting Shift 5 times for Sticky Keys ‚Äì if not disabled ‚Äì pops up a help dialog; often there‚Äôs a link in that dialog that opens a file explorer or web page
    netspi.com
    . Test On-Screen Keyboard (osk.exe) or Magnifier; sometimes these tools are allowed and have file open dialogs or other loopholes. (If the environment is very locked down, accessibility features might be disabled, but worth checking).

    Third-Party Apps: If the VDI provides any third-party or custom apps, analyze their functionality for potential escape hatches. For example, an internally developed tool might have an option to export or import data ‚Äì which could allow writing to the filesystem or launching an external editor. Even something like a PDF reader‚Äôs ‚ÄúOpen‚Äù or a media player‚Äôs ‚ÄúOpen File‚Äù can be misused to get a browse dialog.

Browser-Based Escapes (within the VDI Session)

If a web browser is accessible inside the virtual desktop environment (or if the published application is a browser), treat it as a gateway to the underlying system:

    Local File Access via Browser: In the browser‚Äôs address bar, try entering local filesystem paths. For example, C:\ or file://C:/Windows and similar
    swisskyrepo.github.io
    . Internet Explorer and some other browsers will display folder contents or at least attempt to open Explorer for those paths
    netspi.com
    . This can directly give a view of the filesystem. Also test special locations: e.g., navigate to file://%USERPROFILE% or file://127.0.0.1/C$ (UNC loopback)
    swisskyrepo.github.io
    . These can bypass certain path restrictions by using alternate notations.

    Browser Functions & Menus: Leverage integrated menu options. For IE, the menu bar (File, Edit, View, etc.) might have entries like ‚ÄúSave As‚Äù (which gives a dialog), ‚ÄúImport/Export‚Äù (which might allow file system access), or View Source (which opens Notepad ‚Äì an allowed app). Right-click context menus in IE often have ‚ÄúView source‚Äù or ‚ÄúInspect element‚Äù ‚Äì these might invoke an editor or developer tools. Check if developer tools (F12) are accessible; if so, you might be able to execute JavaScript to call ActiveX objects or WScript from the console to get system access (older IE versions are notorious for this level of OS integration).

    Downloading and Running Content: Use the browser to pull in potentially exploitable content. For instance, host a known exploit (like an HTA or a Java applet if the browser supports it) on an external site and browse there. In a locked environment, direct internet might not be available, but if it is, this is essentially using client-side exploits to compromise the VDI. Even without an exploit, downloading various file types as noted earlier (like .msc, .lnk, .reg) and opening them can execute actions via the browser. iKAT (Interactive Kiosk Attack Tool) is a classic web app specifically made for this purpose ‚Äì it provides a menu of breakout techniques through a browser interface
    netspi.com
    netspi.com
    . If you can browse to the iKAT page (or a similar toolkit), it automates launching common dialogs, writing files, etc., via the browser.

    Browser Plugins/Extensions: Identify if plugins are present (Flash, PDF, Java, etc.). These have their own sandbox escape histories ‚Äì for example, an old PDF reader plugin exploit could yield code execution on the VDI. Even without known exploits, PDF readers often allow opening or saving PDFs to the file system; a crafted PDF might use the /Launch action to run a command. Test the behavior of opening various embedded links in PDF or Office documents if the browser hands those off.

    Kiosk Mode Bypass: If the browser is in a ‚Äúkiosk‚Äù or hardened mode (common in published browser scenarios), attempt common bypasses. E.g., pressing Alt+Tab or Ctrl+N to spawn new windows, trying Ctrl+O (Open dialog), F11 (toggle full screen, sometimes reveals a toolbar), or known browser-specific shortcuts. In Edge/Chrome kiosk, sometimes printing (Ctrl+P) can open a system Print dialog that leads to file system access. Also try Alt+F4 to see if you can close the browser and what happens afterwards ‚Äì occasionally, closing a published browser might drop you to a desktop or allowed applications list inadvertently.

    Dev Tools in HTML5 Clients: If the user‚Äôs client to the VDI is a browser (HTML5 client), consider that you can use your own browser‚Äôs dev tools to manipulate the session. While this is outside the VDI itself, it‚Äôs an important vector: for instance, intercept or modify WebSocket messages between the HTML5 client and server to bypass restrictions (perhaps enabling file transfer or clipboard that was disabled in the UI). You might find hidden API endpoints or admin functions in the web client‚Äôs JavaScript. Although not an attack from inside the VDI, it‚Äôs a client-side test that can reveal weakness in how the web client is implemented (e.g., an XSS in the web client could allow an attacker to hijack someone else‚Äôs VDI session if they share a URL, etc.). Ensure any HTML5 portal is tested for typical web vulns (XSS, CSRF, open redirect) that could impact the VDI usage.

URL Invocation Exploits

These overlaps with protocol handlers, but focus on how URLs and UNC paths can be invoked from within the session to perform unintended actions:

    UNC Path Injection: In any application that accepts input, try feeding UNC network paths (\\attacker-PC\share or \\127.0.0.1\C$). Many file selection fields or even some application text fields will attempt to resolve UNC paths
    infosecwriteups.com
    . This can do two things: trigger an authentication attempt (capturable via SMB Relay/NTLM capture if going to an attacker server), or possibly open a file browser to that location. For example, in the Notepad dialog or Windows Run, typing \\127.0.0.1\C$ might show the C drive if you have rights
    swisskyrepo.github.io
    . Typing a UNC to an external server you control will prompt the VDI to send credentials ‚Äì a potential hash leak to crack or relay.

    file:// URLs: Similar to entering in a browser, many apps will handle file:// URIs. If you can open an app‚Äôs hyperlink feature (like inserting a hyperlink in Word, or some apps have ‚Äúopen link‚Äù capabilities), try file://C:\Windows\System32\cmd.exe. Internet Explorer will also navigate to file URLs and show folder content or launch associated apps. This is a quick way to trigger the system‚Äôs default file handler outside of the locked interface
    swisskyrepo.github.io
    .

    smb:// or WebDAV: On some systems (particularly if using a Linux-based thin client or certain browsers), using smb:// might initiate an SMB connection. Generally on Windows, file:// with UNC covers this. Also test dav:// or http:// in contexts where the app might try to fetch a file (some programs allow opening files from URLs, which could be used to pull in a file from the internet or a WebDAV share, bypassing download restrictions).

    Custom URL Protocols: If specific software is installed, there might be custom URL handlers. For example, if VMware Horizon client or Citrix Receiver is installed inside the VDI (not typical, but possible), one could abuse vmware-view:// or citrixworkspace:// links. More practically, if Microsoft Teams or OneDrive is in the VDI, their URL handlers (msteams://, onedrive://) could do something interesting. Test anything that the user environment might have registered.

    Shell URL Handlers: Windows has a lot of weird built-in URI schemes beyond shell:. For instance, try ms-settings:, calculator:, ms-officeapp:, etc., if applicable. Even the Telnet handler (if telnet client is installed, telnet://1.2.3.4 would launch telnet.exe) can be used to start an application (though telnet.exe by itself is limited to connecting to a host, it‚Äôs still an exe running which might be leveraged for file transfer or as a pivot).

    Chained Protocols: A very advanced trick is using spaces in a URL to pass parameters to the handler
    swisskyrepo.github.io
    . For example, a URL like something://127.0.0.1/a" "b" might, when an application is chosen to handle something: scheme, interpret a and b as separate arguments. This is highly application-specific, but if you get an ‚ÄúOpen with‚Äù prompt, you might try to craft the string to include command-line args for the chosen program.

Lateral Movement Potential (Internal Pivoting from VDI)

    Network Scanning & Pivot: Once inside a VDI session, treat it as an internal foothold. Use whatever tools are available or can be transferred to map out the internal network. Even basic commands like ping (for common hosts), net view/net use for discovering shares, or PowerShell one-liners to scan port ranges can be attempted. Many VDI subnets have access to production networks. The VDI can be an entry point into the broader network
    netspi.com
    , so test what an attacker could reach: internal web apps, databases, file servers, etc., that the VDI user‚Äôs network access allows.

    Credential Gathering: Dump credentials and session info if possible. If you manage to launch PowerShell or other tools, attempt to extract credentials with tools like Mimikatz (bearing in mind many modern VDIs have AV/EDR). Check for stored credentials: Windows Credential Manager (rundll32.exe keymgr.dll,KRShowKeyMgr opens it
    pentestpartners.com
    ), browser-saved passwords, or plaintext creds in config files. Domain credentials obtained here can be used to move laterally to other systems.

    Reuse of VDI Credentials: Test if the user‚Äôs AD account has privileges elsewhere. For example, if the VDI user is a standard user, they usually shouldn‚Äôt have admin rights on servers. But in some cases, VDI users might be local admins on their own virtual desktop ‚Äì and if those desktops are reused or templated, maybe the same local admin cred is on many of them. Also, see if the account can access any network shares (run net use \\server\share with common server names or those discovered). Sometimes, mapping a drive may succeed even if the VDI environment intended to block data transfer (this would be a policy misconfig).

    Remote Desktop/Management Tools: See if you can initiate outbound RDP or other remote management from inside the VDI. The presence of mstsc.exe (the RDP client) on the VDI allows connecting to other machines if network allows
    pentestpartners.com
    . Test connecting to known internal IPs or hostnames (maybe obtained from ipconfig /all for DNS suffixes). If successful, this could allow you to jump to another desktop or server (credentials needed, unless you find an open RDP with NLA off ‚Äì unlikely internally, but check). Similarly, if SSH clients or other tools exist on the VDI, attempt to use them.

    Multi-User Environments: If the VDI is actually an RDS (Remote Desktop Session Host) with multiple user sessions on one server, check for ways to interact with other sessions. For instance, qwinsta and msg commands can show other logged-in users and even send them messages
    pentestpartners.com
    . In outdated systems, there were bugs where a non-admin could sometimes shadow another user‚Äôs session or hijack it ‚Äì ensure that‚Äôs patched. If you gain admin on an RDS, you can definitely spy on or control others (which might be out of scope depending on rules, but it‚Äôs a risk to note).

    Inter-VM Movement: In a cloud VDI scenario (like Azure Virtual Desktop), the host VMs might be on an Azure virtual network. If you compromise one VM, see if you can reach others (other session hosts, file servers, domain controllers in that VNet). Also, check if any management interfaces are accessible: e.g., Azure Instance Metadata service at http://169.254.169.254/ (which could give Azure-specific tokens if not blocked). In on-prem VDI, see if you can reach the virtualization infrastructure (vCenter, Citrix Delivery Controller, etc., if they‚Äôre on the network). Accessing those could yield further breakout (like compromising the hypervisor or VDI controller).

    Leverage Shared Resources: Often VDI users have access to shared corporate resources like intranet sites or databases by virtue of being on the network. Use the foothold to enumerate those. For example, try connecting to the company SQL server (if known) using Windows auth ‚Äì maybe the user has read access to some DB that contains sensitive info. Or abuse trust relationships: if the VDI is in a less monitored segment, an attacker could use it to stage attacks (like ARP spoofing inside that network segment, if not prevented).

Privilege Escalation & Configuration Flaws in VDI Hosts

    VDI Agent/Software Vulnerabilities: Identify the VDI-specific software on the machine (Citrix Virtual Desktop Agent, VMware Horizon Agent, etc.) and check for known privilege escalation vulnerabilities. For example, Rapid7 recently discovered a Citrix Virtual Apps and Desktops flaw where a handle from a SYSTEM process was accessible in a user process, allowing a user to spawn a SYSTEM shell
    rapid7.com
    rapid7.com
    . Test for such issues by hunting for processes running as SYSTEM that you can interact with. Similarly, older VMware Horizon agents had issues with insecure file permissions (CVE-2020-3961) leading to DLL hijacking. If the environment isn‚Äôt fully up-to-date, these are ripe for exploitation.

    Services and Drivers: Enumerate services (sc query state= all) and drivers on the VDI host. Look for those running with high privileges that have configurable paths or unquoted service paths, weak file ACLs, or vulnerable binaries. For instance, see if the ‚ÄúCitrix HDX‚Äù or ‚ÄúVMware View‚Äù services can be tampered with. Also, some VDI setups might use things like AppSense, Ivanti, or other user environment managers ‚Äì check those for misconfigurations (they often run as system to manage user sessions).

    Misconfigured Privileges: Determine if the VDI user has more rights than intended. Are they local admin? (They shouldn‚Äôt be, but check whoami /groups to be sure.) Are any powerful local groups (Remote Desktop Users, etc.) mis-assigned? Also, check if UAC (User Account Control) is enabled and at what level ‚Äì a common misconfiguration is leaving UAC at default on a jump box or VDI where the user has some admin rights, allowing easy bypass. If the machine is part of a Windows domain, see if any local Group Policy allows privilege elevation (e.g., check WSUS or LAPS misconfigs, though those are less likely on a VDI).

    AppLocker or SRP Bypass: Many locked-down desktops use AppLocker or Software Restriction Policies. Enumerate the rules if possible (via powershell Get-AppLockerPolicy -Effective or checking registry). Then try known bypass techniques: e.g., if only signed binaries run, can you run installutil.exe or msbuild.exe with a malicious DLL (LOLBin abuse)? Or use rundll32 to run code from memory ‚Äì a lot of AppLocker configs forget to block rundll32, which can be used in creative ways
    pentestpartners.com
    pentestpartners.com
    . Another trick: see if you can copy an allowed binary to a new location and have it still run. If only specific paths are blocked, maybe running from %PROGRAMDATA% works. This is very environment-specific, but important for escalation.

    Schedulable Tasks and Missing Patches: Check if you can create scheduled tasks (at or schtasks) ‚Äì sometimes standard users can if the security policy isn‚Äôt tight, and that can be used to run as System (older Windows had some loopholes here). Also inspect if the OS is missing privilege-escalation patches (e.g., older Windows 10 builds susceptible to known LPE exploits like PrintNightmare, et al.). If in scope, safely attempt those exploits to escalate.

    Default Credentials & Passwords: It may sound basic, but also check for any default or weak credentials in the VDI environment
    pentestpartners.com
    pentestpartners.com
    . For instance, test if ‚ÄúAdministrator‚Äù or local admin accounts have trivial passwords (maybe the golden image had a known password?). This also includes checking for hard-coded creds in scripts or config files on the VDI.

File and Print Redirection Edge Cases

    Clipboard File Transfer: In some cases, RDP allows file copy via clipboard (not just text). Test if you can copy a file to clipboard on the client and paste it in the VDI (or vice versa). If enabled, treat it as a direct file transfer channel. If it‚Äôs supposed to be disabled, see if any trick re-enables it. For example, some HTML5 clients might allow drag-and-drop of files into the browser which then uploads to the VDI ‚Äì try dragging a file into the session window to see if an upload dialog appears.

    Client Printers (Print Redirection): If RDP or Citrix is set to redirect printers, the VDI will ‚Äúsee‚Äù the client‚Äôs printers. This can be abused in a couple ways. First, the print spooler on the VDI might try to use the client‚Äôs print driver. A malicious driver on the client or a malformed response could exploit the server‚Äôs spooler (this is the basis of some PrintNightmare scenarios). As a test, you likely won‚Äôt actually run a malicious driver, but check if the spooler service is running and if client printers show up ‚Äì if yes, flag that outdated drivers or spooler vulns could compromise the server. Second, if you can print from VDI to a file on the client (like Microsoft Print to PDF on client), see if that file actually gets created on the client side. That would be an exfiltration route: you ‚Äúprint‚Äù sensitive info and it‚Äôs saved on your local disk outside the VDI.

    Virtual Printers and PDF Writers: The presence of a PDF printer (e.g., CutePDF, Adobe PDF, or Microsoft Print to PDF) inside the VDI can allow writing files even if other avenues are locked. Printing a sensitive document to PDF generates a file on the VDI‚Äôs disk (usually in user Documents). From there you still need to get it out, but if other channels (like OneDrive sync or email) are open, it‚Äôs easier to send a PDF than perhaps the original data. Also, check if any mapped network printers can be used to drop files ‚Äì e.g., printing to an XPS on a network share.

    Client Drive Mapping via RDP: As mentioned in I/O abuse, if client drives are mapped, ensure to test read/write both ways. For web clients, check if they provide an ‚ÄúUpload/Download file‚Äù UI (many HTML5 remote desktop clients have an option to transfer files). Abuse that by attempting to upload a large or dangerous file (to see if filtered) and download sensitive files from the VDI to your local machine. Sometimes these web transfer tools bypass corporate DLP since they ride inside the virtual session‚Äôs allowed channels.

    Copy/Paste Formatting: Even if straight copy/paste is disabled, certain formatted data might slip through. For instance, copying a screenshot via clipboard (PrintScrn in RDP might send an image to the client clipboard
    pentestpartners.com
    ) ‚Äì test if you can take a screenshot of the VDI and paste it on the client. Conversely, see if rich text or objects copied from client (Excel tables, etc.) can be pasted, as those might embed files. It‚Äôs a stretch, but worth checking if the clipboard filtering is granular or not.

    Mapped Network Drives: If the user has network drives (to file servers, SharePoint, etc.) mapped inside the VDI, consider them in scope for data exfiltration. You might not be able to directly touch the client file system, but a network drive could allow you to drop data that persists or is accessible elsewhere. Also test if you can create malicious shortcuts or files on those drives that other users might click (leading to further compromise).

    Edge-case Channels: RDP and Citrix have other redirection features like audio recording, smart card, plug-and-play devices, etc. While these typically don‚Äôt allow file transfer, think creatively: e.g., Audio recording ‚Äì could you synthesize a WAV that contains encoded data and have the client record it? Smart card ‚Äì if you can get the server to prompt for smart card PIN repeatedly, maybe a PIN brute-force? These are esoteric, but enumerate what‚Äôs enabled (e.g., qwinsta / query session might show if audio or clipboard is active).

Cloud Storage & Sync Exploitation

    OneDrive/SharePoint Sync: Many enterprise VDIs come with OneDrive for Business or a SharePoint drive mapped for user convenience. If the user‚Äôs profile is syncing to OneDrive, you have a built-in path to exfiltrate data: simply place files in the OneDrive folder (which syncs out to cloud). Test this by creating a file in the OneDrive folder and seeing if it appears on your own OneDrive (if you have access) or ask the admin if possible. Also, abusing this, you could place a malicious file (like an evil macro-enabled Office doc) in OneDrive ‚Äì when the user logs in from a secure laptop later and opens it, they get compromised outside the VDI. In short, treat cloud sync as an approved data pipeline and ensure sensitive files in the VDI can‚Äôt silently sync out without inspection.

    Google Drive/Dropbox: Similar to OneDrive, if any consumer cloud storage apps are installed or allowed, those are major exfiltration vectors. Even if not installed, see if the user can access them via web ‚Äì e.g., can you log in to Google Drive via the VDI‚Äôs browser and upload files? That might bypass corporate network controls if the VDI has more open internet access than user‚Äôs local machine. It‚Äôs a potential gap to report if found.

    Profile Containers (FSLogix): Some Azure Virtual Desktop and RDS deployments use FSLogix to store user profiles in VHD(X) files on a file share. If you have low-level access, see if it‚Äôs possible to mount or read someone else‚Äôs VHD (permissions should prevent it, but if misconfigured, one user might see another‚Äôs data). From a persistence angle, FSLogix containers mean the user profile persists between sessions ‚Äì thus any backdoor you plant in the profile (startup folder, Run key, etc.) will persist too. Check if the FSLogix disk is encrypted or not ‚Äì if not, an attacker who gets file share access (maybe through the compromised VDI with domain creds) could directly steal user profiles.

    Cloud App Integrations: Check for other cloud integrations: e.g., Microsoft Teams or Slack in the VDI ‚Äì files sent via these might land on other systems. Or if something like Box or AWS CLI is configured, you might find keys/tokens you can use to pivot to cloud resources. Essentially, map out any cloud service the VDI is tied into and consider how it could leak data or be abused to run code (for instance, some VDI environments mount cloud drives as letter drives ‚Äì if misconfigured, maybe you can navigate the file system of the cloud storage beyond your access).

    Enterprise Sync Tools: Older solutions like ShareFile, Citrix Drive Mapper, or NetApp FlexCache might be in use ‚Äì ensure you understand any file sync tool present and test its boundaries (upload, download, accessible directories). Sometimes these tools have local caches ‚Äì if you find an offline cache of a synced drive, you might retrieve files that were ‚Äúdeleted‚Äù or not meant for you.

Active Directory (AD) Breakout Vectors in VDI

    AD Group Policies/Restrictions: Evaluate the Group Policy settings applied to the VDI session. Often, breakouts involve GPO misconfigurations. For example, if software restriction policies are applied via GPO, are they applying to the correct scope? If you have a normal user but find you can change certain system settings, it might mean a GPO wasn‚Äôt enforced. Use gpresult /R to see what policies are in effect and look for any unexpected configuration that could be abused (e.g., a logon script that you can tamper with on the domain).

    Domain Privileges of VDI Users: Confirm that the VDI user accounts are properly limited. Sometimes, organizations put VDI users in an AD group that has more rights than intended (e.g., all VDI users are in a group that is added to local Administrators on VDI endpoints for support reasons). If you find such a group, that‚Äôs a privilege escalation vector beyond just one machine. Also check if the user can perform any domain admin tasks ‚Äì unlikely, but does whoami /priv show any higher privileges (SeDebugPrivilege, etc.)? That could hint the machine itself is more privileged.

    VDI Infrastructure Accounts: The VDI might be accessed via an broker/gateway (like Citrix StoreFront/Netscaler, or Azure AD for AVD). While those are mostly external, sometimes the VDI VM itself may have residual creds. For example, check if any scheduled tasks or services run with domain accounts (e.g., a Horizon Agent might use a service account domain\HorizonAgent ‚Äì if that has extra rights, capturing that password or token is gold). Look in the Windows Credential Manager and DPAPI protected storage for saved credentials ‚Äì perhaps IT staff left a support account cred cached.

    AD Information Disclosure: Use the VDI to query AD info that a normal user can. Run net user /domain or net group /domain to list users and groups (if not restricted)
    pentestpartners.com
    . Sometimes VDI are configured in less restricted zones so these queries work. Look for sensitive group memberships like ‚ÄúDomain Admins‚Äù or ‚ÄúEnterprise Admins‚Äù and see if any logged-in or service accounts from your VDI appear there (hopefully not!). Even without direct breakout, gathering AD intel (trusts, admin accounts, password policy) is useful for planning further attacks.

    Credential Caching and Pass-the-Hash: If you manage to get local SYSTEM on a VDI machine, dump the hashes (using mimikatz or lsass memory). Because it‚Äôs domain-joined, you might get the hash of any account that logged into that machine. On multi-user RDS, multiple users‚Äô creds might be in memory. You can then attempt lateral movement with those hashes (pass-the-hash) to other servers. For example, maybe an admin logged into a VDI once and left a hash. Even standard user hashes could be tried on other machines if password reuse is rampant.

    DNS and Directory Services: As an internal system, the VDI can likely resolve internal DNS names. Use that to enumerate other AD infrastructure: e.g., query _ldap._tcp.dc._msdcs.domain.com to find domain controllers, then target them. If allowed, try using the ldapsearch via PowerShell or .NET to pull more AD data (for instance, user descriptions, which sometimes contain plaintext passwords). While these are more general internal pen-test moves, doing them from a VDI perspective shows the risk of an attacker who just has a ‚Äúlowly‚Äù user on a virtual desktop being able to survey and eventually compromise the whole domain (the ‚Äúsnowball effect‚Äù as cited, where one small hole leads to full domain takeover)
    pentestpartners.com
    .

Local Session Persistence

    Persistent vs Non-Persistent VDI: Determine if the VDI is non-persistent (i.e., reverts to a gold image on logoff) or if it‚Äôs an assigned persistent desktop. This affects persistence strategies. For non-persistent, focus on profile-level persistence; for persistent, you can also do system-level. In either case, the goal is to maintain foothold between sessions.

    Profile Persistence: Many non-persistent VDIs still keep user profiles (roaming or via FSLogix). Leverage this by placing autorun entries in the user‚Äôs profile. For example:

        Add a shortcut to %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup ‚Äì anything here will run when the user logs in next.

        Add a Run key in HKCU registry (Software\Microsoft\Windows\CurrentVersion\Run). This will execute on login for that user and is stored in their NTUSER.DAT (which is part of roaming profile).

        If you have macro access, place an Excel/Word macro in the user‚Äôs Office startup templates, so that it runs whenever Office is opened.

        Abuse scheduled tasks set to run as the user: e.g., schedule a task at login (SCHTASKS /Create /TN backdoor /TR "powershell.exe -ExecutionPolicy Bypass -File C:\Users\Public\backdoor.ps1" /SC ONLOGON /RU $env:UserName). On some systems, standard users can create tasks that run as themselves on login.

    System-Level Persistence: On persistent desktops (or if you manage to get privileges on a shared RDS host), you can install more robust persistence:

        Install a new service or modify an existing service to launch your payload (requires admin/SYSTEM).

        Use WMI Event Subscriptions for a stealthy trigger (e.g., on user login or periodically).

        If you have domain admin (outside VDI scope though), push a GPO startup script to the VDI OU.

        Less stealthy but effective: create a local user account (if you have admin) and add to Administrators, so even if your main access is revoked, you have another way in.

        If the VDI is on a schedule to reset, see if you can delay that or break the reset mechanism ‚Äì e.g., some non-persistent pools delete VMs, but if you can mess with the agent that does that (likely out of reach), you might keep a VM alive longer.

    Scheduled Tasks & Backdoors: Even in a single session, consider planting things like a reverse shell that triggers periodically in case your interactive session is discovered and killed. A scheduled task that runs every 5 minutes to check a C2, or a startup program that ensures on reboot the connection comes back, can make remediation harder. Just be mindful of not disrupting other users in multi-user scenarios.

    Logon Scripts Abuse: If you have the ability to edit a logon script (maybe your user has write access to a NETLOGON share or similar due to mispermission), that‚Äôs a golden ticket ‚Äì you can add malicious commands that execute for all users logging in. That‚Äôs more of an AD/config issue but can manifest in VDI if, say, all VDI users run a certain logon batch file that you can modify.

App Sandboxing & Streaming Misconfigurations

    Citrix Published Apps Breakout: In Citrix Virtual Apps (formerly XenApp), instead of a full desktop, users run published applications. Test those thoroughly for breakout. For example, if only ‚ÄúExcel‚Äù is published, can you spawn other programs from Excel? (Yes ‚Äì via macros or opening hyperlinks, etc., as discussed). If only a browser is published, we covered browser breakouts. If a custom app is published, see if it has any UI that allows launching something else (file dialogs, help links, etc.). Citrix tries to isolate the app, but often the breakout is identical to a regular desktop once you get an Explorer window open on the server. Ensure any published app is as locked down as a kiosk would be.

    Citrix App Layering/Virtualization: Some Citrix environments use App Layering to deliver applications in a layered image. While largely transparent to the user, layering might introduce odd behavior ‚Äì e.g., an application might run with certain files virtualized. As a tester, see if you can access the underlying file system of another layer or the base OS. This is low-level, but for instance, if two apps are isolated from each other but you can make them interact (maybe through the file system or registry), you might break the intended isolation. If you suspect layering, research any known escape in that specific version.

    Microsoft App-V or FSLogix App Masking: If applications are delivered via App-V (application virtualization), check if the virtual environment can be escaped. Usually App-V apps can still interact with the OS unless explicitly isolated. Try to use an App-V delivered app to launch a non-virtualized one (similar to published app breakout). FSLogix App Masking might hide certain apps from the user ‚Äì see if you can execute them anyway (maybe via command line) if you know the path.

    VMware ThinApp: This is another app virtualization technology. If you encounter ThinApp packages, know that they run in user-mode but can be configured to allow interaction with the host. Look for any that might allow spawning cmd.exe or writing files to host. The key with any app sandbox is to find communication channels between the sandboxed app and the real system (files, registry, COM objects, etc.) and exploit those.

    Layered Security Bypass: Citrix and Horizon often come with extra security layers like policy restrictions (disabling certain keystrokes, drives, etc.) and profile management. Misconfigurations here can be telling. For example, if Citrix policies were meant to disable client drive mapping but you still find the drive, that‚Äôs a config bug to report. Or if ‚Äúprohibited‚Äù keys (like Ctrl+Alt+Del) still work via some sequence, note it. Also, test the Citrix hotkeys like Ctrl+F1 or Shift+F2 ‚Äì some are meant for session management but if not disabled they might allow toggling between sessions or resizing windows in a way to expose the underlying desktop
    netspi.com
    netspi.com
    .

    Virtual Channel Abuse: Citrix and RDP have virtual channels for features (clipboard, printing, drive, etc.). If you‚Äôre able to develop or use a custom tool, you could try to abuse these channels. For instance, the Citrix CGP or ICA virtual channels ‚Äì any known vulnerabilities there (historically, there have been issues where malformed data in a channel could crash the endpoint). This is quite advanced (requires writing exploit code usually), but be aware of their existence. A simpler check: if you can run a network sniffer on the VDI (or client side) to see if any sensitive data is transmitted in those channels (like keystrokes in cleartext over CGP), that would be a finding.

    Session Recording / Monitoring Bypass: Some VDI setups use session recording (e.g., Citrix Session Recording) or monitoring agents. From an attacker perspective, you might try to detect if you‚Äôre being recorded (certain processes or services) and attempt to disable them. If you as a tester can disable the recording service (say via a flaw or by killing a process you shouldn‚Äôt be able to), that‚Äôs a misconfiguration. This is a niche area but relevant in high-security environments ‚Äì any ability to tamper with the security tools on the VDI is significant.

Client-Side Manipulation & External Entry Points

    HTML5 Client Exploits: When the user connects via a web browser (HTML5 client), the server sends down a web application (JavaScript, etc.) that runs the remote desktop. Look at that code (use browser Dev Tools to inspect source). If you find references to features like clipboard, file transfer, etc., see if you can invoke them even if the UI doesn‚Äôt expose it. Developers sometimes hide buttons but leave API endpoints accessible. Manually calling a function to upload a file might work despite the button being absent.

    Web Portal Vulnerabilities: The VDI/RDS web portal itself (e.g., Citrix StoreFront, VMware Horizon Web Access, Microsoft RDWeb) could have vulnerabilities. A common one is XSS ‚Äì if an attacker can XSS the login page or a user‚Äôs apps page, they might steal credentials or manipulate the session launch. For instance, a reflected XSS in Citrix StoreFront could let an attacker force a user‚Äôs browser to silently modify the ICA file when they launch an app, maybe re-enabling something like client drive mapping. Test all inputs on these pages (if in scope).

    Malicious RDP Server (Reverse RDP): There is a class of attacks where the server can compromise the client (e.g., CVE-2019-0863 and others). As a pen tester, you normally are the client, but consider demonstrating the risk: if an attacker compromises one VDI desktop, they could set up a fake RDP server on it and entice an admin to connect, exploiting the admin‚Äôs MSTSC client. If allowed, you could run a tool like PyRDP or Metasploit‚Äôs RDP server module on the VDI and show that when someone connects, you can execute code on their machine
    cloud.google.com
    isc.sans.edu
    . Even if you don‚Äôt fully exploit this, mention any known client CVEs (for Citrix Workspace, Horizon Client, MSTSC, etc.) and ensure the client software is updated. For example, older Citrix Receivers had a drive redirection bug allowing remote read of client files
    nccgroup.com
    .

    Social Engineering within VDI: Test if you can manipulate the user‚Äôs environment in a way that when they leave the VDI, their local machine is at risk. A scenario: Place a malicious shortcut on the user‚Äôs Desktop folder in the VDI that points to an external resource (like a \\attacker\share\evil.lnk). If the profile is roamed or if they might drag files out of VDI, they could carry that shortcut to their host and later click it, triggering an attack on their host. This isn‚Äôt a direct ‚Äúbreakout‚Äù during the session, but it‚Äôs a vector to persist an attack that jumps out later.

    Logging and Session Security: Investigate how the VDI session is protected on the client side. For instance, if using an HTML5 client, all traffic is web traffic ‚Äì is it properly encrypted? If you drop the TLS or use a MITM (with permission), can you sniff keystrokes? For native clients, are they using up-to-date encryption (RDP should be TLS 1.2+, Citrix should be TLS or DTLS if UDP)? Weak encryption or accepting self-signed certs would be a finding. While this is more config review, it relates to an attacker potentially capturing data between client and VDI if they got in the middle.

    Client-Side Cache: RDP and Citrix clients often cache bitmaps or have temp files on the client. From a data exposure perspective, check what traces your VDI session leaves on the client (especially for HTML5 ‚Äì the browser might have significant data cached). If the client machine is in scope, you could see if any sensitive info (like screenshots of the VDI, or credentials) are left unprotected. This is more on the defensive side, but a savvy attacker might target the client to pull such info after the fact.

    External Device Trust: Finally, consider any integration with the client‚Äôs environment that could be abused. For example, some VDI setups allow launching apps from the VDI on the client (Citrix has ‚ÄúLocal App Access‚Äù feature) ‚Äì if that‚Äôs enabled, then from the VDI you could instruct the client to run an application installed locally. That‚Äôs a huge breakout if misconfigured. It essentially reverses the direction of trust. Not many orgs use that feature due to its risks, but keep an eye out for anything that bridges the VDI and client beyond just I/O redirection.

Each of the above categories and checks helps ensure no stone is left unturned during a VDI/RDP penetration test. By going beyond basic tests and considering obscure attack vectors ‚Äì from abusing virtual channels and protocol handlers to leveraging cloud sync and misconfigurations ‚Äì a tester can thoroughly assess the security of a virtual desktop deployment. The ultimate goal is to identify any avenue by which an attacker who gains a foothold in a VDI session (or who lures a user into connecting to a malicious server) could escape containment, escalate privileges, pivot deeper into the network, or impact the client side. This checklist should be used alongside up-to-date threat intelligence (for newly discovered CVEs in VDI software) and tailored to the specifics of the environment under test. Happy hunting!

Sources:

    Pen Test Partners ‚Äì Breaking Out of Citrix and other Restricted Desktop Environments
    pentestpartners.com
    pentestpartners.com

    Tarlogic ‚Äì Pentests in restricted VDI environments
    tarlogic.com
    tarlogic.com

    Internal All The Things ‚Äì Kiosk/VDI Breakout Cheat Sheet
    swisskyrepo.github.io
    swisskyrepo.github.io

    NetSPI ‚Äì Breaking Out of Apps via Terminal Services/Citrix
    netspi.com
    netspi.com

    Rapid7 ‚Äì CVE-2025-6759 Citrix VDI Privilege Escalation
    rapid7.com
    rapid7.com

    InfoSec Writeups ‚Äì Escaping the Citrix Sandbox
    infosecwriteups.com
    infosecwriteups.com
    (summary of common breakout techniques)

    PentestPartners ‚Äì File Transfer and Device Redirection in VDI
    pentestpartners.com
    pentestpartners.com

    PentestPartners ‚Äì ICA File Manipulation for Breakout
    pentestpartners.com
    and Citrix Hotkeys
    netspi.com
    .

You said:
Hmm can we come up with a list of network services and high level what actions we should take to test them
ChatGPT said:

Could you clarify if you're referring to:

    Network services exposed within the VDI session (e.g., from other internal systems like file shares, LDAP, SMB, RDP, etc.)?

    Network services running on the VDI hosts themselves?

    Or services exposed to or from the VDI client side (e.g., clipboard redirection services, WebSocket gateways, Citrix StoreFront, etc.)?

Also, should we assume you have permission to perform active scanning (e.g., port scans, banner grabbing, authentication attempts) and possibly exploit testing on these services?
You said:
Just network services want to build up my pentest methodology
ChatGPT said:

Understood. I‚Äôll create a detailed list of common network services typically encountered during penetration tests along with recommended high-level actions for testing each ‚Äî including reconnaissance, enumeration, exploitation attempts, and post-exploitation considerations. This will serve as a foundational methodology to apply during network layer assessments.

I'll let you know once it's ready.

Network Services and Recommended Penetration Test Actions
Common Network Services in Penetration Testing Methodology
SMB (Server Message Block)

    Description & Ports: SMB is a Windows file-sharing protocol for sharing files, printers, and inter-process communication. It commonly runs on TCP ports 139 and 445
    hackviser.com
    . Penetration testers often encounter SMB on internal networks due to its use in Windows domains.

    Enumeration: Enumerate SMB to gather OS version, domain info, shared folders, and user accounts. Use tools like Nmap (with scripts like smb-os-discovery, smb-enum-shares, smb-enum-users) and smbclient or enum4linux to list shares and users
    hackviser.com
    hackviser.com
    . Check for anonymous (null session) access which can reveal sensitive info
    hackviser.com
    .

    Common Vulnerabilities: Look for misconfigurations such as enabled null sessions or disabled SMB signing, which allow Man-in-the-Middle attacks
    hackviser.com
    . Check for outdated SMB versions (SMBv1) susceptible to exploits like MS17-010 (EternalBlue)
    hackviser.com
    or SMBGhost (CVE-2020-0796)
    hackviser.com
    . Also, weak or reused credentials are a risk if SMB shares use local accounts.

    Testing Tools & Techniques: Use smbclient for manual share access and file operations, CrackMapExec or Hydra for brute forcing SMB logins (e.g. guess weak passwords)
    routezero.security
    . Metasploit modules (e.g. ms17_010_eternalblue) can test known exploits
    routezero.security
    . Tools like SMBMap help enumerate accessible shares and permissions
    hackviser.com
    .

    Post-Exploitation: Compromised SMB access often means ability to execute code or move laterally. Attackers can perform pass-the-hash or psexec style attacks using stolen NTLM hashes to get remote shells
    routezero.security
    . They may download sensitive files from shares or upload malicious executables for persistence
    routezero.security
    . If an SMB server (like a domain controller) is fully compromised, it can lead to dumping of credentials (e.g. with Mimikatz) and complete domain takeover
    routezero.security
    .

RDP (Remote Desktop Protocol)

    Description & Ports: RDP provides GUI-based remote access to Windows systems. It runs by default on TCP 3389 (configurable to other ports)
    hackviser.com
    . RDP is widely used for remote administration in internal networks, making it a common target during pentests.

    Enumeration: Check if RDP is open and identify security settings. Use Nmap to detect RDP (e.g. -p 3389 and rdp-enum-encryption script to see if Network Level Authentication is required)
    hackviser.com
    . A banner grab can reveal the Windows version or RDP service version
    hackviser.com
    . Also, determine if RDP is accessible externally or only internally.

    Common Vulnerabilities: Weak credentials are a primary risk ‚Äì RDP often falls to password guessing or credential reuse
    hackviser.com
    . Older unpatched systems may be vulnerable to RDP-specific exploits like BlueKeep (CVE-2019-0708), which allows unauthenticated remote code execution
    hackviser.com
    (especially if NLA is not enforced). Lack of NLA or RD Gateway can also expose RDP to MiTM or service-level attacks. Always check for updated patches on RDP hosts.

    Testing Tools & Techniques: Use Hydra or Ncrack to brute force RDP logins (e.g. test common passwords for Administrator)
    hackviser.com
    . rdpscan or xfreerdp can test RDP connections and security settings
    osintteam.blog
    . Metasploit‚Äôs BlueKeep module can safely test that vulnerability (on non-production systems)
    hackviser.com
    . Ensure only authorized attempts and lockout policies are respected to avoid account lockouts.

    Post-Exploitation: If RDP access is obtained, the tester essentially has full interactive GUI control of the system. This allows running Mimikatz to dump credentials from memory
    hackviser.com
    , executing PowerShell scripts, or using the compromised host as a launch point for lateral movement. Attackers can disable security tools via the GUI or transfer files easily. RDP access to a server often means the ability to escalate privileges (if not already admin) and pivot deeper into the network, as well as persistent access by enabling new user accounts or RDP backdoors
    hackviser.com
    .

SSH (Secure Shell)

    Description & Ports: SSH provides encrypted remote shell access to Unix/Linux (and sometimes Windows via OpenSSH) systems. It typically listens on TCP 22
    hackviser.com
    . Administrators and developers use SSH for secure logins and file transfers, so it‚Äôs prevalent in most environments.

    Enumeration: Identify SSH services and gather key info. Use Nmap version scan or scripts like ssh-hostkey and ssh2-enum-algos to fingerprint SSH server version and supported ciphers
    osintteam.blog
    . Perform banner grabbing (nc <host> 22) to possibly learn the SSH software/version
    hackviser.com
    . Also check if SSH allows password auth, public key auth, etc. (Nmap‚Äôs ssh-auth-methods script can enumerate allowed auth methods)
    hackviser.com
    .

    Common Vulnerabilities: Weak user passwords or default credentials are a primary concern ‚Äì attackers attempt brute-force or credential stuffing on SSH
    hackviser.com
    . Also, outdated SSH versions might support old ciphers or have known flaws (though rare). Misconfigurations like allowing root login with password or reuse of SSH private keys across systems can be exploited. If interactive logins are disabled, attackers might try abuse of authorized_keys if they can write files.

    Recommended Tools: Use Hydra to brute force SSH credentials (e.g. common usernames like root with a password list)
    osintteam.blog
    . For key brute-forcing, use John the Ripper or hashcat on SSH private key files (if obtained)
    hackviser.com
    . Tools like ssh-audit can analyze the target‚Äôs SSH configuration for weak algorithms
    hackviser.com
    . Also consider Metasploit modules (e.g. auxiliary/scanner/ssh/ssh_enumusers) to enumerate users by timing responses
    hackviser.com
    .

    Post-Exploitation: Compromised SSH access grants shell control of the host. An attacker can install persistent backdoors (e.g. adding their public key to ~/.ssh/authorized_keys for future access)
    hackviser.com
    . With SSH, attackers often set up port forwarding or tunneling to pivot ‚Äì for example, using SSH‚Äôs -L or -D options to reach internal services through the compromised host
    hackviser.com
    hackviser.com
    . They can also transfer files via SCP/SFTP. Essentially, an SSH compromise on a critical server can quickly lead to lateral movement and deeper network access due to the trust and access that machine has.

FTP/SFTP (File Transfer Protocol & Secure FTP)

    Description & Ports: FTP is an old protocol for unencrypted file transfer, typically on TCP 21 for commands (and uses dynamic ports for data)
    hackviser.com
    . SFTP (Secure FTP) is actually file transfer over SSH, using TCP 22 by default, which encrypts the traffic
    myworkdrive.com
    myworkdrive.com
    . Pentesters encounter FTP on legacy systems or network devices, and SFTP on systems where SSH is enabled.

    Enumeration: For FTP, check for anonymous login and list accessible files. Use Nmap with ftp-anon script or manual ftp client to see if anonymous:anonymous login works (many FTP servers allow read-only anonymous access)
    hackviser.com
    . Retrieve banners (ftp <host> or nc <host> 21) to identify the FTP server software/version
    hackviser.com
    . For SFTP, if SSH port 22 is open, SFTP is usually available; you can test SFTP login using sftp user@host (it uses the same credentials as SSH). Also enumerate common directories or files (using FTP commands like DIR or tools like Gobuster for FTP paths)
    hackviser.com
    .

    Common Vulnerabilities: Anonymous FTP access is a common misconfiguration ‚Äì it may allow listing of sensitive files or even write access
    hackviser.com
    . Default or weak credentials are another issue (e.g. FTP servers with default admin/admin logins)
    hackviser.com
    . FTP is plaintext, so credentials can be intercepted if on-path (not typically an issue in switched internal networks, but a risk on unencrypted wireless or older hubs). Additionally, some FTP servers are vulnerable to buffer overflow exploits if outdated. FTP bounce attacks (using FTP‚Äôs PORT command) can allow scanning internal networks via an open FTP server
    hackviser.com
    hackviser.com
    , though modern servers often disable this.

    Recommended Tools: Use command-line ftp or graphical clients to manually test login and file access. Hydra can perform brute force on FTP credentials
    hackviser.com
    hackviser.com
    . Nmap‚Äôs ftp-brute script can also try common logins
    hackviser.com
    . For SFTP, standard SSH tools (sshpass, Hydra with ssh module) apply since it‚Äôs over SSH. To test for anonymous or weak SSL/TLS in FTPS, use Nmap scripts or sslscan as needed.

    Post-Exploitation: If FTP access (especially write access) is gained, an attacker can upload malicious files ‚Äì for example, planting a web shell in a web server‚Äôs FTP directory if the FTP user has rights to the web root. They can also download any sensitive data stored on the server (config files, databases backups, etc.). On some legacy systems, writing to certain directories via FTP could lead to code execution (e.g. uploading to an IIS web directory). With SFTP (SSH), compromise usually means shell access as described in the SSH section. Overall, file transfer services can facilitate data exfiltration (downloading large data dumps) or lateral movement by storing tools on an FTP share for other compromised machines to retrieve.

HTTP/HTTPS (Web Services)

    Description & Ports: HTTP is the protocol for web traffic (typically TCP 80 for plaintext) and HTTPS is HTTP over TLS (typically TCP 443). Almost every internal network has web services ‚Äì from intranet sites to device management interfaces ‚Äì making them key targets. Web services often host applications (e.g. web portals, APIs) that pentesters assess for vulnerabilities.

    Enumeration & Fingerprinting: Identify web server software and technologies. Use tools like WhatWeb or Wappalyzer to detect frameworks, languages, and CMSs running on the site
    osintteam.blog
    . Perform directory brute-forcing with tools like Gobuster/Dirbuster to find hidden pages or config files (e.g. gobuster dir -u http://<target> -w wordlist.txt)
    osintteam.blog
    . Check for default pages or known paths (e.g. /login, /admin). Also note HTTP headers and status codes for clues ‚Äì an HTTP banner might reveal the server version.

    Common Vulnerabilities: Web services are prone to the OWASP Top 10 issues
    osintteam.blog
    . This includes SQL Injection, Cross-Site Scripting (XSS), file inclusion, authentication flaws, etc. Look for default credentials or unprotected admin interfaces (e.g. a default password on a device‚Äôs web interface)
    osintteam.blog
    . Outdated web servers or frameworks might have known exploits (e.g. old Apache Struts or PHP versions). Also, misconfigurations like verbose error messages can leak info. For HTTPS, check if weak ciphers or certificate issues exist (not usually a direct exploit, but part of assessment).

    Testing Tools: Use a web proxy like Burp Suite to intercept and manipulate HTTP requests (crucial for testing inputs and authentication). Automated scanners (Nikto, OWASP ZAP) help find common issues like default files or disallowed methods. For specific tests: sqlmap for SQL injection, ffuf or Gobuster for content discovery, and Nmap scripts (http-enum, etc.) for quick checks. Custom scripts or curls are useful for testing specific behaviors (e.g. sending payloads to test for XSS). Don‚Äôt forget manual testing ‚Äì many web vulns require logic understanding beyond automated tools.

    Post-Exploitation: Compromising a web application can yield significant access. If you exploit an RCE in a web app, you may get a shell on that server (e.g. via web shell upload). Stolen session tokens could let you impersonate users (potentially an admin). Compromised intranet websites often store sensitive data like employee info or can act as a pivot point if the web server trusts other systems. An attacker might use a compromised web server to pivot internally (for example, leveraging trust or using it to host further phishing pages). If the web server is integrated with AD (as with SharePoint or Outlook Web App), compromising it could lead to domain credentials exposure. Essentially, a web service exploit can range from data theft (for SQLi, dump the database) to full system control, depending on the vulnerability.

DNS (Domain Name System)

    Description & Ports: DNS translates domain names to IP addresses. On internal networks it runs on UDP 53 (and TCP 53 for large transfers). Internal DNS servers (like Microsoft DNS on domain controllers) provide name resolution for the domain. While often not an obvious target, DNS misconfigurations can leak a trove of network information.

    Enumeration: Attempt a DNS zone transfer to retrieve the entire DNS zone data. If the DNS server allows it (AXFR transfer), use tools like dig: dig axfr @<DNS_Server_IP> <domain>
    osintteam.blog
    . A successful zone transfer gives hostnames and IPs of internal machines, essentially an internal network map
    capec.mitre.org
    . Also use dnsrecon or fierce to brute-force subdomains if zone transfer fails
    osintteam.blog
    . Query for common records (using nslookup or dig) like SRV records, which often list important services (e.g. domain controllers via _ldap._tcp.dc._msdcs.<domain>). Check if recursion is enabled and if the DNS server responds to external queries that it shouldn‚Äôt.

    Common Vulnerabilities: The primary issue is improperly configured zone transfers ‚Äì if any DNS server (especially a secondary) allows AXFR to anyone, an attacker can pull all DNS records
    capec.mitre.org
    . This leaks sensitive info like server names (often indicating function, e.g., db-server or mail01). Another risk is DNS cache poisoning if the server isn‚Äôt using proper trust (less common on modern DNS). Also, older DNS services could have buffer overflow vulnerabilities, but those are rare in updated environments. Ensure internal DNS is not exposed externally; otherwise, an attacker can query internal hostnames via a technique (if misconfigured).

    Tools & Techniques: Use dig, nslookup, or host for manual queries (e.g., dig @<DNS_IP> <hostname> ANY). dnsenum and dnsrecon automate a lot of discovery (including zone transfers and brute force). Nmap has scripts like dns-nsid and dns-recursion to check for vulnerabilities and info. Also, try simple zone transfer with nslookup (nslookup -> server <DNS_IP> -> ls -d <domain> on older Windows nslookup).

    Post-Exploitation: Information from DNS can greatly enhance further attacks. A zone transfer provides a list of target systems and sometimes network structure (e.g., seeing names like vpn, backup, dev, etc.). An attacker who actually compromises a DNS server (e.g., gains admin on Windows DNS) can manipulate records ‚Äì for instance, re-route traffic (man-in-the-middle by pointing critical domains to attacker IP). They could also leverage DNS to covertly exfiltrate data (DNS tunneling). In summary, DNS on its own leaks intel; if fully compromised, it becomes an infrastructure control point for redirecting and intercepting network traffic.

SNMP (Simple Network Management Protocol)

    Description & Ports: SNMP is used for network device management and monitoring. Commonly it runs on UDP 161 (SNMP traps on UDP 162)
    hackviser.com
    . Devices like routers, switches, printers, and servers often have SNMP enabled to report status. SNMP v1/v2c uses a community string as a weak form of auth, and v3 offers proper authentication and encryption.

    Enumeration: Query SNMP to gather system information. If the community string (like a password) is known or guessable (defaults are ‚Äúpublic‚Äù for read, ‚Äúprivate‚Äù for read-write), use snmpwalk to dump info: snmpwalk -v2c -c public <target>
    osintteam.blog
    . This can reveal running processes, interface IPs, ARP tables, routing tables, and even plaintext configuration details
    osintteam.blog
    . Use tools like onesixtyone to brute-force community strings if unknown (it tries common words quickly)
    hackviser.com
    . Also, SNMP sysDescr and sysName values (retrieved by snmpwalk) give device type and hostname.

    Common Vulnerabilities: Default community strings are the biggest issue ‚Äì many devices still use ‚Äúpublic‚Äù (read-only) and ‚Äúprivate‚Äù (read-write) by default
    hackviser.com
    . An attacker with read access can glean sensitive network info, and with write access (if the write community is known), they can potentially reconfigure the device (e.g., change routing, turn off interfaces). SNMP v2c has no encryption, so credentials and data could be sniffed, but on a switched internal network this is less likely unless attacker is on the same segment and using ARP poisoning. Some older SNMP services had denial-of-service or overflow bugs, but the primary focus is usually misconfiguration.

    Testing Tools: Use snmpwalk and snmpget for manual enumeration of OIDs (object identifiers)
    hackviser.com
    hackviser.com
    . snmp-check provides a user-friendly summary of common SNMP info (hostname, uptime, contact, etc.)
    hackviser.com
    . For brute forcing communities, onesixtyone is very fast
    hackviser.com
    , and Nmap‚Äôs snmp-brute script is another option. Metasploit has modules like auxiliary/scanner/snmp/snmp_login and snmp_enum to automate both login and enumeration. Ensure to test both v1 and v2c (v3 if configured, but v3 is usually secure or not used internally).

    Post-Exploitation: Read-only SNMP access yields a wealth of network knowledge ‚Äì attacker can map the network, identify device types/OS, and possibly user accounts (some systems store usernames in SNMP). If read-write SNMP is compromised, the attacker can reconfigure network devices: for example, change the configuration via SNMP set requests or even download the config (which often contains hashed or even plaintext passwords). On Cisco devices, SNMP write access could allow an attacker to enable new accounts or open ports. SNMP data might also include things like running software versions, which helps target other exploits. In summary, SNMP access can facilitate lateral movement (by revealing new targets and credentials) and even allow direct control of network infrastructure if poorly secured
    capec.mitre.org
    .

LDAP (Lightweight Directory Access Protocol)

    Description & Ports: LDAP is used for directory services, most notably Active Directory on Windows (as well as Unix directory services). It typically runs on TCP 389 (unencrypted) and TCP 636 for LDAPS (LDAP over SSL/TLS)
    hackviser.com
    . LDAP directories store users, groups, and other organizational information, making them a rich target on internal tests.

    Enumeration: Attempt to bind to LDAP and query for data. Many AD LDAP servers allow some level of anonymous binding or at least provide a base schema. Using ldapsearch (Unix tool) with no creds (ldapsearch -x -h <server> -b "" -s base "(objectclass=*)"), you can often retrieve the root DSE and supported capabilities
    hackviser.com
    . If anonymous or guest binds are allowed, try querying common OUs for users (e.g. ldapsearch -x -b "DC=domain,DC=com" "(objectClass=user)"). Even without anonymous access, any domain user creds can be used to enumerate all users, groups, and computers in AD. Look for password policy info, group membership of interesting accounts, etc. Also, tools like BloodHound (SharpLDAP) or ADExplorer can assist in enumerating LDAP in AD environments.

    Common Vulnerabilities: The main ‚Äúvulnerability‚Äù is excessive LDAP access. If anonymous bind is allowed, an attacker can potentially read a lot of directory info (usernames, organizational units, perhaps even password hashes if misconfigured ‚Äì though AD by default does not allow anonymous reads of sensitive attributes). Weak or default credentials to the directory service are rare, since in AD the LDAP creds are domain accounts. However, older or custom LDAP directories might have known defaults. Additionally, lack of LDAP signing in AD can allow man-in-the-middle attacks (an attacker could intercept and modify LDAP traffic). While not a direct exploit, AD misconfigurations (like user accounts with Do not require Kerberos preauth) can be discovered via LDAP and then exploited (AS-REP roasting).

    Recommended Tools: ldapsearch for Unix or PowerShell cmdlets like Get-ADUser (if domain joined) are useful for querying. Nmap has an ldap-rootdse script to grab basic info, and ldap-search script for common queries. For password brute-force on LDAP, tools like Medusa or Hydra can be used (point at port 389 with a list of users) ‚Äì but be cautious of account lockout policies. Windapsearch and ldapdomaindump are specialized tools for dumping AD contents via LDAP. In Windows domains, simply using BloodHound (which collects via LDAP) is extremely effective to map out relationships.

    Post-Exploitation: Information gathered via LDAP can directly lead to other attacks. User lists enable password spraying (trying one password across all users). Knowledge of group membership can identify high-value accounts (e.g., members of ‚ÄúDomain Admins‚Äù or ‚ÄúEnterprise Admins‚Äù). If the LDAP server itself is compromised (for instance, if an attacker gets Domain Admin and can write to AD), they could create backdoor accounts or modify the directory (e.g., change user attributes, add themselves to groups)
    hackviser.com
    . Attackers with privileged LDAP access can also extract password hashes for users (in AD, DCSync via LDAP can simulate domain controller replication to dump all hashes). In summary, LDAP is often the key to the kingdom in AD environments: enumerate it thoroughly, and if you gain write access, you effectively own the directory (and thus the network).

MSSQL (Microsoft SQL Server)

    Description & Ports: MSSQL is Microsoft‚Äôs enterprise database server, often found in corporate networks backing business applications. It defaults to TCP 1433 for the main instance (dynamic or other ports for named instances)
    bugb.co
    . Penetration testers target MSSQL for both data extraction and as a path to server/system compromise.

    Enumeration: Use Nmap with MSSQL scripts to gather info (e.g. ms-sql-info reveals the server version and instance details)
    bugb.co
    . Check for SQL Server Browser service on UDP 1434 which can enumerate instance names. If you have credentials or can connect, enumerate users, roles, and database names (SELECT name FROM master..syslogins for users, etc.). Even without creds, error messages from MSSQL can sometimes reveal version or database info. Metasploit‚Äôs mssql_ping can discover MSSQL instances on a network
    bugb.co
    .

    Common Vulnerabilities: Weak or default credentials are a prime issue ‚Äì e.g., the sa account with a weak or blank password
    bugb.co
    . Many MSSQL servers in internal networks use Windows integrated auth, but if SQL authentication is enabled, try common logins (sa/admin) with default passwords. Another flaw is when MSSQL is configured with xp_cmdshell enabled for low-privileged users ‚Äì this stored procedure allows executing OS commands. SQL Injection in applications can also lead to MSSQL compromise (if the web app uses MSSQL, SQLi can extract or modify data, and possibly enable xp_cmdshell). Old MSSQL versions might have known exploits, but typically exploitation is through misconfigurations.

    Tools & Techniques: Hydra or Medusa can brute force SQL logins (hydra -L users.txt -P passes.txt mssql://<IP>)
    bugb.co
    bugb.co
    . Impacket‚Äôs mssqlclient.py is very useful for executing queries and even loading executables using SQL credentials
    bugb.co
    . Metasploit has modules like auxiliary/scanner/mssql/mssql_login for brute force and mssql_enum for info gathering
    bugb.co
    . Once authenticated, you can attempt to enable xp_cmdshell if allowed (EXEC sp_configure 'xp_cmdshell',1; RECONFIGURE) and then run OS commands
    bugb.co
    . Also, check if the database has any procedure or job running with higher privileges that you can exploit.

    Post-Exploitation: A compromised MSSQL server (with admin privileges) is extremely valuable. Via xp_cmdshell, an attacker can execute OS commands as the database service account, which is often Local System on the DB server
    bugb.co
    . This means full control of that server ‚Äì read/write files, create local users, etc. Attackers can also dump credentials: using Metasploit‚Äôs mssql_hashdump or querying system tables to get password hashes
    bugb.co
    . These hashes (if SQL auth) can be cracked or used for pass-the-hash in some cases. Additionally, the databases themselves contain sensitive information (customer data, application credentials). Linked servers in MSSQL can be used to pivot to other database servers
    bugb.co
    . If the MSSQL is integrated with Active Directory, compromise might allow AD attacks (some MSSQL instances run with domain admin privileges ‚Äî though that‚Äôs a misconfiguration, it does happen). In summary, expect to retrieve lots of sensitive data and potentially escalate to domain compromise if an MSSQL server is poorly secured.

MySQL

    Description & Ports: MySQL is a popular open-source relational database, often used in web applications. It listens on TCP 3306 by default
    hackviser.com
    . Internal apps and appliances may run MySQL or MariaDB as a backend. Pentesters focus on MySQL for data theft and leveraging it to gain system access when misconfigured.

    Enumeration: Use Nmap to confirm MySQL is open (mysql-info script can get server version)
    osintteam.blog
    . If you can connect (e.g., via the mysql client), check the MySQL version banner and current user‚Äôs privileges. Default MySQL installations might have a test database or sample users. Without creds, not much is accessible, but MySQL error messages (from web apps) could leak version or database names. If a web app is using MySQL, SQL injection is a major avenue to enumerate data (database schema, users, etc.).

    Common Vulnerabilities: Default accounts ‚Äì MySQL historically comes with an root user that might have no password or a weak password on internal setups
    hackviser.com
    . Also, older MySQL versions had an authentication bypass bug (CVE-2012-2122) allowing login with any password under certain conditions. Misconfigurations include users with wildcard host permissions (e.g., a user account accessible from any host with a weak password). If the MySQL service runs with high OS privileges and LOCAL_INFILE is enabled, file read via SQL is possible. An attacker who can write to the database may also use SELECT ‚Ä¶ INTO OUTFILE to write web shells or SSH keys to the server‚Äôs file system
    hackviser.com
    .

    Testing Tools: mysql client (command-line) is best for direct interaction. Try connecting with no password or common creds: mysql -u root -p and see if no password gets you in
    hackviser.com
    . Use Hydra for brute force if needed (hydra -L users.txt -P passwords.txt mysql://<IP>)
    hackviser.com
    . For SQL injection testing, sqlmap can automate extraction from a vulnerable web app (use --dbms=mysql to tailor for MySQL). Nmap‚Äôs mysql-brute and mysql-enum can also be used but are less common than direct client or sqlmap.

    Post-Exploitation: With MySQL access, an attacker can dump all databases (potentially sensitive application data, passwords, etc.). If running as root on Linux, the attacker might use MySQL‚Äôs user-defined functions (UDF) for privilege escalation ‚Äì e.g., create a UDF library to get code execution as the MySQL OS user. Another powerful vector: using SELECT LOAD_FILE('/etc/passwd') to read files
    hackviser.com
    , or SELECT ... INTO OUTFILE to write files
    hackviser.com
    . This could drop a web shell if the MySQL user has permission to write to web directories. On Windows, MySQL can be abused to write to Startup folders or use xp_cmdshell equivalent if enabled. Also, MySQL credentials often reuse the OS credentials or are stored in config files (like debian-sys-maint user in Ubuntu whose password is in /etc/mysql/debian.cnf
    hackviser.com
    ). These could be stolen for further use. Overall, compromising MySQL can lead to both data compromise and foothold on the underlying server.

PostgreSQL

    Description & Ports: PostgreSQL is an open-source relational database known for its robustness. It listens on TCP 5432 by default
    hackviser.com
    . Used in many enterprise and open-source applications, it may appear on internal assessments where those apps are present.

    Enumeration: Check for PostgreSQL using Nmap (-p 5432 and the postgresql-info script to get version info)
    hackviser.com
    . If you have credentials or can attempt a connection, note that PostgreSQL by default allows local socket connections without password for Unix accounts, but over TCP it requires a password (unless configured otherwise). Try connecting with default creds (common user is postgres). PostgreSQL error messages via web apps can reveal the version and database names if SQL injection is present. Once connected (even as a limited user), you can enumerate databases (\l in psql or SELECT datname FROM pg_database) and list tables, etc. Also check if the pgcrypto extension or other potentially dangerous functions are enabled (could be leveraged for reading files).

    Common Vulnerabilities: Default user credentials ‚Äì the postgres superuser account might have a weak or default password (or no password on internal, trusting authentication)
    hackviser.com
    . Some setups use ‚Äútrust‚Äù authentication for certain networks, meaning no password needed ‚Äì a big misconfig to exploit. If a web app has SQL injection on Postgres, it can be particularly powerful because Postgres has functionalities to read/write files and even execute system commands through extensions (if superuser). For example, command execution via COPY ... PROGRAM is possible if you have a superuser role. Also, older Postgres versions had known issues, but exploitation usually requires auth. Bruteforce attacks are feasible if no account lockout (Postgres doesn‚Äôt lock accounts by default on failed attempts).

    Testing Tools: psql (PostgreSQL client) for manual interaction. Use Hydra to brute force (hydra -L users.txt -P pass.txt postgres://<IP>)
    hackviser.com
    . Metasploit has an auxiliary/scanner/postgres/postgres_login for brute forcing and postgresql_enum for enumeration. Nmap‚Äôs pgsql-brute can try a set of creds as well. If you get a login, the \dx command in psql shows installed extensions (any custom ones?), and SELECT version() gives the DB version. Check pg_hba.conf settings if possible, to see trust relationships.

    Post-Exploitation: With a basic user, you can extract data from the databases of course (potential PII or credentials stored by applications). If you obtain a superuser role (e.g., the postgres role), PostgreSQL can directly interact with the OS. You could use COPY to read and write files on the server‚Äôs filesystem
    hackviser.com
    , potentially dropping malicious scripts. PostgreSQL superuser can also create user-defined functions in languages like PL/Perl or PL/Python to execute OS commands. In an Active Directory environment, sometimes PostgreSQL is integrated (less common), but if the service runs as a domain user, compromising it might yield AD credentials. Additionally, Postgres allows dumping of password hashes for its users (SELECT usename, passwd FROM pg_shadow;)
    hackviser.com
    , which you can attempt to crack ‚Äì these might be reused Windows passwords or application passwords. Essentially, a fully compromised PostgreSQL server can lead to complete server takeover and pivoting, whereas even a read access can provide valuable intel from stored data.

VNC (Virtual Network Computing)

    Description & Ports: VNC is a platform-independent remote desktop sharing system. It allows remote control of a graphical desktop and commonly listens on TCP 5900 (and subsequent ports for multiple displays, e.g., 5901)
    hackviser.com
    . VNC is often used on Linux systems or for remote support on various OS, and it‚Äôs encountered in internal networks especially in OT/SCADA environments or legacy setups.

    Enumeration: Determine if a VNC server is running and if it requires authentication. Nmap can scan common VNC ports (-p 5900-5901)
    hackviser.com
    . If VNC is not using encryption, a banner grab via Netcat can sometimes show ‚ÄúRFB‚Äù protocol version, confirming VNC
    hackviser.com
    . Some VNC servers respond indicating whether authentication is needed. You can also use a VNC client (like vncviewer) to connect and it will prompt if a password is required or not. Note any VNC authentication mechanism ‚Äì classic VNC uses a password (limited to 8 characters in older versions), while some use OS credentials.

    Common Vulnerabilities: Weak or no authentication is the main issue. Some VNC servers are left with no password or a very weak password, allowing anyone to connect
    hackviser.com
    . VNC traffic (unless using add-ons like VeNCrypt) is not encrypted, so intercepting credentials is possible if attacker is in position (but internally, focus is usually on active attacks). Also, older versions of VNC (RealVNC, UltraVNC) have had exploits (like authentication bypass or code execution), but these typically require either a man-in-the-middle or user interaction. Another vector is MITM attacks if encryption is not enforced ‚Äì an attacker on the same network could potentially sniff or hijack a session
    hackviser.com
    . But on a switched network, hijacking is non-trivial without ARP spoofing, which itself might be detected.

    Tools & Techniques: Use a VNC client (e.g., TigerVNC‚Äôs vncviewer) to attempt connections: it will tell you if a password is required. For brute forcing VNC passwords, Hydra supports VNC (hydra -V -f -P passwords.txt -t 1 vnc://<IP> will try password list)
    hackviser.com
    . There‚Äôs also a Nmap script vnc-brute for the same. If the VNC protocol is new enough to support None authentication, Nmap‚Äôs vnc-info script can check that. Additionally, tools like vncsnoop can be used if you capture VNC traffic to view the framebuffer. Keep in mind VNC‚Äôs 8-character password limit (for many implementations), which means brute forcing is very feasible.

    Post-Exploitation: If you gain access to VNC, you effectively have the target user‚Äôs desktop in real time. This means you can control the machine much like RDP: launching applications, accessing sensitive information displayed on screen, and so on. If the VNC session is running as a high-privilege user, you might directly do administrative actions. VNC access could allow an attacker to execute commands (by opening terminals or Run dialog) ‚Äì some tools like vncinject can even automate keystroke injection to spawn shells
    hackviser.com
    . With GUI access, an attacker may disable security software, steal documents, or pivot by using that machine‚Äôs network access. Also, because VNC is often used without logging (unlike Windows RDP which logs events), an attacker might prefer VNC for stealth. Post-exploitation, they might install a persistent VNC server or backdoor. Essentially, anything the user can do, the attacker can do, and if no one is watching the screen, it can go unnoticed. Data exfiltration is also possible by copy-pasting data out through the VNC clipboard or by using the VNC session to send files (some VNC clients support file transfer as well).

RPC/WinRM (Remote Procedure Call & Windows Remote Management)

    Description & Ports: Microsoft RPC is a core Windows service for inter-process communication over a network ‚Äì used by many Windows services. It utilizes TCP 135 (RPC Endpoint Mapper) and then random high ports for actual communication
    hackviser.com
    hackviser.com
    . WinRM is a specific service/protocol (Microsoft‚Äôs implementation of WS-Management) that allows remote management via SOAP, commonly used for PowerShell Remoting. WinRM listens on TCP 5985 (HTTP) and 5986 (HTTPS)
    hackingarticles.in
    . Both RPC and WinRM are often in scope for lateral movement and should be tested on internal assessments.

    Enumeration: For MS RPC, use rpcclient (from Samba suite) to enumerate information via null session: e.g., rpcclient -U "" <target> with no password can sometimes connect and run queries like srvinfo, enumdomusers
    hackviser.com
    hackviser.com
    . This can reveal users or share names if null sessions are allowed. Also use Nmap scripts such as msrpc-enum to find available RPC services
    hackviser.com
    . For WinRM, check if the ports 5985/5986 are open. You can attempt a connection using Evil-WinRM or PowerShell (Enter-PSSession) if you have credentials. Without creds, not much is exposed on WinRM (it will refuse connection). Nmap doesn‚Äôt have a specific WinRM script, but you can treat it like an HTTP service (it returns an HTTP SOAP endpoint). Also, query Active Directory for the servicePrincipalName of WinRM (HTTP/WSMAN) to see which machines have it enabled.

    Common Vulnerabilities: The RPC Endpoint Mapper itself is not usually exploitable, but misconfigurations like enabled NULL sessions on IPC$ allow an attacker to gather a lot of info via RPC calls (SAMR, LSARPC interfaces can leak user/group listings and policy settings)
    hackviser.com
    . Past exploits like MS08-067 (Conficker) targeted the RPC service on 445 (SVCHOST via SMB)
    hackviser.com
    ; ensure systems are patched. For WinRM, the primary risk is weak credentials ‚Äì WinRM can be brute-forced or attacked with pass-the-hash if not protected, since it often allows domain credentials login. Also, older WinRM services might not enforce encryption on 5985 (HTTP), meaning an attacker who intercepts traffic could potentially see data (but intercepting is hard on switched networks). A subtle issue: if an attacker has a hash, they can authenticate to WinRM with NTLM (evil-winrm supports pass-the-hash), so any captured credentials may immediately facilitate lateral movement via WinRM. There aren‚Äôt many ‚Äúexploits‚Äù for WinRM itself; it‚Äôs about configuration (e.g., allow unencrypted auth, or reused local admin creds).

    Tools & Techniques: rpcclient and CrackMapExec are great for RPC enumeration. For example, CrackMapExec can use RPC to enumerate users (--users flag) or even dump SAM hashes if certain services are exposed. Metasploit modules like auxiliary/scanner/dcerpc/endpoint_mapper can list RPC services
    hackviser.com
    . To test WinRM, Evil-WinRM is the go-to tool ‚Äì with valid creds (evil-winrm -i <IP> -u <user> -p <pass> or -H <NTLM hash>), it gives an interactive PowerShell session. For brute force, Hydra can target WinRM (use the http-form module or a dedicated script) and Ncrack has a WinRM module as well. Always consider account lockout policies when brute forcing domain services like WinRM.

    Post-Exploitation: RPC: If you‚Äôve leveraged RPC to gain a shell (for instance, through MS08-067 exploit or by using RPC to start a service via svcctl pipe), you likely have Windows system access. RPC access to the Service Control Manager (svcctl) interface allows you to create or start services remotely ‚Äì a common technique for executing payloads on Windows. RPC‚Äôs SAMR interface, if accessible, lets you enumerate or even modify user accounts (in some cases create accounts or change passwords) ‚Äì but by default Windows restricts this to authenticated users. WinRM: Gaining WinRM access is akin to getting a remote PowerShell shell with the user‚Äôs privileges. From there, an attacker can run PowerShell scripts for further attacks (e.g., deploy Mimikatz to dump credentials from LSASS) and use the host as a jump box. WinRM is often enabled on servers and sometimes on workstations in domain environments, so it‚Äôs a prime method for lateral movement. Attackers with WinRM access can easily automate actions across many systems (using a tool like CrackMapExec to spray commands via WinRM). Because WinRM uses HTTP(S), it may bypass some network restrictions that would block SMB or RDP. In summary, compromising WinRM on a host means full command execution on that host, and compromising RPC can range from information disclosure to full remote code execution depending on which interface and rights are obtained
    hackviser.com
    .

Telnet

    Description & Ports: Telnet is a legacy protocol for remote command-line access, operating over TCP 23. It provides no encryption. Telnet is largely replaced by SSH, but on internal networks, you might still find telnet on network devices, older Unix systems, or embedded systems.

    Enumeration: Simply connect using a telnet client (telnet <IP> 23) to see if the service banner appears
    osintteam.blog
    . The banner may divulge the OS or device type (for example, a Cisco router might say ‚ÄúCisco IOS‚Äù in the banner). No banner or just a blank screen indicates you might need to press enter ‚Äì if it‚Äôs waiting for login, you‚Äôll see a prompt like ‚Äúlogin:‚Äù or ‚Äúusername:‚Äù. You can also use Nmap; its service scan can identify Telnet and sometimes grab the banner.

    Common Vulnerabilities: Unencrypted credentials ‚Äì anyone who can sniff traffic (e.g., on the same network segment) can read usernames/passwords sent over telnet. More directly in pentesting, default credentials are a big issue on telnet services (network gear often has defaults like admin/admin or cisco/cisco). Also, some systems have no authentication at all on telnet (rare, but in lab scenarios or misconfigs it happens). Because telnet is old, some implementations have known exploits (e.g., a buffer overflow in some telnet daemons), but these are less commonly targeted compared to simply logging in with creds. Another vulnerability is that telnet might allow tty capture ‚Äì but that‚Äôs more of an information leak (e.g., some devices show last logins or failed attempts on banner).

    Testing Techniques: Try commonly used logins if a prompt appears. Hydra supports telnet brute force (hydra -t 4 -l <user> -P passwords.txt telnet://<IP>) for devices that don‚Äôt lock out. Note: many network devices won‚Äôt lock telnet but may have a backoff delay. Use Nmap scripts like telnet-brute for an automated approach, and telnet-encryption to see if STARTTLS is supported (usually not). Manually, just attempt to login and see responses; some devices disclose valid usernames by different prompts or error messages, aiding username enumeration.

    Post-Exploitation: A successful telnet login gives you a shell (or device CLI) on the target. From there, it‚Äôs equivalent to having SSH or console access at that privilege level. You can attempt to escalate privileges if not already admin. On network devices, you might enter enable mode (which may require another password). Because telnet is interactive, any post-exploitation is manual: running commands to gather information, adding backdoor accounts, or changing configurations. For example, on a switch or router, an attacker could reconfigure routing or dump the config (which contains password hashes) after telnetting in. If it‚Äôs a Linux/Unix system, you have a shell to run typical post-exploitation scripts (though older systems might not have modern tools). One notable aspect: because telnet is cleartext, any keystrokes you send are observable if someone is sniffing ‚Äì this usually isn‚Äôt a problem after you‚Äôve exploited it (since you presumably have network access already), but it‚Äôs a consideration if there are network monitoring systems. In summary, compromising telnet means an immediate foothold on that system, which you can use to pivot or harvest data. It‚Äôs straightforward but should be used carefully due to lack of encryption
    osintteam.blog
    .

NFS (Network File System)

    Description & Ports: NFS allows file sharing in UNIX/Linux environments, enabling clients to mount remote directories over a network. NFS typically uses TCP/UDP 2049 for the NFS service
    hackviser.com
    , and port 111 (RPCbind/Portmapper) to negotiate connections. Internal networks may use NFS for shared storage or home directories on Linux servers.

    Enumeration: Query the NFS exports list. Use the showmount utility: showmount -e <server> will list exported NFS shares (and which hosts are allowed to mount them)
    hackviser.com
    . Nmap has an nfs-showmount script to do the same. Also, check RPCbind (port 111) with rpcinfo -p <server> to see if nfs is an active service. Once you identify shares, you can attempt to mount them using the mount command (mount -t nfs <server>:/share /mnt/nfs), possibly with the nolock option if no RPC lockd. Even if you lack root on your attacking machine, you can specify a local UID to use (NFS trusts client UIDs unless root squashing is in effect).

    Common Vulnerabilities: Inadequate export restrictions ‚Äì for example, an NFS share exported to the world (*(rw) in /etc/exports) allows anyone to mount it
    hackviser.com
    . This is a severe misconfiguration that testers look for. Another is exports that are read-only but contain sensitive info. Also, if the share is exported without ‚Äúroot squashing,‚Äù an attacker mounting it as root on their machine can act as root on the NFS server files
    hackviser.com
    . This ‚Äúno_root_squash‚Äù scenario allows writing files as root on the server, potentially leading to remote code execution (e.g., placing an SSH authorized_keys or altering binaries). Additionally, older NFS versions (v2, v3) lack authentication and rely on client-side UID claims, which is inherently vulnerable if not on a trusted network. There aren‚Äôt typical ‚Äúexploits‚Äù for NFS daemons themselves in modern versions ‚Äì it‚Äôs usually these misconfigurations.

    Testing Tools: Use showmount for quick export enumeration
    hackviser.com
    . Nmap can also enumerate NFS with rpcinfo and nfs-ls scripts. To exploit, just use native mounting capabilities in Linux. If mounting is not possible (say, due to network restrictions), you can try the Metasploit module auxiliary/scanner/nfs/nfs_mount or ones like nfs_ls to read file listings remotely. rpcclient/rpcinfo can also be used to see mountd and nfs program info via RPC. Remember to check /etc/exports if you have shell on a Unix host ‚Äì it might show interesting info about NFS trusts.

    Post-Exploitation: If you successfully mount an NFS share, you can access and download any files in it (respecting the permissions it shows). This could expose confidential documents, config files with credentials, or scripts. In read-write cases, an attacker might plant an exploit: for instance, if an NFS share contains home directories, placing an authorized_keys in the .ssh of a user could give SSH access as that user
    hackviser.com
    . In a more dramatic scenario, consider an NFS share of /usr/local or similar ‚Äì an attacker could drop a Trojaned binary or script there, which gets executed by users. If root squashing is disabled on the export, the attacker mounting as root can create SUID files or modify root-owned files on the server through the share
    hackviser.com
    , leading to immediate root on the server. Even without write access, having read access to configs (like database configs with passwords, or backup files) can lead to other compromises. Another post-exploitation angle: an attacker could perform ‚ÄúPivoting‚Äù by using the NFS server as storage for tools or exfiltrated data, or even executing scripts via the share if the client executes them. Overall, NFS access can range from simply reading secret files to achieving full remote code execution on the server, depending on the scenario
    hackviser.com
    .

Kerberos

    Description & Ports: Kerberos is an authentication protocol used heavily in Windows Active Directory (and some Unix realms). It uses UDP (and TCP) 88 for the Key Distribution Center (KDC)
    hackviser.com
    . In a Windows domain, the domain controllers act as KDCs. Pentesters interact with Kerberos when performing attacks like AS-REP roasting, Kerberoasting, or golden ticket, all of which target the authentication system of AD.

    Enumeration: Identify Kerberos realms and accounts with Kerberos SPNs (Service Principal Names). In AD, any domain user can query the KDC for certain data. For instance, using Impacket‚Äôs GetUserSPNs.py to list SPN accounts that are kerberoastable
    hackviser.com
    hackviser.com
    . Or Kerbrute (or rubeus tool) to enumerate valid usernames via Kerberos (by attempting TGT requests and seeing which ones succeed or fail differently)
    hackviser.com
    . Also, ldapsearch on AD can find users with UF_DONT_REQUIRE_PREAUTH for AS-REP roasting. Observe network traffic on port 88 to see if Kerberos is in use (probably yes in AD). Nmap can check if port 88 is open, but more specific enumeration is via the above tools or directly via Windows commands like setspn -Q */* (if you have a foothold).

    Common Vulnerabilities: Kerberos itself is robust, but the usage in AD can be exploited via identity-based attacks. One is Kerberoasting ‚Äì any user can request a Kerberos service ticket for a service account, and if that service account has an SPN, the returned ticket is encrypted with the account‚Äôs password hash. Weak passwords on service accounts thus can be cracked offline
    hackviser.com
    . Another is AS-REP Roasting ‚Äì accounts with Kerberos pre-auth disabled will give you an AS-REP encrypted with the user‚Äôs password hash, again crackable offline. Credential reuse and weak passwords are the underlying issue in both cases. Additionally, if an attacker attains the krbtgt account hash (Kerberos Ticket-Granting Ticket service account), they can create Golden Tickets to impersonate any user
    hackviser.com
    . Old vulnerabilities like the ‚ÄúKerberos Bronze Bit‚Äù (CVE-2020-17049) or encryption downgrade attacks exist, but aren‚Äôt usually tested manually; instead, focus on misconfigurations.

    Testing Tools: Impacket suite is key ‚Äì GetUserSPNs.py for kerberoasting, GetNPUsers.py for AS-REP roast. Rubeus (on a Windows foothold) can perform these as well as pass-the-ticket. Mimikatz can be used for pass-the-ticket and golden ticket once you have necessary hashes
    hackviser.com
    hackviser.com
    . Kerbrute can brute force or enumerate users by attempting logons. Ensure not to accidentally lock accounts when spraying passwords ‚Äì Kerberos login attempts can lock AD accounts too. For password guessing, do slow and low (a few attempts per account)
    hackviser.com
    . Also consider using BloodHound to map AD trust relationships; it uses some Kerberos-based info (like which users have SPNs) in its data collection.

    Post-Exploitation: Once you have a foothold (say domain user creds), Kerberos attacks can escalate you to higher privileges. Kerberoasting: crack service account hashes to possibly retrieve a password of a user who is in a privileged group (many times service accounts might be domain admins or have local admin rights)
    hackviser.com
    . Pass-the-Ticket: with a user‚Äôs TGT or a harvested service ticket, you can authenticate as that user without their password
    hackviser.com
    . This can be done with Mimikatz (kerberos::ptt) injecting the ticket into your session. Golden Ticket: if you obtain the KRBTGT hash (e.g., by dumping the NTDS.dit or using Mimikatz on a DC), you can forge tickets that last essentially forever and grant domain admin access
    hackviser.com
    . Silver Tickets (for specific services) can be made if you compromise a service account hash; they allow persistent access to that service without touching the DC. On the defensive misconfig side: if LDAP signing isn‚Äôt required, an attacker with a machine-in-the-middle can potentially tamper with Kerberos data (but that‚Äôs complex). In summary, Kerberos attacks often follow an initial compromise and are used to snowball into full Domain Admin control. A successful Kerberos exploitation (like golden ticket) is effectively game over for the domain ‚Äì the pentester can impersonate any user and maintain access indefinitely.

DHCP (Dynamic Host Configuration Protocol)

    Description & Ports: DHCP automatically assigns IP addresses and network configuration to clients. It uses UDP 67 (server) and 68 (client) ports. Internally, DHCP is critical for network connectivity of endpoints. While not a typical ‚Äúattack service‚Äù in terms of exploitation, it can be abused for network attacks.

    Enumeration: There‚Äôs not much to enumerate with DHCP on a connected network beyond identifying the DHCP server. However, using tools like Wireshark or tcpdump in span mode, you could catch DHCP traffic. From an active standpoint, you can use Nmap‚Äôs DHCP discovery script (broadcast-dhcp-discover) to solicit a DHCP offer and see the DHCP server‚Äôs response (reveals IP of server, scope info, DNS servers, etc.)
    secybr.com
    . If you‚Äôre plugged into a network and you can run a rogue DHCP client, simply releasing and renewing your IP might give details about the DHCP server (like its address and domain info).

    Common Vulnerabilities/Misconfigs: Unauthorized DHCP servers (Rogue DHCP) ‚Äì an attacker can introduce a rogue DHCP server in the network. If they succeed, they can hand out IP configurations to other clients
    secybr.com
    . This can direct victims to malicious gateways or DNS (facilitating MiTM). Another vector is DHCP starvation: exhausting the DHCP server‚Äôs IP pool by flooding it with fake DHCP requests, causing a denial of service
    secybr.com
    secybr.com
    . Once the pool is exhausted, clients can‚Äôt get IPs, and the attacker can step in with a rogue DHCP to supply addresses. Also, some DHCP servers might have misconfigurations like overly long lease times or failover issues ‚Äì though those are more operational issues than attacker-exploitable. There have been a few DHCP server vulnerabilities (memory corruption in some implementations), but those are less common in pentest scenarios.

    Techniques & Tools: Yersinia is a tool capable of launching DHCP starvation and rogue DHCP attacks easily via a GUI
    secybr.com
    secybr.com
    . Responder (a popular LLMNR/NBTNS poisoner) also has a rogue DHCP mode (in DHCP.py)
    secybr.com
    ‚Äì after starving the real server, Responder‚Äôs DHCP can dish out rogue settings (like setting attacker‚Äôs machine as the DNS server or gateway). For manual testing, one could use scripts like dhcpig for starvation
    secybr.com
    . Monitoring: use ipconfig /all on Windows clients or dhclient logs on Linux to see what DHCP info is given ‚Äì this might reveal if multiple servers are responding (sign of rogue). Pentesters with access may also try to flood DHCP to see how the network handles it (though coordinate this ‚Äì it‚Äôs noisy and disruptive).

    Post-Exploitation/Pivot: Successfully performing a rogue DHCP attack can put the attacker in a Man-in-the-Middle position. By assigning themselves as the default gateway or DNS server to victims, the attacker can intercept traffic (e.g., use their machine to relay packets ‚Äì essentially a transparent proxy or do ARP spoofing as the gateway). For instance, giving out a fake DNS that resolves internal sites to the attacker‚Äôs IP for phishing. It‚Äôs a way to hijack network traffic of other clients. However, running a rogue DHCP in a live network can be detectable and may only work until the real DHCP responds (timing is key). Also, after a starvation attack, admins will notice clients losing network connectivity. If a pentester does gain MITM via DHCP, they could harvest credentials (like intercepting SMB traffic to capture hashes, similar to Responder‚Äôs typical usage) or quietly monitor sensitive data. In summary, DHCP attacks are all about network-level pivoting and denial-of-service, rather than stealing data from the DHCP service itself. Use them to position yourself to attack higher-value services (like intercepting authentication traffic on other protocols).

NTP (Network Time Protocol)

    Description & Ports: NTP is used to synchronize clocks of networked devices. It runs on UDP 123. Accurate time is crucial in Kerberos authentication, log integrity, etc. Many internal servers sync with an NTP server (often a domain controller in AD environments). While not a high-profile attack target, NTP can be leveraged in certain ways.

    Enumeration: Nmap has an ntp-info script which can fetch NTP system info (like the time, reference clock, etc.)
    hackviser.com
    . You can also manually query NTP with ntpq -p <server> to get a list of peers and time sources
    hackviser.com
    . Older NTP versions supported the MON_LIST feature which allows retrieving a list of recent clients (‚Äúmonlist‚Äù). Checking if monlist is enabled: ntpdc -n -c monlist <server> can return up to 600 client addresses
    hackviser.com
    . This could leak info about what hosts have recently contacted the NTP server (potentially mapping internal clients).

    Common Vulnerabilities: NTP Amplification DDoS ‚Äì if the monlist command is enabled, an attacker can send a forged UDP request to the NTP server and cause it to flood a target with traffic
    hackviser.com
    . This is more of an external threat (and should be mitigated by disabling monlist or upgrading NTP). Internally, the bigger concern is time tampering: an attacker who can influence NTP could desynchronize clocks. For example, if an internal NTP server is poorly secured (e.g., allows unauthenticated time setting or is not using authentication), an attacker could attempt to change the time on critical systems, potentially invalidating Kerberos tickets or confusing log timelines
    hackviser.com
    . NTP servers historically have had a few overflow vulnerabilities, but those are very old (pre-2010). Another misconfiguration: using public NTP without filtering could expose internal IPs via monlist to external observers (not relevant to an internal pentest except to note if open to internet).

    Testing Techniques: To test amplification/monlist, use ntpdc -c monlist. Modern NTP versions disable this, but some networks still run older ones. Monitor NTP traffic; sometimes the NTP version can be grabbed by a single UDP packet and seeing the response (e.g., Nmap‚Äôs script does this). If you have credentials or the NTP server uses symmetric keys (rare in enterprise), that‚Äôs beyond typical pentesting scope unless provided. Mostly, verify if NTP is properly secured: monlist disabled and not accepting control queries from unauthorized hosts.

    Post-Exploitation: If an attacker can modify the time on a system (for instance, by spoofing NTP responses if the server doesn‚Äôt have authentication), it could wreak havoc. Consider Kerberos: if you skew a domain controller‚Äôs clock by more than the allowed skew (usually 5 minutes), Kerberos auth in the domain might fail for all systems ‚Äì a potential denial of service. Or an attacker could set clocks back to an earlier date to make expired certificates appear valid or confuse log monitoring systems. From a persistence standpoint, messing with NTP is noisy and not usually an attacker‚Äôs first choice, but it might be used to cover tracks (e.g., invalidating log timestamps or causing log entries to have incorrect times). If the NTP server is compromised, an attacker can potentially supply wrong time to all clients ‚Äì in a test, you might demonstrate this as a finding (e.g., ‚Äúable to alter time sync, which can disrupt security protocols‚Äù). In essence, NTP on its own doesn‚Äôt give direct system access, but control of NTP can be used for impact (DoS) or as part of a larger attack (like replay attacks if time is turned back, or simply hiding actions by timestamp manipulation)
    hackviser.com
    hackviser.com
    .

SMTP/IMAP/POP3 (Email Services)

    Description & Ports: These are mail protocols. SMTP (Simple Mail Transfer Protocol) is used for sending email (TCP 25, and 587 for submission). IMAP (Internet Message Access Protocol, TCP 143 or 993 SSL) and POP3 (Post Office Protocol, TCP 110 or 995 SSL) are used by clients to retrieve email from servers
    hackviser.com
    . Internal networks may have Microsoft Exchange or other mail servers handling these protocols. They are crucial as they often hold sensitive communications and credentials.

    Enumeration: For SMTP, perform VRFY or EXPN commands to enumerate users if allowed: e.g., telnet <mailserver> 25 then VRFY alice
    osintteam.blog
    . A misconfigured SMTP might confirm if a user exists. Check if the SMTP server is an open relay by attempting to send a mail from an external domain to another external domain through it
    osintteam.blog
    . For IMAP/POP3, try logging in with common credentials (or just observe the banner: +OK Dovecot ready reveals the software). Nmap scripts like imap-brute or pop3-brute can be used to enumerate accounts by timing (some servers reveal if username is valid before checking password). Also, examine email server headers if you can send an email ‚Äì the headers often show internal IPs or software versions.

    Common Vulnerabilities: Open mail relay ‚Äì an SMTP server that allows anyone (unauthenticated) to send mail to external addresses is a vulnerability (can be abused for spam or phishing)
    osintteam.blog
    . User enumeration via SMTP is common: the VRFY/EXPN commands should be disabled on modern servers, but if enabled, they‚Äôll directly tell if an address is valid
    osintteam.blog
    . IMAP/POP3 vulnerabilities mainly revolve around weak credentials (since those protocols often allow basic auth). Many organizations still have users using simple passwords which can be brute-forced, granting mailbox access. On older services, there have been buffer overflow exploits (e.g., ancient versions of Microsoft Exchange‚Äôs IMAP or some POP3 daemons), but those are unlikely in a modern environment. Another aspect: if IMAP/POP are offered without SSL internally, an attacker in a man-in-the-middle position could sniff credentials (but internally, MiTM is non-trivial without already compromising something).

    Recommended Tools: Use smtp-user-enum tool or Metasploit‚Äôs smtp_enum to brute-force VRFY on SMTP for user listing
    osintteam.blog
    . For checking open relay, swaks (Swiss Army Knife for SMTP) is very handy to craft test emails
    osintteam.blog
    . For IMAP/POP3, Hydra can brute force logins (e.g., hydra -L users.txt -P pass.txt <IP> imap for IMAP)
    hackviser.com
    . Metasploit modules exist for pop3_login and imap_login as well. If Exchange is in use, OWA (Outlook Web App) might be an easier target for password spraying (via HTTPS) than raw IMAP. But testing IMAP/POP directly can reveal if legacy protocols accept weak creds (some orgs allow older, less secure auth for backward compatibility). Also consider using Responder or similar if SMTP is not locked down ‚Äì but usually, SMTP isn‚Äôt susceptible to NBNS spoofing, etc.

    Post-Exploitation: Gaining access to email accounts can be extremely fruitful. If you compromise a user‚Äôs mailbox via IMAP/POP, you can read sensitive emails, which often contain passwords, documents, or links to internal systems. You could also potentially pull off password resets for other systems ‚Äì many services send reset links via email, so owning email means owning those accounts. With SMTP access (if you found an open relay or got credentials to send as a user), you can perform sophisticated phishing or spoof internal communications. For instance, sending an email as a trusted user to trick another user. If the mail server itself is compromised (e.g., you got SYSTEM on an Exchange server via an exploit), that usually implies Domain Admin in a Windows environment because Exchange has high privileges. Additionally, emails can contain a trove of OSINT about the organization structure, ongoing projects (which you can leverage in social engineering during the test). On a simpler note, an attacker with IMAP access can set a forwarding rule to an external address, quietly exfiltrating all future emails
    hackviser.com
    . They could also delete certain emails to cover tracks. In summary, email services often contain the keys to the kingdom (credentials and sensitive info), so compromising them can quickly escalate the impact of a penetration test.

Redis/Memcached (Caching Services)

    Description & Ports: Redis is an in-memory key-value store often used for caching, messaging, or as a database. It usually listens on TCP 6379
    hackviser.com
    . Memcached is another high-performance memory caching system, default TCP/UDP 11211
    hackviser.com
    . These services often have no authentication by default, under the assumption they are accessible only on trusted networks ‚Äì which makes them high-value targets if exposed internally.

    Enumeration: For Redis, simply connecting via redis-cli without a password can tell if it‚Äôs unprotected. The INFO command will dump server info and stats. For Memcached, you can telnet <IP> 11211 and type stats to get information
    hackviser.com
    . stats items and stats cachedump can enumerate cached keys
    hackviser.com
    . Use Nmap‚Äôs redis-info or Metasploit‚Äôs Redis scanner to fetch info if needed. Both services often banner their version number on connection. Check if Redis requires a password (CONFIG GET requirepass or see if AUTH is needed ‚Äì if not, it‚Äôs wide open)
    hackviser.com
    .

    Common Vulnerabilities: Unauthorized access (no auth) is the biggest issue. Default Redis has no authentication requirement, so if it‚Äôs not bound to localhost or properly firewalled, anyone on the network can connect and issue commands
    hackviser.com
    hackviser.com
    . Memcached similarly has no auth and should not be exposed to untrusted clients
    hackviser.com
    . If accessible, an attacker can read and write cache data freely. This might include session tokens, cached passwords, or other sensitive info depending on what the application stores. Redis, in particular, can be turned malicious: you can configure it to write to the filesystem. A well-known hack is writing an SSH public key to the authorized_keys of the Redis user or writing a webshell to the web directory by misusing Redis persistence
    hackviser.com
    . Memcached‚Äôs main network vuln is DDoS amplification (sending small queries to get large responses ‚Äì relevant externally with UDP, but internally could be used to flood something). Also, a malicious actor could flush the cache (erasing keys) which might impact application performance or functionality (minor denial of service in terms of efficiency).

    Testing Tools: redis-cli is the go-to for Redis. Run INFO to get config and maybe find keys (if not protected by rename-command). You can also try KEYS * (though in newer Redis versions, that may be disabled for performance reasons). Hydra can attempt to brute force a Redis password if requirepass is set, but often there isn‚Äôt one. For Memcached, basic netcat or telnet is enough as mentioned. Nmap has memcached-info script that will grab stats and sample items. Metasploit has modules to check for Redis unauth access and even deliver payloads via Redis (there‚Äôs an exploit module to write a cron job via Redis RDB file).

    Post-Exploitation: An open Redis can lead to full system compromise. For example, an attacker can configure Redis to save DB to a file and set the file path to somewhere like /root/.ssh/authorized_keys, then write a key value that is their public key, and save ‚Äì voila, they can now SSH in as root
    hackviser.com
    . (This works if Redis runs as root, which is bad practice, or runs as another privileged user). Even if not root, they could drop a cron script in /etc/cron.d using the same technique to execute a reverse shell as root
    hackviser.com
    . If direct system compromise is not possible, just the data in Redis might be sensitive ‚Äì e.g., cached credentials, API tokens, session IDs (which could be used to hijack web sessions). Memcached exploitation is less direct ‚Äì you might retrieve sensitive cache entries (like user session data that includes passwords or personal info). And because Memcached allows arbitrary data storage/retrieval, an attacker could store tools or data there (stashing malicious payloads in memory). Also, retrieving all keys (stats cachedump) could leak intel about what applications are using (keys might have usernames or IPs in them). In a test, demonstrating the ability to dump credentials or impersonate users via stolen sessions from an insecure cache is high impact. Lastly, if Memcached is on UDP and not firewalled, an internal attacker could use it to amplify DDoS against internal targets as a demonstration (though that‚Äôs niche). The key takeaway: an exposed Redis/Memcached is like an unlocked safe ‚Äì it can be emptied and also used as a stepping stone to bigger things.

Citrix ICA/StoreFront

    Description & Ports: Citrix ICA (Independent Computing Architecture) is the protocol for Citrix virtual apps and desktops (XenApp/XenDesktop). ICA often travels over TCP 1494 and 2598 (for session reliability). StoreFront is the web portal (usually over 443 HTTPS) that Citrix users log into to access their apps. In a pentest, Citrix services provide remote application delivery ‚Äì an attacker might target them to either hijack sessions or enumerate sensitive information.

    Enumeration: Use Nmap to detect Citrix services. The citrix-enum-apps NSE script can enumerate published applications and desktops if the old Program Neighborhood interface (TCP 1604 or XML service on 80/443) is exposed
    infosecinstitute.com
    . On newer setups, the StoreFront web portal can be accessed via browser ‚Äì look for default URLs like https://<server>/Citrix/StoreWeb. Before login, not much is visible, but error messages might disclose version info or if the portal is Netscaler Gateway. Also, test for known default credentials on the management interfaces (Citrix ADC (NetScaler) admin console defaults, if in scope). Additionally, you can use Metasploit auxiliary modules for Citrix if available or the ctxxmlsvc enumeration for older Citrix XML services. If you obtain any valid AD credentials, try them on the Citrix web login ‚Äì weak password reuse might let you into the portal.

    Common Vulnerabilities: Session enumeration/exposure ‚Äì older Citrix implementations had an info leak where an unauthenticated query could list published resources (names of apps)
    infosecinstitute.com
    . Citrix StoreFront itself might have web vulnerabilities (there have been recent CVEs for XSS and such in StoreFront CVE-2023-5914
    assetnote.io
    ). The Citrix ADC (formerly NetScaler) had a notorious path traversal RCE (CVE-2019-19781) ‚Äì if the environment includes Citrix Gateway, that‚Äôs a critical external-entry vulnerability (though that‚Äôs on the perimeter typically). Weak credentials are a concern ‚Äì Citrix often ties into AD, so password complexity issues apply. Also, if users have Citrix access, it often implies privilege to certain apps ‚Äì so social engineering to obtain those creds might be easier (‚Äúlog in here for remote access‚Äù). Another vulnerability specific to Citrix Virtual Apps: if a published application is too permissive (like a published desktop or Explorer), users might escape the environment. As a pentester, if you can launch a less restricted application via Citrix (or manipulate an .ica file), you might escalate privileges on that Citrix server
    infosecinstitute.com
    . For example, published Explorer.exe could be manipulated to get a full desktop on the server (as shown by altering InitialProgram in an ICA file)
    infosecinstitute.com
    .

    Tools & Techniques: Citrix tools collection ‚Äì tools like ICA Browser or custom scripts (the links given in some resources
    infosecinstitute.com
    provide old scripts to enumerate apps). Use the Nmap citrix scripts as mentioned. Once you have an .ica file (which you get after authenticating to StoreFront and launching an app), inspect it for clues ‚Äì it contains the address of the Citrix server and the app published. You can try editing it (as in the Infosec example) to launch something else
    infosecinstitute.com
    . For credential attacks, treat StoreFront like any web login ‚Äì use Burp Intruder or Hydra (with http-post-form) to attempt password guessing, but be mindful of lockout. If a Netscaler VPN is in use, tools like patator or MSF auxiliary can attempt logins. Also, once on an internal network, consider using legitimate Citrix clients (Citrix Workspace app) to see if any Citrix services allow anonymous or guest access (rare). If you manage to man-in-the-middle an ICA connection (hard to do on switched network without ARP spoofing Citrix server), note that basic ICA is not encrypted by default (unless session encryption is configured), so theoretically one could capture keystrokes ‚Äì but this is more in a lab scenario.

    Post-Exploitation: If you gain access to Citrix-published apps (with valid credentials), it might not immediately give you OS-level access, but you can interact with applications. For instance, if a finance app is published and you log in as a user, you can use their access to data ‚Äì essentially leveraging authorized functionality. If you manage to compromise the Citrix server or get a full desktop session (through misconfiguration or by logging in with an admin account), that‚Äôs essentially another Windows server to own. Citrix servers are often multi-user Windows Terminal Servers, so compromising one may give access to data of users currently logged in or cached profiles. Also, from the Citrix server, you might pivot: it usually has connections to file servers, databases, etc., since it hosts applications. In the case of CVE-2019-19781 on ADC, post-exploitation was direct code execution on the appliance, often leading to system takeover and ability to pivot into the internal network from what was an external-facing device. In a less dramatic scenario, simply being on a Citrix desktop with user privileges could allow you to run internal port scans or attacks from that environment (assuming you have some file explorer or browser access via published apps). The bottom line: Citrix is about access aggregation ‚Äì once you have it, use it to either exploit the apps (steal data that the user has access to) or break out of restrictions to control the underlying server, which can lead to broader network compromise.

VMware Services (ESXi, Horizon)

    Description & Ports: VMware ESXi is a type-1 hypervisor for running virtual machines; VMware Horizon is a VDI (Virtual Desktop Infrastructure) platform. ESXi management is typically via vSphere on TCP 443 (and 902 for VM console, 22 for host SSH)
    hackingdream.net
    . Horizon exposes a connection server on 443 (and uses protocols like RDP/Blast on other ports). These services are less commonly misconfigured, but when they are, the impact is huge (owning an ESXi means owning all VMs on it).

    Enumeration: ESXi: Check for the web interface on port 443 ‚Äì connecting to https://<host>/ will either show the bare bones ESXi HTML page or a redirect to vCenter. The SSL certificate often has the hostname which can be useful. Nmap service detection might label it ‚ÄúVMware ESXi‚Äù. If SSH (22) is open on the host, it may allow key-based login or password login (though best practice is disabled). One crucial thing: ESXi doesn‚Äôt lock out root for failed logins and the root username is fixed
    hackingdream.net
    . So a pentester can attempt a brute force on ESXi host if SSH or the web UI is accessible. Horizon: It‚Äôs essentially a web portal ‚Äì enumerate it like a web app. The login page might say ‚ÄúVMware Horizon‚Äù. You can try default credentials (sometimes lab systems use administrator@vsphere.local with a weak password, or integration with AD means AD creds). Also, verify if the Horizon Connection Server‚Äôs administrative interface is reachable (often same URL but requires admin creds).

    Common Vulnerabilities: Weak credentials on ESXi: sometimes admins leave the root password as default or something guessable. Because of no lockout, this is dangerous
    hackingdream.net
    . ESXi had critical RCE vulnerabilities ‚Äì notably CVE-2021-21974 and related SLP service issues (OpenSLP heap overflow)
    hackingdream.net
    . If ESXi‚Äôs port 427 (SLP) is open, that‚Äôs a red flag (should be closed in latest versions)
    hackingdream.net
    . Another path is through vCenter: if testers find a vCenter Server (usually at 443, identifiable by /ui or /vsphere-client URLs), vCenter has had its share of RCEs (like CVE-2021-21985, a plugin RCE)
    hackingdream.net
    . For Horizon, vulnerabilities include authentication bypasses or exploits in the Windows broker (not as common, but e.g., CVE-2020-3947, an injection flaw). Also, older Horizon clients/agents have had issues. If Horizon is integrated with AD and you crack an AD user‚Äôs password, you might login to VDI as that user ‚Äì not a software vuln per se, but gets you an internal desktop.

    Tools & Techniques: For ESXi brute-force, a tool like ESXiBrute.py (referenced in hackingdream) can automate trying password lists against the ESXi API or SSH
    hackingdream.net
    . Metasploit has modules for some ESXi CVEs (like a Metasploit module for the OpenSLP RCE). If SSH is enabled on ESXi, normal SSH tools apply. Check ESXi version via the web UI or by using nc <host> 443 ‚Äì often the server responds with a VMware certificate revealing version. vCenter: try the default creds for the SSO domain (administrator@vsphere.local) if you suspect a lab environment. Also, if you have any Windows auth, see if vCenter is using Windows Integrated Auth. For Horizon, standard web app tests (SQLi, XSS) on the portal and a bit of login brute force (account lockout in AD will apply, so be careful). There‚Äôs also the vmware-view client which could be used to see available desktops if you have creds.

    Post-Exploitation: ESXi: If you gain root on an ESXi host, you effectively control all VMs on it. You can download VM disk files, modify VMs (e.g., insert a malicious ISO as CD-ROM to multiple VMs), or even plant backdoors in the hypervisor. An attacker could also shut down VMs or create new VMs as backdoors. It‚Äôs essentially full infrastructure control ‚Äì a big impact. If instead you compromise vCenter, that‚Äôs even more expansive: vCenter can manage all hosts and VMs, so Domain Admin of VMware infrastructure. Attackers could enable SSH on all hosts, deploy rogue VM appliances (maybe an ATT&CK box), or take snapshots of sensitive VMs to steal data. Horizon: If you get into the Horizon admin console (via a vuln or stolen admin creds), you could push out a trojaned VDI template or mess with users‚Äô desktops. If you simply get a standard user‚Äôs VDI session, treat it like compromising a workstation of that user ‚Äì proceed with typical internal recon and attacks from that VM. One subtle angle: if Horizon is not using MFA for external access, obtaining a single user credential can give you VPN-like access via VDI. As a pentester, demonstrating this risk (maybe by using a test user‚Äôs creds to connect through Horizon and then pivoting) can underscore the need for MFA. In summary, VMware services are usually well-protected, but any successful exploit or credential compromise amplifies quickly ‚Äì leading to broad access to systems (in case of ESXi/vCenter) or network (in case of Horizon, getting internal desktop access). Always emphasize the potential to impact multiple systems due to the centralized nature of these services.


ChatGPT can make mistakes. Check important info. See Cookie Preferences.
VDI/RDP Penetration Testing Breakout Checklist

Below is a comprehensive checklist of advanced breakout tests and checks for Virtual Desktop Infrastructure (VDI) and Remote Desktop Protocol (RDP) environments. The list is organized by category, covering Citrix, VMware Horizon, Microsoft Remote Desktop Services (RDS), and Azure Virtual Desktop ‚Äì for both native clients and HTML5/web-based clients. Each item represents a potential attack technique or configuration weakness to test. Experienced penetration testers can use this to ensure even deep or lesser-known vectors are examined.
Input/Output Channel Abuse

    Clipboard Redirection: Verify if clipboard sharing is enabled. Attempt to copy-paste text and images between the VDI session and the client. If allowed, test exfiltration by copying large data or binary payloads (e.g. base64-encoded files) via the clipboard
    pentestpartners.com
    . Reconstruct the data on the remote side to simulate file transfer via clipboard
    pentestpartners.com
    .

    Drive Mappings: Check if client drives are mapped into the VDI (e.g. ‚ÄúC on ClientPC‚Äù via RDP). If so, try accessing these drives from the VDI to read or write files on the client machine. This can reveal sensitive data or allow planting of malicious files on the client. If drive mapping is disabled by policy, attempt to bypass by using UNC paths (e.g. \\tsclient\C in RDP or network paths)
    infosecwriteups.com
    .

    USB Device Redirection: Determine if USB pass-through is permitted. Test connecting USB storage devices or HID (Human Interface Device) devices through the client. For storage devices, see if the VDI can read/write to them. For HID devices, try keystroke injection attacks (e.g. using a Rubber Ducky script) to simulate input
    pentestpartners.com
    . Also consider virtual devices: for example, emulate a serial port or printer device to pass through data
    pentestpartners.com
    .

    Audio Input/Output Channels: If microphone redirection is enabled, assess if audio can be recorded or exfiltrated from the client side. Conversely, test if you can play ultrasonic or encoded audio from the VDI to transmit data out (a covert channel). This is a niche vector, but it‚Äôs worth noting for completeness. Similarly, if webcam/video redirection is available, check if images or video can be captured from the client side through the virtual session.

    Smart Cards and Other Devices: If smart card redirection is in use (common for authentication), ensure that the session cannot misuse the connected smart card (e.g. to sign or decrypt data without user consent). Also, test any other redirected I/O channels such as clipboard formats (e.g. dragging files via clipboard, OLE copy-paste) or special devices (like Twain scanners or location/GPS data) if those are available in the VDI setup.

Protocol Handler & File Association Exploits

    Malicious URI Schemes: Within the VDI session, attempt to invoke various URI protocol handlers to escape the restricted environment. For example, clicking or launching a mailto: link might open the local email client (Outlook) if installed, potentially outside of restrictions. Try schemes like ftp://, telnet://, callto:, ms-settings:, etc., to see if an external application is called. Uncommon or unassociated protocols are especially useful ‚Äì e.g., using a fake protocol like irc:// in a browser‚Äôs address bar can prompt an ‚ÄúOpen with‚Äù dialog, letting you choose an application to handle it
    swisskyrepo.github.io
    . This can be leveraged to launch programs that would otherwise be disallowed (for instance, opening Firefox via a custom URI as shown in the irc example)
    swisskyrepo.github.io
    .

    shell: URIs: Test Windows shell protocol handlers. For example, shell:windows or shell:System in an Explorer or browser address bar may open Windows Explorer showing system directories
    swisskyrepo.github.io
    . Other useful shell URIs include shell:Common Programs, shell:Personal (Documents), shell:SendTo, etc., which might break out to the full shell or allow access to forbidden locations
    swisskyrepo.github.io
    .

    File Extension Associations: Attempt to place or download files with various extensions to see how the environment handles them. For instance, if you can get a .html or .url file into the session (via download or file transfer), double-clicking it might launch a web browser on the VDI. A .rdp or .ica file might trigger the native client. Similarly, a .docx file would open Word ‚Äì where you could then use macros (see Application Escape). Test ‚Äúsafe‚Äù file types as trojans for execution: e.g., rename an executable to .txt and see if you can still execute it by renaming it back via command prompt or an open dialog. Also, see if scripts (.vbs, .js, .hta) can run ‚Äì sometimes .hta (HTML Application) files are particularly powerful if not blocked, as they execute with mshta.exe outside the browser sandbox.

    Abuse Default Handlers via Browser: If a browser is available in the VDI, use it to download files of various types and choose ‚ÄúOpen‚Äù instead of Save. Many browsers will hand off the file to whatever the OS association is. For example, downloading a .txt might automatically open Notepad (allowed), downloading a .pdf opens a PDF reader, or an MSI installer might invoke the Windows Installer. This can bypass whitelisting ‚Äì e.g., Internet Explorer was known for allowing ‚ÄúRun‚Äù on downloads which could execute installer packages or scripts directly
    netspi.com
    . Verify if such behavior is possible and if the OS properly prompts or blocks it.

    RDP/ICA Customizations: If you have access to the launch files (RDP or ICA configuration files), try modifying them for advantage. In Citrix .ica files, for instance, there‚Äôs an InitialProgram setting ‚Äì changing this to cmd.exe or explorer.exe might give a shell instead of the published app (if server-side hardening is weak)
    pentestpartners.com
    . Similarly, test if RDP file settings (like drive redirections, window paths, pre-run commands) can be tweaked and re-used to your benefit when reconnecting to the host. These client-side config tweaks shouldn‚Äôt override server policy in a well-configured environment, but misconfigurations do happen.

Application Escape (Allowed Apps & Sandboxed Environments)

    Open/Save Dialog Breakout: The classic breakout method ‚Äì use any allowed application‚Äôs File Open/Save dialog to access the underlying system. In Notepad‚Äôs ‚ÄúFile > Open‚Äù or ‚ÄúSave As‚Äù dialog, try browsing to C:\Windows\System32 and launching cmd.exe (you can type C:\Windows\System32\cmd.exe into the filename field and hit Enter)
    infosecwriteups.com
    . Many dialogs also have a mini-Explorer interface; for example, right-clicking a file in the dialog and selecting ‚ÄúOpen‚Äù or ‚ÄúOpen in new window‚Äù can spawn a full Windows Explorer
    infosecwriteups.com
    . Test these in all available apps (e.g. Word, Excel, browsers, PDF readers).

    Right-Click Context Tricks: In file dialogs or limited explorer views, use context menus. For instance, create a new file via right-click (text file) and then rename it to .bat or .cmd, then Edit and Open it
    infosecwriteups.com
    . Or create a shortcut (right-click > New > Shortcut) pointing to %WINDIR%\system32 ‚Äì then right-click that shortcut and view Properties > Open File Location, which can drop you into System32 or other locations
    infosecwriteups.com
    . These techniques often yield a normal Explorer window or command prompt.

    Whitelisted Application Abuse: Identify which applications are permitted in the environment (the ‚Äúwhitelist‚Äù). Common ones might be Office apps, browsers, Adobe Reader, or line-of-business apps. Leverage their functionality to escape:

        Office Macros: If Word/Excel are available, enable the Developer mode or VBA editor. Create a macro that launches a shell (e.g., using Shell("cmd.exe") in VBA) or downloads and executes a payload. Even if direct cmd.exe is blocked, you might use powershell within VBA (via CreateObject("Wscript.Shell")). In a real-world case, testers used Excel with a macro to inject shellcode into the Excel process (since Excel is whitelisted)
        tarlogic.com
        . This provided a reverse shell despite restrictions.

        Office DDE/OLE: Apart from VBA, test Dynamic Data Exchange in Office or linking an object (like embedding a link to a CMD shortcut in a Word doc).

        Allowed Utilities: Sometimes admin tools are overlooked by restrictions. Try running built-in Windows utilities that might be present: Task Manager (Ctrl+Shift+Esc), Microsoft Management Console (mmc.exe), Registry Editor (regedit), Task Scheduler (taskschd.msc), etc. Many of these can be started via the dialogs or via Ctrl+R (Run) if that works. For example, taskmgr.exe might be callable and then from Task Manager you can File > Run new task for any program
        swisskyrepo.github.io
        . Poke around for any pre-installed tools; PTP provides a list of useful binaries like control.exe, eventvwr.exe, msinfo32.exe, etc., which might be accessible
        pentestpartners.com
        pentestpartners.com
        .

        Default Browser/Email Client: If a mail client (Outlook) is available, see if you can attach or save files freely, or use Outlook Forms/macros for code execution. If a browser is present, see Browser Escapes below.

    Printing Dialog Abuse: Even if direct disk access is blocked, the Print dialog can sometimes act as an alternate file browser. Choosing ‚ÄúPrint to file‚Äù (XPS or PDF printer) will open a dialog to choose output location
    pentestpartners.com
    . This dialog might allow browsing the file system as well, similar to Save As. It‚Äôs another path to reach a filesystem view or to create files in arbitrary locations (which you can later try to execute).

    Help and Accessibility Features: Use help menus or accessibility tools to break out. Pressing F1 in some applications opens the Windows Help, which often has a ‚ÄúJump to URL‚Äù or similar functionality ‚Äì potentially allowing launching of Internet Explorer or opening a web page (which then can access local resources)
    infosecwriteups.com
    . Likewise, accessibility shortcuts: e.g., hitting Shift 5 times for Sticky Keys ‚Äì if not disabled ‚Äì pops up a help dialog; often there‚Äôs a link in that dialog that opens a file explorer or web page
    netspi.com
    . Test On-Screen Keyboard (osk.exe) or Magnifier; sometimes these tools are allowed and have file open dialogs or other loopholes. (If the environment is very locked down, accessibility features might be disabled, but worth checking).

    Third-Party Apps: If the VDI provides any third-party or custom apps, analyze their functionality for potential escape hatches. For example, an internally developed tool might have an option to export or import data ‚Äì which could allow writing to the filesystem or launching an external editor. Even something like a PDF reader‚Äôs ‚ÄúOpen‚Äù or a media player‚Äôs ‚ÄúOpen File‚Äù can be misused to get a browse dialog.

Browser-Based Escapes (within the VDI Session)

If a web browser is accessible inside the virtual desktop environment (or if the published application is a browser), treat it as a gateway to the underlying system:

    Local File Access via Browser: In the browser‚Äôs address bar, try entering local filesystem paths. For example, C:\ or file://C:/Windows and similar
    swisskyrepo.github.io
    . Internet Explorer and some other browsers will display folder contents or at least attempt to open Explorer for those paths
    netspi.com
    . This can directly give a view of the filesystem. Also test special locations: e.g., navigate to file://%USERPROFILE% or file://127.0.0.1/C$ (UNC loopback)
    swisskyrepo.github.io
    . These can bypass certain path restrictions by using alternate notations.

    Browser Functions & Menus: Leverage integrated menu options. For IE, the menu bar (File, Edit, View, etc.) might have entries like ‚ÄúSave As‚Äù (which gives a dialog), ‚ÄúImport/Export‚Äù (which might allow file system access), or View Source (which opens Notepad ‚Äì an allowed app). Right-click context menus in IE often have ‚ÄúView source‚Äù or ‚ÄúInspect element‚Äù ‚Äì these might invoke an editor or developer tools. Check if developer tools (F12) are accessible; if so, you might be able to execute JavaScript to call ActiveX objects or WScript from the console to get system access (older IE versions are notorious for this level of OS integration).

    Downloading and Running Content: Use the browser to pull in potentially exploitable content. For instance, host a known exploit (like an HTA or a Java applet if the browser supports it) on an external site and browse there. In a locked environment, direct internet might not be available, but if it is, this is essentially using client-side exploits to compromise the VDI. Even without an exploit, downloading various file types as noted earlier (like .msc, .lnk, .reg) and opening them can execute actions via the browser. iKAT (Interactive Kiosk Attack Tool) is a classic web app specifically made for this purpose ‚Äì it provides a menu of breakout techniques through a browser interface
    netspi.com
    netspi.com
    . If you can browse to the iKAT page (or a similar toolkit), it automates launching common dialogs, writing files, etc., via the browser.

    Browser Plugins/Extensions: Identify if plugins are present (Flash, PDF, Java, etc.). These have their own sandbox escape histories ‚Äì for example, an old PDF reader plugin exploit could yield code execution on the VDI. Even without known exploits, PDF readers often allow opening or saving PDFs to the file system; a crafted PDF might use the /Launch action to run a command. Test the behavior of opening various embedded links in PDF or Office documents if the browser hands those off.

    Kiosk Mode Bypass: If the browser is in a ‚Äúkiosk‚Äù or hardened mode (common in published browser scenarios), attempt common bypasses. E.g., pressing Alt+Tab or Ctrl+N to spawn new windows, trying Ctrl+O (Open dialog), F11 (toggle full screen, sometimes reveals a toolbar), or known browser-specific shortcuts. In Edge/Chrome kiosk, sometimes printing (Ctrl+P) can open a system Print dialog that leads to file system access. Also try Alt+F4 to see if you can close the browser and what happens afterwards ‚Äì occasionally, closing a published browser might drop you to a desktop or allowed applications list inadvertently.

    Dev Tools in HTML5 Clients: If the user‚Äôs client to the VDI is a browser (HTML5 client), consider that you can use your own browser‚Äôs dev tools to manipulate the session. While this is outside the VDI itself, it‚Äôs an important vector: for instance, intercept or modify WebSocket messages between the HTML5 client and server to bypass restrictions (perhaps enabling file transfer or clipboard that was disabled in the UI). You might find hidden API endpoints or admin functions in the web client‚Äôs JavaScript. Although not an attack from inside the VDI, it‚Äôs a client-side test that can reveal weakness in how the web client is implemented (e.g., an XSS in the web client could allow an attacker to hijack someone else‚Äôs VDI session if they share a URL, etc.). Ensure any HTML5 portal is tested for typical web vulns (XSS, CSRF, open redirect) that could impact the VDI usage.

URL Invocation Exploits

These overlaps with protocol handlers, but focus on how URLs and UNC paths can be invoked from within the session to perform unintended actions:

    UNC Path Injection: In any application that accepts input, try feeding UNC network paths (\\attacker-PC\share or \\127.0.0.1\C$). Many file selection fields or even some application text fields will attempt to resolve UNC paths
    infosecwriteups.com
    . This can do two things: trigger an authentication attempt (capturable via SMB Relay/NTLM capture if going to an attacker server), or possibly open a file browser to that location. For example, in the Notepad dialog or Windows Run, typing \\127.0.0.1\C$ might show the C drive if you have rights
    swisskyrepo.github.io
    . Typing a UNC to an external server you control will prompt the VDI to send credentials ‚Äì a potential hash leak to crack or relay.

    file:// URLs: Similar to entering in a browser, many apps will handle file:// URIs. If you can open an app‚Äôs hyperlink feature (like inserting a hyperlink in Word, or some apps have ‚Äúopen link‚Äù capabilities), try file://C:\Windows\System32\cmd.exe. Internet Explorer will also navigate to file URLs and show folder content or launch associated apps. This is a quick way to trigger the system‚Äôs default file handler outside of the locked interface
    swisskyrepo.github.io
    .

    smb:// or WebDAV: On some systems (particularly if using a Linux-based thin client or certain browsers), using smb:// might initiate an SMB connection. Generally on Windows, file:// with UNC covers this. Also test dav:// or http:// in contexts where the app might try to fetch a file (some programs allow opening files from URLs, which could be used to pull in a file from the internet or a WebDAV share, bypassing download restrictions).

    Custom URL Protocols: If specific software is installed, there might be custom URL handlers. For example, if VMware Horizon client or Citrix Receiver is installed inside the VDI (not typical, but possible), one could abuse vmware-view:// or citrixworkspace:// links. More practically, if Microsoft Teams or OneDrive is in the VDI, their URL handlers (msteams://, onedrive://) could do something interesting. Test anything that the user environment might have registered.

    Shell URL Handlers: Windows has a lot of weird built-in URI schemes beyond shell:. For instance, try ms-settings:, calculator:, ms-officeapp:, etc., if applicable. Even the Telnet handler (if telnet client is installed, telnet://1.2.3.4 would launch telnet.exe) can be used to start an application (though telnet.exe by itself is limited to connecting to a host, it‚Äôs still an exe running which might be leveraged for file transfer or as a pivot).

    Chained Protocols: A very advanced trick is using spaces in a URL to pass parameters to the handler
    swisskyrepo.github.io
    . For example, a URL like something://127.0.0.1/a" "b" might, when an application is chosen to handle something: scheme, interpret a and b as separate arguments. This is highly application-specific, but if you get an ‚ÄúOpen with‚Äù prompt, you might try to craft the string to include command-line args for the chosen program.

Lateral Movement Potential (Internal Pivoting from VDI)

    Network Scanning & Pivot: Once inside a VDI session, treat it as an internal foothold. Use whatever tools are available or can be transferred to map out the internal network. Even basic commands like ping (for common hosts), net view/net use for discovering shares, or PowerShell one-liners to scan port ranges can be attempted. Many VDI subnets have access to production networks. The VDI can be an entry point into the broader network
    netspi.com
    , so test what an attacker could reach: internal web apps, databases, file servers, etc., that the VDI user‚Äôs network access allows.

    Credential Gathering: Dump credentials and session info if possible. If you manage to launch PowerShell or other tools, attempt to extract credentials with tools like Mimikatz (bearing in mind many modern VDIs have AV/EDR). Check for stored credentials: Windows Credential Manager (rundll32.exe keymgr.dll,KRShowKeyMgr opens it
    pentestpartners.com
    ), browser-saved passwords, or plaintext creds in config files. Domain credentials obtained here can be used to move laterally to other systems.

    Reuse of VDI Credentials: Test if the user‚Äôs AD account has privileges elsewhere. For example, if the VDI user is a standard user, they usually shouldn‚Äôt have admin rights on servers. But in some cases, VDI users might be local admins on their own virtual desktop ‚Äì and if those desktops are reused or templated, maybe the same local admin cred is on many of them. Also, see if the account can access any network shares (run net use \\server\share with common server names or those discovered). Sometimes, mapping a drive may succeed even if the VDI environment intended to block data transfer (this would be a policy misconfig).

    Remote Desktop/Management Tools: See if you can initiate outbound RDP or other remote management from inside the VDI. The presence of mstsc.exe (the RDP client) on the VDI allows connecting to other machines if network allows
    pentestpartners.com
    . Test connecting to known internal IPs or hostnames (maybe obtained from ipconfig /all for DNS suffixes). If successful, this could allow you to jump to another desktop or server (credentials needed, unless you find an open RDP with NLA off ‚Äì unlikely internally, but check). Similarly, if SSH clients or other tools exist on the VDI, attempt to use them.

    Multi-User Environments: If the VDI is actually an RDS (Remote Desktop Session Host) with multiple user sessions on one server, check for ways to interact with other sessions. For instance, qwinsta and msg commands can show other logged-in users and even send them messages
    pentestpartners.com
    . In outdated systems, there were bugs where a non-admin could sometimes shadow another user‚Äôs session or hijack it ‚Äì ensure that‚Äôs patched. If you gain admin on an RDS, you can definitely spy on or control others (which might be out of scope depending on rules, but it‚Äôs a risk to note).

    Inter-VM Movement: In a cloud VDI scenario (like Azure Virtual Desktop), the host VMs might be on an Azure virtual network. If you compromise one VM, see if you can reach others (other session hosts, file servers, domain controllers in that VNet). Also, check if any management interfaces are accessible: e.g., Azure Instance Metadata service at http://169.254.169.254/ (which could give Azure-specific tokens if not blocked). In on-prem VDI, see if you can reach the virtualization infrastructure (vCenter, Citrix Delivery Controller, etc., if they‚Äôre on the network). Accessing those could yield further breakout (like compromising the hypervisor or VDI controller).

    Leverage Shared Resources: Often VDI users have access to shared corporate resources like intranet sites or databases by virtue of being on the network. Use the foothold to enumerate those. For example, try connecting to the company SQL server (if known) using Windows auth ‚Äì maybe the user has read access to some DB that contains sensitive info. Or abuse trust relationships: if the VDI is in a less monitored segment, an attacker could use it to stage attacks (like ARP spoofing inside that network segment, if not prevented).

Privilege Escalation & Configuration Flaws in VDI Hosts

    VDI Agent/Software Vulnerabilities: Identify the VDI-specific software on the machine (Citrix Virtual Desktop Agent, VMware Horizon Agent, etc.) and check for known privilege escalation vulnerabilities. For example, Rapid7 recently discovered a Citrix Virtual Apps and Desktops flaw where a handle from a SYSTEM process was accessible in a user process, allowing a user to spawn a SYSTEM shell
    rapid7.com
    rapid7.com
    . Test for such issues by hunting for processes running as SYSTEM that you can interact with. Similarly, older VMware Horizon agents had issues with insecure file permissions (CVE-2020-3961) leading to DLL hijacking. If the environment isn‚Äôt fully up-to-date, these are ripe for exploitation.

    Services and Drivers: Enumerate services (sc query state= all) and drivers on the VDI host. Look for those running with high privileges that have configurable paths or unquoted service paths, weak file ACLs, or vulnerable binaries. For instance, see if the ‚ÄúCitrix HDX‚Äù or ‚ÄúVMware View‚Äù services can be tampered with. Also, some VDI setups might use things like AppSense, Ivanti, or other user environment managers ‚Äì check those for misconfigurations (they often run as system to manage user sessions).

    Misconfigured Privileges: Determine if the VDI user has more rights than intended. Are they local admin? (They shouldn‚Äôt be, but check whoami /groups to be sure.) Are any powerful local groups (Remote Desktop Users, etc.) mis-assigned? Also, check if UAC (User Account Control) is enabled and at what level ‚Äì a common misconfiguration is leaving UAC at default on a jump box or VDI where the user has some admin rights, allowing easy bypass. If the machine is part of a Windows domain, see if any local Group Policy allows privilege elevation (e.g., check WSUS or LAPS misconfigs, though those are less likely on a VDI).

    AppLocker or SRP Bypass: Many locked-down desktops use AppLocker or Software Restriction Policies. Enumerate the rules if possible (via powershell Get-AppLockerPolicy -Effective or checking registry). Then try known bypass techniques: e.g., if only signed binaries run, can you run installutil.exe or msbuild.exe with a malicious DLL (LOLBin abuse)? Or use rundll32 to run code from memory ‚Äì a lot of AppLocker configs forget to block rundll32, which can be used in creative ways
    pentestpartners.com
    pentestpartners.com
    . Another trick: see if you can copy an allowed binary to a new location and have it still run. If only specific paths are blocked, maybe running from %PROGRAMDATA% works. This is very environment-specific, but important for escalation.

    Schedulable Tasks and Missing Patches: Check if you can create scheduled tasks (at or schtasks) ‚Äì sometimes standard users can if the security policy isn‚Äôt tight, and that can be used to run as System (older Windows had some loopholes here). Also inspect if the OS is missing privilege-escalation patches (e.g., older Windows 10 builds susceptible to known LPE exploits like PrintNightmare, et al.). If in scope, safely attempt those exploits to escalate.

    Default Credentials & Passwords: It may sound basic, but also check for any default or weak credentials in the VDI environment
    pentestpartners.com
    pentestpartners.com
    . For instance, test if ‚ÄúAdministrator‚Äù or local admin accounts have trivial passwords (maybe the golden image had a known password?). This also includes checking for hard-coded creds in scripts or config files on the VDI.

File and Print Redirection Edge Cases

    Clipboard File Transfer: In some cases, RDP allows file copy via clipboard (not just text). Test if you can copy a file to clipboard on the client and paste it in the VDI (or vice versa). If enabled, treat it as a direct file transfer channel. If it‚Äôs supposed to be disabled, see if any trick re-enables it. For example, some HTML5 clients might allow drag-and-drop of files into the browser which then uploads to the VDI ‚Äì try dragging a file into the session window to see if an upload dialog appears.

    Client Printers (Print Redirection): If RDP or Citrix is set to redirect printers, the VDI will ‚Äúsee‚Äù the client‚Äôs printers. This can be abused in a couple ways. First, the print spooler on the VDI might try to use the client‚Äôs print driver. A malicious driver on the client or a malformed response could exploit the server‚Äôs spooler (this is the basis of some PrintNightmare scenarios). As a test, you likely won‚Äôt actually run a malicious driver, but check if the spooler service is running and if client printers show up ‚Äì if yes, flag that outdated drivers or spooler vulns could compromise the server. Second, if you can print from VDI to a file on the client (like Microsoft Print to PDF on client), see if that file actually gets created on the client side. That would be an exfiltration route: you ‚Äúprint‚Äù sensitive info and it‚Äôs saved on your local disk outside the VDI.

    Virtual Printers and PDF Writers: The presence of a PDF printer (e.g., CutePDF, Adobe PDF, or Microsoft Print to PDF) inside the VDI can allow writing files even if other avenues are locked. Printing a sensitive document to PDF generates a file on the VDI‚Äôs disk (usually in user Documents). From there you still need to get it out, but if other channels (like OneDrive sync or email) are open, it‚Äôs easier to send a PDF than perhaps the original data. Also, check if any mapped network printers can be used to drop files ‚Äì e.g., printing to an XPS on a network share.

    Client Drive Mapping via RDP: As mentioned in I/O abuse, if client drives are mapped, ensure to test read/write both ways. For web clients, check if they provide an ‚ÄúUpload/Download file‚Äù UI (many HTML5 remote desktop clients have an option to transfer files). Abuse that by attempting to upload a large or dangerous file (to see if filtered) and download sensitive files from the VDI to your local machine. Sometimes these web transfer tools bypass corporate DLP since they ride inside the virtual session‚Äôs allowed channels.

    Copy/Paste Formatting: Even if straight copy/paste is disabled, certain formatted data might slip through. For instance, copying a screenshot via clipboard (PrintScrn in RDP might send an image to the client clipboard
    pentestpartners.com
    ) ‚Äì test if you can take a screenshot of the VDI and paste it on the client. Conversely, see if rich text or objects copied from client (Excel tables, etc.) can be pasted, as those might embed files. It‚Äôs a stretch, but worth checking if the clipboard filtering is granular or not.

    Mapped Network Drives: If the user has network drives (to file servers, SharePoint, etc.) mapped inside the VDI, consider them in scope for data exfiltration. You might not be able to directly touch the client file system, but a network drive could allow you to drop data that persists or is accessible elsewhere. Also test if you can create malicious shortcuts or files on those drives that other users might click (leading to further compromise).

    Edge-case Channels: RDP and Citrix have other redirection features like audio recording, smart card, plug-and-play devices, etc. While these typically don‚Äôt allow file transfer, think creatively: e.g., Audio recording ‚Äì could you synthesize a WAV that contains encoded data and have the client record it? Smart card ‚Äì if you can get the server to prompt for smart card PIN repeatedly, maybe a PIN brute-force? These are esoteric, but enumerate what‚Äôs enabled (e.g., qwinsta / query session might show if audio or clipboard is active).

Cloud Storage & Sync Exploitation

    OneDrive/SharePoint Sync: Many enterprise VDIs come with OneDrive for Business or a SharePoint drive mapped for user convenience. If the user‚Äôs profile is syncing to OneDrive, you have a built-in path to exfiltrate data: simply place files in the OneDrive folder (which syncs out to cloud). Test this by creating a file in the OneDrive folder and seeing if it appears on your own OneDrive (if you have access) or ask the admin if possible. Also, abusing this, you could place a malicious file (like an evil macro-enabled Office doc) in OneDrive ‚Äì when the user logs in from a secure laptop later and opens it, they get compromised outside the VDI. In short, treat cloud sync as an approved data pipeline and ensure sensitive files in the VDI can‚Äôt silently sync out without inspection.

    Google Drive/Dropbox: Similar to OneDrive, if any consumer cloud storage apps are installed or allowed, those are major exfiltration vectors. Even if not installed, see if the user can access them via web ‚Äì e.g., can you log in to Google Drive via the VDI‚Äôs browser and upload files? That might bypass corporate network controls if the VDI has more open internet access than user‚Äôs local machine. It‚Äôs a potential gap to report if found.

    Profile Containers (FSLogix): Some Azure Virtual Desktop and RDS deployments use FSLogix to store user profiles in VHD(X) files on a file share. If you have low-level access, see if it‚Äôs possible to mount or read someone else‚Äôs VHD (permissions should prevent it, but if misconfigured, one user might see another‚Äôs data). From a persistence angle, FSLogix containers mean the user profile persists between sessions ‚Äì thus any backdoor you plant in the profile (startup folder, Run key, etc.) will persist too. Check if the FSLogix disk is encrypted or not ‚Äì if not, an attacker who gets file share access (maybe through the compromised VDI with domain creds) could directly steal user profiles.

    Cloud App Integrations: Check for other cloud integrations: e.g., Microsoft Teams or Slack in the VDI ‚Äì files sent via these might land on other systems. Or if something like Box or AWS CLI is configured, you might find keys/tokens you can use to pivot to cloud resources. Essentially, map out any cloud service the VDI is tied into and consider how it could leak data or be abused to run code (for instance, some VDI environments mount cloud drives as letter drives ‚Äì if misconfigured, maybe you can navigate the file system of the cloud storage beyond your access).

    Enterprise Sync Tools: Older solutions like ShareFile, Citrix Drive Mapper, or NetApp FlexCache might be in use ‚Äì ensure you understand any file sync tool present and test its boundaries (upload, download, accessible directories). Sometimes these tools have local caches ‚Äì if you find an offline cache of a synced drive, you might retrieve files that were ‚Äúdeleted‚Äù or not meant for you.

Active Directory (AD) Breakout Vectors in VDI

    AD Group Policies/Restrictions: Evaluate the Group Policy settings applied to the VDI session. Often, breakouts involve GPO misconfigurations. For example, if software restriction policies are applied via GPO, are they applying to the correct scope? If you have a normal user but find you can change certain system settings, it might mean a GPO wasn‚Äôt enforced. Use gpresult /R to see what policies are in effect and look for any unexpected configuration that could be abused (e.g., a logon script that you can tamper with on the domain).

    Domain Privileges of VDI Users: Confirm that the VDI user accounts are properly limited. Sometimes, organizations put VDI users in an AD group that has more rights than intended (e.g., all VDI users are in a group that is added to local Administrators on VDI endpoints for support reasons). If you find such a group, that‚Äôs a privilege escalation vector beyond just one machine. Also check if the user can perform any domain admin tasks ‚Äì unlikely, but does whoami /priv show any higher privileges (SeDebugPrivilege, etc.)? That could hint the machine itself is more privileged.

    VDI Infrastructure Accounts: The VDI might be accessed via an broker/gateway (like Citrix StoreFront/Netscaler, or Azure AD for AVD). While those are mostly external, sometimes the VDI VM itself may have residual creds. For example, check if any scheduled tasks or services run with domain accounts (e.g., a Horizon Agent might use a service account domain\HorizonAgent ‚Äì if that has extra rights, capturing that password or token is gold). Look in the Windows Credential Manager and DPAPI protected storage for saved credentials ‚Äì perhaps IT staff left a support account cred cached.

    AD Information Disclosure: Use the VDI to query AD info that a normal user can. Run net user /domain or net group /domain to list users and groups (if not restricted)
    pentestpartners.com
    . Sometimes VDI are configured in less restricted zones so these queries work. Look for sensitive group memberships like ‚ÄúDomain Admins‚Äù or ‚ÄúEnterprise Admins‚Äù and see if any logged-in or service accounts from your VDI appear there (hopefully not!). Even without direct breakout, gathering AD intel (trusts, admin accounts, password policy) is useful for planning further attacks.

    Credential Caching and Pass-the-Hash: If you manage to get local SYSTEM on a VDI machine, dump the hashes (using mimikatz or lsass memory). Because it‚Äôs domain-joined, you might get the hash of any account that logged into that machine. On multi-user RDS, multiple users‚Äô creds might be in memory. You can then attempt lateral movement with those hashes (pass-the-hash) to other servers. For example, maybe an admin logged into a VDI once and left a hash. Even standard user hashes could be tried on other machines if password reuse is rampant.

    DNS and Directory Services: As an internal system, the VDI can likely resolve internal DNS names. Use that to enumerate other AD infrastructure: e.g., query _ldap._tcp.dc._msdcs.domain.com to find domain controllers, then target them. If allowed, try using the ldapsearch via PowerShell or .NET to pull more AD data (for instance, user descriptions, which sometimes contain plaintext passwords). While these are more general internal pen-test moves, doing them from a VDI perspective shows the risk of an attacker who just has a ‚Äúlowly‚Äù user on a virtual desktop being able to survey and eventually compromise the whole domain (the ‚Äúsnowball effect‚Äù as cited, where one small hole leads to full domain takeover)
    pentestpartners.com
    .

Local Session Persistence

    Persistent vs Non-Persistent VDI: Determine if the VDI is non-persistent (i.e., reverts to a gold image on logoff) or if it‚Äôs an assigned persistent desktop. This affects persistence strategies. For non-persistent, focus on profile-level persistence; for persistent, you can also do system-level. In either case, the goal is to maintain foothold between sessions.

    Profile Persistence: Many non-persistent VDIs still keep user profiles (roaming or via FSLogix). Leverage this by placing autorun entries in the user‚Äôs profile. For example:

        Add a shortcut to %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup ‚Äì anything here will run when the user logs in next.

        Add a Run key in HKCU registry (Software\Microsoft\Windows\CurrentVersion\Run). This will execute on login for that user and is stored in their NTUSER.DAT (which is part of roaming profile).

        If you have macro access, place an Excel/Word macro in the user‚Äôs Office startup templates, so that it runs whenever Office is opened.

        Abuse scheduled tasks set to run as the user: e.g., schedule a task at login (SCHTASKS /Create /TN backdoor /TR "powershell.exe -ExecutionPolicy Bypass -File C:\Users\Public\backdoor.ps1" /SC ONLOGON /RU $env:UserName). On some systems, standard users can create tasks that run as themselves on login.

    System-Level Persistence: On persistent desktops (or if you manage to get privileges on a shared RDS host), you can install more robust persistence:

        Install a new service or modify an existing service to launch your payload (requires admin/SYSTEM).

        Use WMI Event Subscriptions for a stealthy trigger (e.g., on user login or periodically).

        If you have domain admin (outside VDI scope though), push a GPO startup script to the VDI OU.

        Less stealthy but effective: create a local user account (if you have admin) and add to Administrators, so even if your main access is revoked, you have another way in.

        If the VDI is on a schedule to reset, see if you can delay that or break the reset mechanism ‚Äì e.g., some non-persistent pools delete VMs, but if you can mess with the agent that does that (likely out of reach), you might keep a VM alive longer.

    Scheduled Tasks & Backdoors: Even in a single session, consider planting things like a reverse shell that triggers periodically in case your interactive session is discovered and killed. A scheduled task that runs every 5 minutes to check a C2, or a startup program that ensures on reboot the connection comes back, can make remediation harder. Just be mindful of not disrupting other users in multi-user scenarios.

    Logon Scripts Abuse: If you have the ability to edit a logon script (maybe your user has write access to a NETLOGON share or similar due to mispermission), that‚Äôs a golden ticket ‚Äì you can add malicious commands that execute for all users logging in. That‚Äôs more of an AD/config issue but can manifest in VDI if, say, all VDI users run a certain logon batch file that you can modify.

App Sandboxing & Streaming Misconfigurations

    Citrix Published Apps Breakout: In Citrix Virtual Apps (formerly XenApp), instead of a full desktop, users run published applications. Test those thoroughly for breakout. For example, if only ‚ÄúExcel‚Äù is published, can you spawn other programs from Excel? (Yes ‚Äì via macros or opening hyperlinks, etc., as discussed). If only a browser is published, we covered browser breakouts. If a custom app is published, see if it has any UI that allows launching something else (file dialogs, help links, etc.). Citrix tries to isolate the app, but often the breakout is identical to a regular desktop once you get an Explorer window open on the server. Ensure any published app is as locked down as a kiosk would be.

    Citrix App Layering/Virtualization: Some Citrix environments use App Layering to deliver applications in a layered image. While largely transparent to the user, layering might introduce odd behavior ‚Äì e.g., an application might run with certain files virtualized. As a tester, see if you can access the underlying file system of another layer or the base OS. This is low-level, but for instance, if two apps are isolated from each other but you can make them interact (maybe through the file system or registry), you might break the intended isolation. If you suspect layering, research any known escape in that specific version.

    Microsoft App-V or FSLogix App Masking: If applications are delivered via App-V (application virtualization), check if the virtual environment can be escaped. Usually App-V apps can still interact with the OS unless explicitly isolated. Try to use an App-V delivered app to launch a non-virtualized one (similar to published app breakout). FSLogix App Masking might hide certain apps from the user ‚Äì see if you can execute them anyway (maybe via command line) if you know the path.

    VMware ThinApp: This is another app virtualization technology. If you encounter ThinApp packages, know that they run in user-mode but can be configured to allow interaction with the host. Look for any that might allow spawning cmd.exe or writing files to host. The key with any app sandbox is to find communication channels between the sandboxed app and the real system (files, registry, COM objects, etc.) and exploit those.

    Layered Security Bypass: Citrix and Horizon often come with extra security layers like policy restrictions (disabling certain keystrokes, drives, etc.) and profile management. Misconfigurations here can be telling. For example, if Citrix policies were meant to disable client drive mapping but you still find the drive, that‚Äôs a config bug to report. Or if ‚Äúprohibited‚Äù keys (like Ctrl+Alt+Del) still work via some sequence, note it. Also, test the Citrix hotkeys like Ctrl+F1 or Shift+F2 ‚Äì some are meant for session management but if not disabled they might allow toggling between sessions or resizing windows in a way to expose the underlying desktop
    netspi.com
    netspi.com
    .

    Virtual Channel Abuse: Citrix and RDP have virtual channels for features (clipboard, printing, drive, etc.). If you‚Äôre able to develop or use a custom tool, you could try to abuse these channels. For instance, the Citrix CGP or ICA virtual channels ‚Äì any known vulnerabilities there (historically, there have been issues where malformed data in a channel could crash the endpoint). This is quite advanced (requires writing exploit code usually), but be aware of their existence. A simpler check: if you can run a network sniffer on the VDI (or client side) to see if any sensitive data is transmitted in those channels (like keystrokes in cleartext over CGP), that would be a finding.

    Session Recording / Monitoring Bypass: Some VDI setups use session recording (e.g., Citrix Session Recording) or monitoring agents. From an attacker perspective, you might try to detect if you‚Äôre being recorded (certain processes or services) and attempt to disable them. If you as a tester can disable the recording service (say via a flaw or by killing a process you shouldn‚Äôt be able to), that‚Äôs a misconfiguration. This is a niche area but relevant in high-security environments ‚Äì any ability to tamper with the security tools on the VDI is significant.

Client-Side Manipulation & External Entry Points

    HTML5 Client Exploits: When the user connects via a web browser (HTML5 client), the server sends down a web application (JavaScript, etc.) that runs the remote desktop. Look at that code (use browser Dev Tools to inspect source). If you find references to features like clipboard, file transfer, etc., see if you can invoke them even if the UI doesn‚Äôt expose it. Developers sometimes hide buttons but leave API endpoints accessible. Manually calling a function to upload a file might work despite the button being absent.

    Web Portal Vulnerabilities: The VDI/RDS web portal itself (e.g., Citrix StoreFront, VMware Horizon Web Access, Microsoft RDWeb) could have vulnerabilities. A common one is XSS ‚Äì if an attacker can XSS the login page or a user‚Äôs apps page, they might steal credentials or manipulate the session launch. For instance, a reflected XSS in Citrix StoreFront could let an attacker force a user‚Äôs browser to silently modify the ICA file when they launch an app, maybe re-enabling something like client drive mapping. Test all inputs on these pages (if in scope).

    Malicious RDP Server (Reverse RDP): There is a class of attacks where the server can compromise the client (e.g., CVE-2019-0863 and others). As a pen tester, you normally are the client, but consider demonstrating the risk: if an attacker compromises one VDI desktop, they could set up a fake RDP server on it and entice an admin to connect, exploiting the admin‚Äôs MSTSC client. If allowed, you could run a tool like PyRDP or Metasploit‚Äôs RDP server module on the VDI and show that when someone connects, you can execute code on their machine
    cloud.google.com
    isc.sans.edu
    . Even if you don‚Äôt fully exploit this, mention any known client CVEs (for Citrix Workspace, Horizon Client, MSTSC, etc.) and ensure the client software is updated. For example, older Citrix Receivers had a drive redirection bug allowing remote read of client files
    nccgroup.com
    .

    Social Engineering within VDI: Test if you can manipulate the user‚Äôs environment in a way that when they leave the VDI, their local machine is at risk. A scenario: Place a malicious shortcut on the user‚Äôs Desktop folder in the VDI that points to an external resource (like a \\attacker\share\evil.lnk). If the profile is roamed or if they might drag files out of VDI, they could carry that shortcut to their host and later click it, triggering an attack on their host. This isn‚Äôt a direct ‚Äúbreakout‚Äù during the session, but it‚Äôs a vector to persist an attack that jumps out later.

    Logging and Session Security: Investigate how the VDI session is protected on the client side. For instance, if using an HTML5 client, all traffic is web traffic ‚Äì is it properly encrypted? If you drop the TLS or use a MITM (with permission), can you sniff keystrokes? For native clients, are they using up-to-date encryption (RDP should be TLS 1.2+, Citrix should be TLS or DTLS if UDP)? Weak encryption or accepting self-signed certs would be a finding. While this is more config review, it relates to an attacker potentially capturing data between client and VDI if they got in the middle.

    Client-Side Cache: RDP and Citrix clients often cache bitmaps or have temp files on the client. From a data exposure perspective, check what traces your VDI session leaves on the client (especially for HTML5 ‚Äì the browser might have significant data cached). If the client machine is in scope, you could see if any sensitive info (like screenshots of the VDI, or credentials) are left unprotected. This is more on the defensive side, but a savvy attacker might target the client to pull such info after the fact.

    External Device Trust: Finally, consider any integration with the client‚Äôs environment that could be abused. For example, some VDI setups allow launching apps from the VDI on the client (Citrix has ‚ÄúLocal App Access‚Äù feature) ‚Äì if that‚Äôs enabled, then from the VDI you could instruct the client to run an application installed locally. That‚Äôs a huge breakout if misconfigured. It essentially reverses the direction of trust. Not many orgs use that feature due to its risks, but keep an eye out for anything that bridges the VDI and client beyond just I/O redirection.

Each of the above categories and checks helps ensure no stone is left unturned during a VDI/RDP penetration test. By going beyond basic tests and considering obscure attack vectors ‚Äì from abusing virtual channels and protocol handlers to leveraging cloud sync and misconfigurations ‚Äì a tester can thoroughly assess the security of a virtual desktop deployment. The ultimate goal is to identify any avenue by which an attacker who gains a foothold in a VDI session (or who lures a user into connecting to a malicious server) could escape containment, escalate privileges, pivot deeper into the network, or impact the client side. This checklist should be used alongside up-to-date threat intelligence (for newly discovered CVEs in VDI software) and tailored to the specifics of the environment under test. Happy hunting!

Sources:

    Pen Test Partners ‚Äì Breaking Out of Citrix and other Restricted Desktop Environments
    pentestpartners.com
    pentestpartners.com

    Tarlogic ‚Äì Pentests in restricted VDI environments
    tarlogic.com
    tarlogic.com

    Internal All The Things ‚Äì Kiosk/VDI Breakout Cheat Sheet
    swisskyrepo.github.io
    swisskyrepo.github.io

    NetSPI ‚Äì Breaking Out of Apps via Terminal Services/Citrix
    netspi.com
    netspi.com

    Rapid7 ‚Äì CVE-2025-6759 Citrix VDI Privilege Escalation
    rapid7.com
    rapid7.com

    InfoSec Writeups ‚Äì Escaping the Citrix Sandbox
    infosecwriteups.com
    infosecwriteups.com
    (summary of common breakout techniques)

    PentestPartners ‚Äì File Transfer and Device Redirection in VDI
    pentestpartners.com
    pentestpartners.com

    PentestPartners ‚Äì ICA File Manipulation for Breakout
    pentestpartners.com
    and Citrix Hotkeys
    netspi.com
    .

Citations

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Escaping the Citrix Sandbox ‚Äî Understanding Citrix Breakout | by Suprajabaskaran | InfoSec Write-ups
https://infosecwriteups.com/escaping-the-citrix-sandbox-understanding-citrix-breakout-80320a3d44af?gi=6b6eb8964e47

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Escaping the Citrix Sandbox ‚Äî Understanding Citrix Breakout | by Suprajabaskaran | InfoSec Write-ups
https://infosecwriteups.com/escaping-the-citrix-sandbox-understanding-citrix-breakout-80320a3d44af?gi=6b6eb8964e47

Escaping the Citrix Sandbox ‚Äî Understanding Citrix Breakout | by Suprajabaskaran | InfoSec Write-ups
https://infosecwriteups.com/escaping-the-citrix-sandbox-understanding-citrix-breakout-80320a3d44af?gi=6b6eb8964e47

Escaping the Citrix Sandbox ‚Äî Understanding Citrix Breakout | by Suprajabaskaran | InfoSec Write-ups
https://infosecwriteups.com/escaping-the-citrix-sandbox-understanding-citrix-breakout-80320a3d44af?gi=6b6eb8964e47

VDI Security - pentesting in restricted environments| Tarlogic
https://www.tarlogic.com/blog/pentests-in-restricted-vdi-environments/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Escaping the Citrix Sandbox ‚Äî Understanding Citrix Breakout | by Suprajabaskaran | InfoSec Write-ups
https://infosecwriteups.com/escaping-the-citrix-sandbox-understanding-citrix-breakout-80320a3d44af?gi=6b6eb8964e47

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

CVE-2025-6759: Citrix Virtual Apps and Desktops - Local Privilege Escalation
https://www.rapid7.com/blog/post/cve-2025-6759-citrix-virtual-apps-and-desktops-fixed/

CVE-2025-6759: Citrix Virtual Apps and Desktops - Local Privilege Escalation
https://www.rapid7.com/blog/post/cve-2025-6759-citrix-virtual-apps-and-desktops-fixed/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Windows Remote Desktop Protocol: Remote to Rogue - Google Cloud
https://cloud.google.com/blog/topics/threat-intelligence/windows-rogue-remote-desktop-protocol

Remote Desktop Protocol (RDP) Discovery - SANS ISC
https://isc.sans.edu/diary/27984

Technical Advisory: Citrix Workspace / Receiver Remote Code ...
https://www.nccgroup.com/research-blog/technical-advisory-citrix-workspace-receiver-remote-code-execution-vulnerability/

VDI Security - pentesting in restricted environments| Tarlogic
https://www.tarlogic.com/blog/pentests-in-restricted-vdi-environments/

VDI Security - pentesting in restricted environments| Tarlogic
https://www.tarlogic.com/blog/pentests-in-restricted-vdi-environments/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Kiosk Escape and Jail Breakout - Internal All The Things
https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/escape-breakout/

Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks
https://www.netspi.com/blog/technical-blog/network-pentesting/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/

Breaking Out of Citrix and other Restricted Desktop Environments | Pen Test Partners
https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/
All Sources
pentestpartners
infosecwriteups
swisskyrepo.github
netspi
tarlogic
rapid7
cloud.google
isc.sans
nccgroup
